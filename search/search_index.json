{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u57fa\u76e4 (KOIKI-FW v0.5.0)","text":"<p>\u3053\u308c\u306f\u3001Python (FastAPI) \u3092\u7528\u3044\u305f\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u69cb\u7bc9\u306e\u305f\u3081\u306e\u3001\u5805\u7262\u306a\u57fa\u76e4\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u300cKOIKI-FW\u300d\u306e v0.5.0 \u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\u3002</p> <p>\u8a73\u7d30\u306f <code>docs/design_kkfw_0.5.0.md</code> \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"#_1","title":"\u7279\u5fb4","text":"<ul> <li>\u30e2\u30c0\u30f3\u306a\u6280\u8853\u30b9\u30bf\u30c3\u30af: FastAPI, SQLAlchemy (Async), Pydantic, Redis, Celery, structlog, Prometheus, slowapi \u7b49\u3002</li> <li>\u95a2\u5fc3\u4e8b\u306e\u5206\u96e2: API\u5c64\u3001\u30b5\u30fc\u30d3\u30b9\u5c64\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u5c64\u306e\u660e\u78ba\u306a\u5206\u96e2\u3002</li> <li>\u975e\u540c\u671f\u51e6\u7406: \u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306a\u975e\u540c\u671f\u51e6\u7406\u3002</li> <li>\u578b\u5b89\u5168\u6027: Pydantic \u3068\u578b\u30d2\u30f3\u30c8\u306b\u3088\u308b\u958b\u767a\u52b9\u7387\u3068\u5b89\u5168\u6027\u306e\u5411\u4e0a\u3002</li> <li>\u30c6\u30b9\u30c8\u5bb9\u6613\u6027: \u4f9d\u5b58\u6027\u6ce8\u5165\u306b\u3088\u308b\u5bb9\u6613\u306a\u30c6\u30b9\u30c8\u5b9f\u88c5\u3002</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: JWT\u8a8d\u8a3c, RBAC, \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8, \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\u7b49\u306e\u57fa\u672c\u6a5f\u80fd\u3002</li> <li>\u76e3\u8996\u30fb\u30ed\u30ae\u30f3\u30b0: \u69cb\u9020\u5316\u30ed\u30b0, \u76e3\u67fb\u30ed\u30b0, Prometheus\u9023\u643a\u3002</li> <li>\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3: GitHub Actions\u306b\u3088\u308b\u81ea\u52d5\u30c6\u30b9\u30c8\u3001\u30b3\u30fc\u30c9\u54c1\u8cea\u30c1\u30a7\u30c3\u30af\u306e\u5c0e\u5165\u3002</li> </ul>"},{"location":"#docker-compose","title":"\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3068\u5b9f\u884c (Docker Compose)","text":""},{"location":"#_2","title":"\u521d\u56de\u74b0\u5883\u69cb\u7bc9","text":"<pre><code># \u74b0\u5883\u5909\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\ncp .env.example .env\n# \u5fc5\u8981\u306b\u5fdc\u3058\u3066.env\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\n\n# \u30b3\u30f3\u30c6\u30ca\u306e\u30d3\u30eb\u30c9\u3068\u8d77\u52d5\ndocker-compose up --build -d\n</code></pre> <p>\u4e0a\u8a18\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u3001\u4ee5\u4e0b\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u306e\u78ba\u8a8d\uff08\u6700\u592730\u56de\u30ea\u30c8\u30e9\u30a4\uff09 - alembic/versions\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u78ba\u8a8d\u3068\u4f5c\u6210 - \u521d\u671f\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c</p>"},{"location":"#_3","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ed\u30b0\u306e\u78ba\u8a8d","text":"<pre><code># \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u30ed\u30b0\u306e\u78ba\u8a8d\ndocker-compose logs -f app\n</code></pre>"},{"location":"#_4","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<ul> <li>API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 (Swagger UI): http://localhost:8000/docs</li> <li>API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 (ReDoc): http://localhost:8000/redoc</li> <li>\u30eb\u30fc\u30c8\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8: http://localhost:8000/</li> </ul>"},{"location":"#_5","title":"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c","text":""},{"location":"#_6","title":"\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u30c6\u30b9\u30c8\u5b9f\u884c","text":"<pre><code># Poetry\u3092\u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u5b9f\u884c\npoetry run pytest\n\n# \u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u4ed8\u304d\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\npoetry run pytest --cov=app --cov=libkoiki --cov-report=term-missing tests/\n</code></pre>"},{"location":"#ci","title":"\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI)","text":"<p>GitHub Actions\u306b\u3088\u308b\u81ea\u52d5\u30c6\u30b9\u30c8\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30d6\u30e9\u30f3\u30c1\u3078\u306e\u30d7\u30c3\u30b7\u30e5\u6642\u306b\u81ea\u52d5\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a - master - develop - dev/ - feature/ - bugfix/*</p> <p>\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306b\u3082\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u3001\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u304c\u691c\u8a3c\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"#_7","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8/\n\u251c\u2500\u2500 app/                     # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b3\u30fc\u30c9\n\u2502   \u251c\u2500\u2500 api/                 # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eDI\u306a\u3069\n\u2502   \u251c\u2500\u2500 models/              # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eDB\u30e2\u30c7\u30eb\n\u2502   \u251c\u2500\u2500 repositories/        # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\n\u2502   \u251c\u2500\u2500 routers/             # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eAPI\u30eb\u30fc\u30bf\u30fc\n\u2502   \u251c\u2500\u2500 schemas/             # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306ePydantic\u30b9\u30ad\u30fc\u30de\n\u2502   \u251c\u2500\u2500 services/            # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b5\u30fc\u30d3\u30b9\n\u2502   \u2514\u2500\u2500 main.py              # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\u251c\u2500\u2500 libkoiki/                # \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30b3\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\n\u2502   \u251c\u2500\u2500 api/                 # API\u5171\u901a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n\u2502   \u251c\u2500\u2500 core/                # \u30b3\u30a2\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 (\u8a2d\u5b9a\u30fb\u8a8d\u8a3c\u30fb\u30ed\u30ae\u30f3\u30b0\u306a\u3069)\n\u2502   \u251c\u2500\u2500 db/                  # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u95a2\u9023\n\u2502   \u251c\u2500\u2500 models/              # \u5171\u901aDB\u30e2\u30c7\u30eb (User, Role, Permission\u306a\u3069)\n\u2502   \u251c\u2500\u2500 repositories/        # \u5171\u901a\u30ea\u30dd\u30b8\u30c8\u30ea\n\u2502   \u251c\u2500\u2500 schemas/             # \u5171\u901aPydantic\u30b9\u30ad\u30fc\u30de\n\u2502   \u251c\u2500\u2500 services/            # \u5171\u901a\u30b5\u30fc\u30d3\u30b9\n\u2502   \u2514\u2500\u2500 tasks/               # Celery\u30bf\u30b9\u30af\u95a2\u9023\n\u251c\u2500\u2500 alembic/                 # DB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\n\u251c\u2500\u2500 tests/                   # \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9 (unit, integration)\n\u251c\u2500\u2500 .env.example             # \u74b0\u5883\u5909\u6570\u30b5\u30f3\u30d7\u30eb\n\u251c\u2500\u2500 .github/                 # GitHub Actions\u8a2d\u5b9a\n\u251c\u2500\u2500 docker-compose.yml       # Docker\u69cb\u6210\n\u251c\u2500\u2500 Dockerfile               # \u30b3\u30f3\u30c6\u30ca\u30a4\u30e1\u30fc\u30b8\u5b9a\u7fa9\n\u2514\u2500\u2500 README.md                # \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8aac\u660e\n</code></pre> <p>\u8a73\u7d30\u306a\u69cb\u6210\u3068\u6a5f\u80fd\u8aac\u660e\u306f <code>docs/design_kkfw_0.5.0.md</code> \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"#_8","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>MIT License</p> <p>https://opensource.org/license/mit</p>"},{"location":"CLAUDE/","title":"CLAUDE.md","text":"<p>This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.</p>"},{"location":"CLAUDE/#security-update-history","title":"Security Update History","text":""},{"location":"CLAUDE/#2025-06-21-critical-security-vulnerabilities-fixed-comprehensive-dependency-modernization","title":"2025-06-21: Critical Security Vulnerabilities Fixed + Comprehensive Dependency Modernization","text":"<p>Security Priority Update: All known vulnerabilities resolved + Complete dependency stack modernization</p> <p>Fixed Vulnerabilities: - fastapi: 0.104.1 \u2192 0.115.13 (Fixed: PYSEC-2024-38) - python-jose: 3.3.0 \u2192 3.5.0 (Fixed: PYSEC-2024-232, PYSEC-2024-233) - starlette: 0.27.0 \u2192 0.46.2 (Fixed: GHSA-f96h-pmfr-66vw)</p> <p>Python 3.13 Compatibility: - asyncpg: 0.29.0 \u2192 0.30.0 (Python 3.13 compilation support) - pydantic: 2.9.2 \u2192 2.11.7 (Enterprise requirement: pydantic &gt;=2.7.0)</p> <p>Phase 1 Updates (Low Risk): - email-validator: 2.1.2 \u2192 2.2.0 (Validation improvements) - pytest-cov: 6.1.1 \u2192 6.2.1 (Test coverage enhancements)</p> <p>Phase 2 Updates (Medium Risk): - httpx: 0.25.2 \u2192 0.28.1 (HTTP client improvements) - structlog: 23.2.0 \u2192 25.4.0 (Structured logging enhancements) - alembic: 1.12.1 \u2192 1.16.2 (Database migration improvements) - anyio: 3.7.1 \u2192 4.9.0 (Async I/O performance) - limits: 5.3.0 \u2192 5.4.0 (Rate limiting improvements)</p> <p>Phase 3 Updates (High Risk): - uvicorn: 0.24.0 \u2192 0.34.3 (ASGI server major performance improvements) - pytest: 7.4.4 \u2192 8.4.1 (Test framework major upgrade) - pytest-asyncio: 0.23.8 \u2192 1.0.0 (Async testing major upgrade) - redis: 5.0.8 \u2192 6.2.0 (Redis client major upgrade) - prometheus-fastapi-instrumentator: 5.7.1 \u2192 7.1.0 (Monitoring enhancements)</p> <p>Container Deployment Verification: - \u2705 Build: 51 packages successfully installed - \u2705 Performance: Response time 0.055-0.080s (excellent) - \u2705 API Tests: Full CRUD operations, authentication, security headers - \u2705 Database: PostgreSQL connection, Alembic migrations functional</p> <p>Security Audit Result: \u2705 No known vulnerabilities found</p> <p>Security Tools Configuration: - \u2705 pip-audit: 2.9.0 (OSV database vulnerability scanning) - \u2705 bandit: 1.8.5 (Static security analysis) - \u274c safety: Excluded (pydantic &lt;2.0 dependency conflict)</p> <p>Enterprise Security Strategy: - Priority: Security fixes over version stability during development phase - Approach: Proactive updates when impact scope and dependency count allow - Philosophy: Leverage development period for comprehensive modernization - Result: Production-ready modernized dependency stack with zero known vulnerabilities</p>"},{"location":"CLAUDE/#poetry-2x-migration-summary","title":"Poetry 2.x Migration Summary","text":"<p>This project has been fully optimized for Poetry 2.x with PEP 621 compliance, providing: - Enhanced Performance: Parallel dependency installation with optimized caching - Modern Standards: Full PEP 621 compliance for improved tool interoperability - Organized Dependencies: Clear separation of main, dev, and test dependencies - Optimized Workflows: Streamlined CI/CD with Poetry 2.x features - Future-Proof Architecture: Ready for Python packaging ecosystem evolution</p>"},{"location":"CLAUDE/#development-commands-poetry-2x-optimized","title":"Development Commands (Poetry 2.x Optimized)","text":""},{"location":"CLAUDE/#environment-setup","title":"Environment Setup","text":"<pre><code># Poetry 2.x: Initial performance configuration\npoetry config installer.parallel true\npoetry config installer.max-workers 10\npoetry config virtualenvs.create true\npoetry config virtualenvs.in-project true\n\n# Poetry 2.x: Dependency verification and installation\npoetry check --lock\npoetry install\n\n# Poetry 2.x: Use dependency groups for targeted installation\npoetry install --with dev          # Install with development dependencies\npoetry install --with test         # Install with test dependencies  \npoetry install --with dev,test      # Install with multiple groups\npoetry install --only=main         # Install only production dependencies\npoetry install --only=dev          # Install only development dependencies\n\n# For export functionality (if needed)\npoetry self add poetry-plugin-export\n\n# Run with Docker Compose (recommended for development)\ndocker-compose up --build\n\n# Run locally (requires PostgreSQL setup)\npoetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000\n\n# Activate environment\npoetry shell\n</code></pre>"},{"location":"CLAUDE/#testing","title":"Testing","text":"<pre><code># Poetry 2.x: Install test dependencies first\npoetry install --with test\n\n# Run all tests\npoetry run pytest\n\n# Run specific test files\npoetry run pytest tests/unit/test_hello.py\npoetry run pytest tests/integration/app/api/test_todos_api.py\n\n# Run tests with coverage\npoetry run pytest --cov=app --cov=libkoiki --cov-report=term-missing --cov-report=html tests/\n\n# Poetry 2.x: Run tests for specific dependency groups\npoetry install --only=test\npoetry run pytest\n</code></pre>"},{"location":"CLAUDE/#database-management","title":"Database Management","text":"<pre><code># Create new migration\nalembic revision --autogenerate -m \"description\"\n\n# Apply migrations\nalembic upgrade head\n\n# Check migration status\nalembic current\n</code></pre>"},{"location":"CLAUDE/#code-quality-enterprise-dependency-management","title":"Code Quality &amp; Enterprise Dependency Management","text":"<pre><code># Poetry 2.x with PEP 621 compliance for enterprise dependency management\n# Project follows strict enterprise versioning: minor version locks for stability\n\n# Poetry 2.x: Comprehensive dependency verification\npoetry check --lock                 # Verify lock file consistency\npoetry lock                        # Update lock file if needed\n\n# Poetry 2.x: Dependency synchronization and management\npoetry sync                        # Sync environment with lock file\npoetry install --sync              # Alternative sync method\n\n# Install specific dependency groups (Poetry 2.x feature)\npoetry install --only=main         # Production dependencies only\npoetry install --only=dev          # Development dependencies only\npoetry install --only=test         # Test dependencies only\npoetry install --only=security     # Security audit tools\npoetry install --with dev,test,security  # Multiple groups\n\n# Enterprise Security Auditing (Python 3.13 Compatible)\n# Note: safety excluded due to pydantic &lt;2.0 dependency conflict\npoetry install --with security     # Install security tools\npoetry run pip-audit               # OSV database vulnerability scan (pydantic independent)\npoetry run pip-audit --format=json --output=security-audit.json  # JSON report\npoetry run bandit -r . --severity-level medium  # Static security analysis\npoetry run bandit -r . -f json -o security-bandit.json  # JSON report\n\n# Environment and dependency information\npoetry env info                     # Environment details\npoetry show --tree                  # Dependency tree\npoetry show --tree --only=main     # Production dependency tree\npoetry show --outdated             # Check for updates\npoetry config --list               # Current Poetry configuration\n\n# Cache management (Poetry 2.x optimization)\npoetry cache clear --all pypi       # Clear package cache\npoetry cache list                   # List cached packages\n</code></pre>"},{"location":"CLAUDE/#architecture-overview","title":"Architecture Overview","text":"<p>This is KOIKI-FW v0.5.0, an enterprise-grade FastAPI application framework optimized for Poetry 2.x and PEP 621 compliance with the following key characteristics:</p>"},{"location":"CLAUDE/#project-structure","title":"Project Structure","text":"<ul> <li>Root <code>/</code>: Main application entry point and Docker configuration</li> <li><code>app/</code>: Application-specific code (endpoints, models, schemas, services, repositories)</li> <li><code>libkoiki/</code>: Reusable framework library containing core functionality</li> <li><code>alembic/</code>: Database migrations</li> <li><code>tests/</code>: Unit and integration tests</li> <li><code>docs/</code>: Project documentation</li> </ul>"},{"location":"CLAUDE/#framework-architecture-libkoiki","title":"Framework Architecture (libkoiki)","text":"<p>The libkoiki library provides enterprise-ready components:</p> <ul> <li><code>core/</code>: Configuration, logging, security, middleware, error handling</li> <li><code>api/v1/</code>: API endpoints (auth, users, todos) and routing</li> <li><code>db/</code>: Database session management and base models</li> <li><code>models/</code>: SQLAlchemy ORM models (User, Todo, Role, Permission)</li> <li><code>repositories/</code>: Data access layer following repository pattern</li> <li><code>services/</code>: Business logic layer</li> <li><code>schemas/</code>: Pydantic models for API serialization</li> <li><code>events/</code>: Event publishing and handling system</li> <li><code>tasks/</code>: Celery task definitions (commented out in current version)</li> <li><code>utils/</code>: Utility functions</li> </ul>"},{"location":"CLAUDE/#application-layer-app","title":"Application Layer (<code>app/</code>)","text":"<p>Application-specific implementations that extend the framework: - Uses libkoiki as a local development dependency (Poetry 2.x: <code>libkoiki = {path = \"libkoiki\", develop = true}</code>) - Follows PEP 621 standard in pyproject.toml for metadata and dependencies - Follows the same layered architecture pattern</p>"},{"location":"CLAUDE/#key-technologies","title":"Key Technologies","text":"<ul> <li>FastAPI: Web framework with automatic OpenAPI documentation</li> <li>SQLAlchemy 2.0: Async ORM with PostgreSQL</li> <li>Alembic: Database migrations</li> <li>Pydantic: Data validation and serialization</li> <li>structlog: Structured logging</li> <li>JWT: Authentication via python-jose</li> <li>slowapi: Rate limiting</li> <li>Redis: Optional for event publishing and enhanced rate limiting</li> <li>Docker: Containerization with multi-stage builds</li> </ul>"},{"location":"CLAUDE/#configuration-system","title":"Configuration System","text":"<p>Settings are managed through <code>libkoiki.core.config.Settings</code> using pydantic-settings: - Environment variables override defaults - Separate configurations for development/testing/production - Database URL, Redis settings, CORS origins, rate limiting, etc. - Poetry 2.x: Dependencies managed via PEP 621 [project] section - Development dependencies organized in Poetry 2.x dependency groups</p>"},{"location":"CLAUDE/#development-patterns","title":"Development Patterns","text":""},{"location":"CLAUDE/#dependency-injection","title":"Dependency Injection","text":"<p>The framework uses FastAPI's dependency injection system extensively: - Database sessions injected via <code>get_db()</code> - Authentication via <code>get_current_user()</code> - Rate limiting via slowapi decorators</p>"},{"location":"CLAUDE/#repository-pattern","title":"Repository Pattern","text":"<p>Data access follows repository pattern: - Base repository in <code>libkoiki.repositories.base</code> - Specific repositories extend base functionality - Services layer calls repositories, not models directly</p>"},{"location":"CLAUDE/#event-system","title":"Event System","text":"<p>Async event handling system (Redis-based, currently disabled): - Event publishers in services - Event handlers for cross-cutting concerns - Supports distributed event processing</p>"},{"location":"CLAUDE/#redis-integration","title":"Redis Integration","text":"<p>Redis support is optional and gracefully degrades: - If Redis unavailable, uses in-memory alternatives - Event system becomes no-op - Rate limiting falls back to fixed-window strategy</p>"},{"location":"CLAUDE/#security-features","title":"Security Features","text":"<ul> <li>JWT-based authentication with role-based access control (RBAC)</li> <li>Security headers middleware</li> <li>Rate limiting per endpoint</li> <li>Audit logging middleware</li> <li>Password hashing with bcrypt</li> </ul>"},{"location":"CLAUDE/#api-documentation","title":"API Documentation","text":"<ul> <li>Swagger UI: http://localhost:8000/docs</li> <li>ReDoc: http://localhost:8000/redoc</li> <li>OpenAPI spec: http://localhost:8000/openapi.json</li> </ul>"},{"location":"CLAUDE/#development-notes","title":"Development Notes","text":""},{"location":"CLAUDE/#database","title":"Database","text":"<ul> <li>Uses PostgreSQL exclusively (no SQLite support)</li> <li>Async SQLAlchemy 2.0 with asyncpg driver</li> <li>Connection pooling configured in settings</li> <li>All schema changes via Alembic migrations</li> </ul>"},{"location":"CLAUDE/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Separate unit and integration test directories</li> <li>Test configuration in <code>pytest.ini_options</code> (pyproject.toml)</li> <li>Coverage tracking for <code>app</code> and <code>libkoiki</code> modules</li> <li>Test database setup via conftest.py</li> </ul>"},{"location":"CLAUDE/#docker-development","title":"Docker Development","text":"<ul> <li>Multi-stage Dockerfile optimized for Poetry 2.x with parallel installation</li> <li>Poetry 2.x performance optimizations: parallel workers, cache management</li> <li>Non-root user (appuser) for security</li> <li>Health checks configured</li> <li>Volume mounts for live reload during development</li> <li>Optimized layer caching for Poetry dependencies</li> </ul>"},{"location":"CLAUDE/#poetry-2x-pep-621-features","title":"Poetry 2.x &amp; PEP 621 Features","text":"<ul> <li>PEP 621 Compliance: Project metadata and dependencies in standardized <code>[project]</code> section</li> <li>Dependency Groups: Organized development, test, and production dependencies</li> <li>Performance Optimization: Parallel installation with configurable worker count</li> <li>Modern Build System: poetry-core&gt;=1.5.0 for enhanced Poetry 2.x features</li> <li>Standardized Dependencies: Semantic versioning ranges instead of wildcards</li> <li>Tool Interoperability: PEP 621 compliance enables easy migration between build tools</li> </ul>"},{"location":"CLAUDE/#environment-configuration","title":"Environment Configuration","text":"<ul> <li><code>.env</code> file for local settings (not committed)</li> <li>Settings cascade: environment variables \u2192 .env \u2192 defaults</li> <li>Separate configurations per environment (APP_ENV setting)</li> <li>Poetry 2.x: Optimized virtualenv and cache configuration</li> </ul>"},{"location":"CLAUDE/#enterprise-security-strategy","title":"Enterprise Security Strategy","text":""},{"location":"CLAUDE/#security-first-dependency-management","title":"Security-First Dependency Management","text":"<p>Core Principles: 1. Security Over Stability: During development phase, prioritize security fixes over version stability 2. Proactive Updates: Leverage development periods for comprehensive security modernization 3. Impact-Based Decisions: Update scope determined by impact analysis and dependency count 4. Compatibility Priority: Maintain enterprise requirements (e.g., pydantic &gt;=2.7.0)</p> <p>Vulnerability Response Framework:</p> <pre><code># 1. Immediate Assessment\npoetry run pip-audit --format=json --output=vuln-assessment.json\npoetry run pip-audit  # Human-readable summary\n\n# 2. Impact Analysis\npoetry show --tree | grep -E \"(vulnerable_package|dependency_chain)\"\npoetry show vulnerable_package  # Check version and dependents\n\n# 3. Security-Priority Update Process\n# Update to security-fixed version (not just minimum required)\npoetry add \"fastapi&gt;=0.115.13,&lt;0.116.0\"  # Latest stable with security fixes\npoetry add \"python-jose&gt;=3.4.0,&lt;3.6.0\"   # Beyond minimum fix version\n\n# 4. Verification\npoetry lock\npoetry install\npoetry run pip-audit  # Confirm no vulnerabilities\n\n# 5. Compatibility Testing\npoetry run pytest  # Ensure functionality maintained\n</code></pre> <p>Development Phase Security Strategy: - Proactive Approach: Update during development when changes are easier to implement - Comprehensive Scope: Address not just immediate fixes but also modernization opportunities - Enterprise Requirements: Maintain compatibility with enterprise-grade dependencies - Testing Priority: Ensure all updates maintain system functionality</p> <p>Tool Selection Rationale: - pip-audit: Primary tool (pydantic-independent, OSV database) - bandit: Static analysis (pydantic-independent) - safety: Excluded due to pydantic &lt;2.0 dependency conflict - Alternative: Use pip-audit which provides equivalent vulnerability detection</p>"},{"location":"CLAUDE/#security-audit-integration","title":"Security Audit Integration","text":"<p>Daily Security Monitoring:</p> <pre><code># Automated security check script\n#!/bin/bash\necho \"=== Daily Security Audit ===\"\npoetry run pip-audit --format=json --output=\"audit-$(date +%Y%m%d).json\"\npoetry run pip-audit\npoetry run bandit -r . --severity-level medium\npoetry show --outdated | grep -E \"(critical|security)\"\n</code></pre> <p>Pre-Deployment Security Gate:</p> <pre><code># Security gate for deployment pipeline\npoetry install --with security\npoetry run pip-audit || exit 1  # Block deployment on vulnerabilities\npoetry run bandit -r . --severity-level high || exit 1  # Block on high-severity issues\n</code></pre>"},{"location":"CLAUDE/#poetry-2x-troubleshooting","title":"Poetry 2.x Troubleshooting","text":""},{"location":"CLAUDE/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<pre><code># If dependency installation fails\npoetry cache clear --all pypi\npoetry install --no-cache\n\n# If lock file is out of sync\npoetry check --lock\npoetry lock\npoetry install\n\n# If local libkoiki package fails to install\ncd libkoiki\npoetry build\ncd ..\npoetry install\n\n# Check Poetry and environment status\npoetry --version\npoetry env info\npoetry config --list\n\n# Reset Poetry environment if needed\npoetry env remove python\npoetry install\n</code></pre>"},{"location":"CLAUDE/#enterprise-security-issues","title":"Enterprise Security Issues","text":"<pre><code># Python 3.13 + pydantic &gt;=2.7.0 Compatible Security Audit\npoetry install --with security\npoetry run pip-audit --format=json --output=audit-issues.json\npoetry run pip-audit  # Human-readable output\n\n# Emergency security update process (Enterprise-grade)\npoetry add \"package_name&gt;=fixed.version,&lt;next.major.0\"  # Security fix with stability\npoetry lock  # Update lock file\npoetry install\npoetry run pip-audit  # Verify no vulnerabilities remain\n\n# Check for specific CVE\npoetry run pip-audit | grep -i \"CVE-XXXX-XXXX\"\npoetry show package_name  # Check installed version\n\n# Python 3.13 Compatibility Issues Resolution\n# If asyncpg compilation fails\npoetry add \"asyncpg&gt;=0.30.0,&lt;0.31.0\"  # Python 3.13 compatible version\npoetry lock\npoetry install\n\n# If pydantic dependency conflicts occur\npoetry add \"pydantic&gt;=2.9.0,&lt;2.12.0\"  # Enterprise compatible range\npoetry add \"pydantic-settings&gt;=2.9.1,&lt;2.12.0\"  # Matching pydantic-settings\n\n# Generate comprehensive security compliance report\npoetry run pip-audit --format=json --output=compliance-report.json\npoetry run bandit -r . -f json -o security-static-analysis.json\necho \"Security audit complete. Reports: compliance-report.json, security-static-analysis.json\"\n\n# Tool compatibility verification\npoetry run python -c \"import asyncpg, pydantic, fastapi; print('\u2705 Core dependencies compatible')\"\npoetry run pip-audit --version\npoetry run bandit --version\n</code></pre>"},{"location":"CLAUDE/#python-313-specific-troubleshooting","title":"Python 3.13 Specific Troubleshooting","text":"<pre><code># Python 3.13 Compatibility Verification\npython --version  # Ensure Python 3.13.x\n\n# If C extension compilation fails (common with Python 3.13)\npoetry config installer.parallel false  # Disable parallel for troubleshooting\npoetry cache clear --all pypi\npoetry install --no-cache\n\n# asyncpg Python 3.13 Fix\npoetry add \"asyncpg&gt;=0.30.0,&lt;0.31.0\"\npoetry lock\npoetry install\n\n# pydantic 2.x Enterprise Requirements\npoetry add \"pydantic&gt;=2.9.0,&lt;2.12.0\"  # Latest stable compatible with enterprise tools\npoetry run python -c \"import pydantic; print(f'pydantic {pydantic.__version__} ready')\"\n\n# Security tools compatibility check\npoetry install --with security\npoetry run pip-audit --version  # Should show 2.9.0+\npoetry run bandit --version     # Should show 1.8.5+\n\n# If wheel building fails\npip install --upgrade pip setuptools wheel\npoetry install --no-cache\n</code></pre>"},{"location":"CLAUDE/#migration-notes","title":"Migration Notes","text":"<ul> <li>From Poetry 1.x: All configurations have been updated to Poetry 2.x standards</li> <li>PEP 621 Adoption: Dependencies are now managed in <code>[project]</code> section</li> <li>Dependency Groups: Use <code>--with</code> and <code>--only</code> flags for targeted installations</li> <li>Performance: Parallel installation is enabled by default in CI/CD and Docker</li> </ul>"},{"location":"CLAUDE/#key-configuration-files","title":"Key Configuration Files","text":"<ul> <li><code>pyproject.toml</code>: PEP 621 compliant project configuration with Poetry 2.x features</li> <li><code>libkoiki/pyproject.toml</code>: Framework library configuration optimized for Poetry 2.x</li> <li><code>.github/workflows/ci.yml</code>: CI/CD pipeline with Poetry 2.x optimizations</li> <li><code>Dockerfile</code>: Container build optimized for Poetry 2.x parallel installation</li> </ul>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/","title":"\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_2","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30dd\u30ea\u30b7\u30fc","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#1-production","title":"1. \u672c\u756a\u74b0\u5883\uff08Production\uff09","text":"<ul> <li>\u56fa\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3: \u5b8c\u5168\u306b\u56fa\u5b9a\u3055\u308c\u305f\u5177\u4f53\u7684\u30d0\u30fc\u30b8\u30e7\u30f3</li> <li>\u4f8b: <code>fastapi==0.104.1</code></li> <li>\u7406\u7531: 100%\u306e\u518d\u73fe\u6027\u3001\u4e88\u671f\u3057\u306a\u3044\u5909\u66f4\u306e\u56de\u907f</li> </ul>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#2-development","title":"2. \u958b\u767a\u74b0\u5883\uff08Development\uff09","text":"<ul> <li>\u30de\u30a4\u30ca\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u56fa\u5b9a: \u30d1\u30c3\u30c1\u30ec\u30d9\u30eb\u306e\u307f\u8a31\u53ef</li> <li>\u4f8b: <code>fastapi&gt;=0.104.1,&lt;0.105.0</code></li> <li>\u7406\u7531: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30c3\u30c1\u9069\u7528\u3001\u6a5f\u80fd\u5909\u66f4\u30ea\u30b9\u30af\u6700\u5c0f\u5316</li> </ul>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#3-testing","title":"3. \u30c6\u30b9\u30c8\u74b0\u5883\uff08Testing\uff09","text":"<ul> <li>\u30d1\u30c3\u30c1\u30ec\u30d9\u30eb\u7bc4\u56f2: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u306e\u307f\u8a31\u53ef</li> <li>\u4f8b: <code>fastapi&gt;=0.104.1,&lt;0.104.10</code></li> <li>\u7406\u7531: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u5fdc\u3068\u30c6\u30b9\u30c8\u5b89\u5b9a\u6027\u306e\u4e21\u7acb</li> </ul>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_3","title":"\u63a8\u5968\u30d0\u30fc\u30b8\u30e7\u30f3\u7bc4\u56f2\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_4","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u91cd\u8996\uff08\u63a8\u5968\uff09","text":"<pre><code>dependencies = [\n    \"fastapi==0.104.1\",                    # \u5b8c\u5168\u56fa\u5b9a\n    \"uvicorn==0.24.0\",                     # \u5b8c\u5168\u56fa\u5b9a\n    \"sqlalchemy[asyncio]==2.0.23\",        # \u5b8c\u5168\u56fa\u5b9a\n    \"asyncpg==0.29.0\",                     # \u5b8c\u5168\u56fa\u5b9a\n    \"alembic==1.12.1\",                     # \u5b8c\u5168\u56fa\u5b9a\n    \"pydantic==2.5.0\",                     # \u5b8c\u5168\u56fa\u5b9a\n    \"pydantic-settings==2.9.1\",           # \u5b8c\u5168\u56fa\u5b9a\n]\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_5","title":"\u30d0\u30e9\u30f3\u30b9\u578b\uff08\u4e2d\u9593\uff09","text":"<pre><code>dependencies = [\n    \"fastapi&gt;=0.104.1,&lt;0.105.0\",          # \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\n    \"uvicorn&gt;=0.24.0,&lt;0.25.0\",            # \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\n    \"sqlalchemy[asyncio]&gt;=2.0.23,&lt;2.1.0\", # \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\n    \"asyncpg&gt;=0.29.0,&lt;0.30.0\",            # \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\n    \"alembic&gt;=1.12.1,&lt;1.13.0\",            # \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\n]\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_6","title":"\u958b\u767a\u67d4\u8edf\u578b\uff08\u975e\u63a8\u5968\uff09","text":"<pre><code>dependencies = [\n    \"fastapi&gt;=0.104.1,&lt;1.0.0\",            # \u73fe\u5728\u306e\u8a2d\u5b9a\n    \"uvicorn&gt;=0.24.0,&lt;1.0.0\",             # \u30ea\u30b9\u30af\u9ad8\n]\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_7","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u30d7\u30ed\u30bb\u30b9","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#1","title":"1. \u5b9a\u671f\u7684\u306a\u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3","text":"<pre><code># Poetry audit plugin\npoetry self add poetry-audit-plugin\npoetry audit\n\n# Safety \u306b\u3088\u308b\u8106\u5f31\u6027\u30c1\u30a7\u30c3\u30af\npoetry add --group dev safety\npoetry run safety check\n\n# pip-audit \u306b\u3088\u308b\u8a73\u7d30\u30c1\u30a7\u30c3\u30af\npoetry add --group dev pip-audit\npoetry run pip-audit\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#2","title":"2. \u4f9d\u5b58\u6027\u66f4\u65b0\u6226\u7565","text":"<pre><code># 1. \u73fe\u5728\u306e\u4f9d\u5b58\u6027\u78ba\u8a8d\npoetry show --outdated\n\n# 2. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u512a\u5148\npoetry update --dry-run\n\n# 3. \u6bb5\u968e\u7684\u66f4\u65b0\uff08\u672c\u756a\u524d\u306b\u30c6\u30b9\u30c8\u74b0\u5883\u3067\u691c\u8a3c\uff09\npoetry add \"fastapi==0.104.2\"  # \u7279\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u66f4\u65b0\npoetry lock\npoetry install\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#3","title":"3. \u7d99\u7d9a\u7684\u76e3\u8996","text":"<ul> <li>\u6708\u6b21: \u4f9d\u5b58\u6027\u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3</li> <li>\u9031\u6b21: \u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u53ef\u80fd\u30d1\u30c3\u30b1\u30fc\u30b8\u78ba\u8a8d</li> <li>\u5373\u5ea7: Critical CVE \u5bfe\u5fdc</li> </ul>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_8","title":"\u904b\u7528\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_9","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u66f4\u65b0\u30d7\u30ed\u30bb\u30b9","text":"<ol> <li>\u8106\u5f31\u6027\u767a\u898b \u2192 CVE\u756a\u53f7\u78ba\u8a8d</li> <li>\u5f71\u97ff\u8a55\u4fa1 \u2192 \u8a72\u5f53\u30d0\u30fc\u30b8\u30e7\u30f3\u7bc4\u56f2\u78ba\u8a8d</li> <li>\u30c6\u30b9\u30c8\u74b0\u5883\u66f4\u65b0 \u2192 \u52d5\u4f5c\u78ba\u8a8d</li> <li>\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u74b0\u5883\u66f4\u65b0 \u2192 \u7d71\u5408\u30c6\u30b9\u30c8</li> <li>\u672c\u756a\u74b0\u5883\u66f4\u65b0 \u2192 \u6bb5\u968e\u7684\u30c7\u30d7\u30ed\u30a4</li> </ol>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_10","title":"\u7dca\u6025\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u5fdc","text":"<pre><code># \u7dca\u6025\u30d1\u30c3\u30c1\u9069\u7528\u4f8b\npoetry add \"fastapi==0.104.2\"  # \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u7248\npoetry lock --no-update         # \u4ed6\u4f9d\u5b58\u6027\u306f\u56fa\u5b9a\ndocker-compose build --no-cache\n</code></pre>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_11","title":"\u30ea\u30b9\u30af\u8a55\u4fa1\u30de\u30c8\u30ea\u30c3\u30af\u30b9","text":"\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u65b9\u6cd5 \u518d\u73fe\u6027 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3 \u4fdd\u5b88\u6027 \u63a8\u5968\u5ea6 \u5b8c\u5168\u56fa\u5b9a (==) \u2605\u2605\u2605 \u2605\u2605\u2606 \u2605\u2606\u2606 \u2605\u2605\u2605 \u30de\u30a4\u30ca\u30fc\u56fa\u5b9a (~=) \u2605\u2605\u2606 \u2605\u2605\u2605 \u2605\u2605\u2606 \u2605\u2605\u2605 \u7bc4\u56f2\u6307\u5b9a (&gt;=,&lt;) \u2605\u2606\u2606 \u2605\u2606\u2606 \u2605\u2605\u2605 \u2605\u2606\u2606"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_12","title":"\u5b9f\u88c5\u63a8\u5968\u6848","text":"<p>\u4f01\u696d\u74b0\u5883\u3067\u306f\u300c\u5b8c\u5168\u56fa\u5b9a\u300d\u307e\u305f\u306f\u300c\u30de\u30a4\u30ca\u30fc\u56fa\u5b9a\u300d\u3092\u5f37\u304f\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#2025-06-21","title":"\u5b9f\u88c5\u7d50\u679c\u5831\u544a (2025-06-21)","text":""},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_13","title":"\u6210\u529f\u4e8b\u4f8b: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u512a\u5148\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u5b9f\u8df5","text":"<p>\u5b9f\u65bd\u65b9\u91dd: \u958b\u767a\u671f\u9593\u4e2d\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u512a\u5148\u30a2\u30d7\u30ed\u30fc\u30c1</p> <p>\u80cc\u666f:  - pydantic &gt;=2.7.0 \u8981\u4ef6 - Python 3.13 \u4e92\u63db\u6027\u8981\u6c42 - \u65e2\u77e5\u306e\u8106\u5f31\u6027\u4fee\u6b63 (PYSEC-2024-38, PYSEC-2024-232/233, GHSA-f96h-pmfr-66vw)</p> <p>\u5b9f\u65bd\u3057\u305f\u66f4\u65b0\u6226\u7565:</p>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#phase-1-4","title":"Phase 1: \u4f4e\u30ea\u30b9\u30af (4\u30d1\u30c3\u30b1\u30fc\u30b8)","text":"<pre><code># \u5b9f\u88c5\u4f8b - \u5b89\u5168\u306a\u66f4\u65b0\n\"email-validator&gt;=2.2.0,&lt;2.3.0\"     # 2.1.2 \u2192 2.2.0\n\"pytest-cov&gt;=6.2.1,&lt;6.3.0\"         # 6.1.1 \u2192 6.2.1\n</code></pre> <p>\u7d50\u679c: \u2705 \u554f\u984c\u306a\u3057\u3001\u5373\u5ea7\u5b9f\u65bd\u53ef\u80fd</p>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#phase-2-6","title":"Phase 2: \u4e2d\u30ea\u30b9\u30af (6\u30d1\u30c3\u30b1\u30fc\u30b8)","text":"<pre><code># \u5b9f\u88c5\u4f8b - \u614e\u91cd\u306a\u6bb5\u968e\u7684\u66f4\u65b0\n\"pydantic&gt;=2.11.7,&lt;2.12.0\"         # 2.9.2 \u2192 2.11.7\n\"httpx&gt;=0.28.1,&lt;0.29.0\"            # 0.25.2 \u2192 0.28.1\n\"structlog&gt;=25.4.0,&lt;25.5.0\"        # 23.2.0 \u2192 25.4.0\n\"alembic&gt;=1.16.2,&lt;1.17.0\"          # 1.12.1 \u2192 1.16.2\n</code></pre> <p>\u7d50\u679c: \u2705 \u5168\u30c6\u30b9\u30c8\u901a\u904e\u30011\u30d1\u30c3\u30b1\u30fc\u30b8\u305a\u3064\u6bb5\u968e\u5b9f\u65bd</p>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#phase-3-5","title":"Phase 3: \u9ad8\u30ea\u30b9\u30af (5\u30d1\u30c3\u30b1\u30fc\u30b8)","text":"<pre><code># \u5b9f\u88c5\u4f8b - \u8a73\u7d30\u691c\u8a3c\u5f8c\u306e\u5927\u5e45\u66f4\u65b0\n\"uvicorn&gt;=0.34.3,&lt;0.35.0\"          # 0.24.0 \u2192 0.34.3 (\u30e1\u30b8\u30e3\u30fc\u6539\u5584)\n\"pytest&gt;=8.4.1,&lt;8.5.0\"             # 7.4.4 \u2192 8.4.1 (\u30e1\u30b8\u30e3\u30fc\u30a2\u30c3\u30d7)\n\"redis&gt;=6.2.0,&lt;6.3.0\"              # 5.0.8 \u2192 6.2.0 (\u30e1\u30b8\u30e3\u30fc\u30a2\u30c3\u30d7)\n</code></pre> <p>\u7d50\u679c: \u2705 \u7834\u58ca\u7684\u5909\u66f4\u306a\u3057\u3001\u5927\u5e45\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a</p>"},{"location":"ENTERPRISE_DEPENDENCY_STRATEGY/#_14","title":"\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8","text":"<p>\u6210\u529f\u8981\u56e0: 1. \u958b\u767a\u671f\u9593\u6d3b\u7528: \u672c\u756a\u5f71\u97ff\u306e\u306a\u3044\u671f\u9593\u3067\u306e\u7a4d\u6975\u7684\u66f4\u65b0 2. \u6bb5\u968e\u7684\u5b9f\u65bd: \u30ea\u30b9\u30af\u30ec\u30d9\u30eb\u5225\u306e\u9806\u6b21\u66f4\u65b0 3. \u5305\u62ec\u7684\u30c6\u30b9\u30c8: \u5404\u6bb5\u968e\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d 4. \u30b3\u30f3\u30c6\u30ca\u691c\u8a3c: \u672c\u756a\u74b0\u5883\u540c\u7b49\u3067\u306e\u6700\u7d42\u78ba\u8a8d</p> <p>\u4f01\u696d\u74b0\u5883\u3078\u306e\u63d0\u8a00: - \u958b\u767a\u671f\u9593 = \u30de\u30a4\u30ca\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u56fa\u5b9a\u306e\u7de9\u548c\u671f\u9593\u3068\u3057\u3066\u6d3b\u7528 - \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63 &gt; \u30d0\u30fc\u30b8\u30e7\u30f3\u5b89\u5b9a\u6027 (\u958b\u767a\u671f\u9593\u9650\u5b9a) - \u6bb5\u968e\u7684\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3088\u308b\u30ea\u30b9\u30af\u6700\u5c0f\u5316 - \u5305\u62ec\u7684\u306a\u81ea\u52d5\u30c6\u30b9\u30c8\u306b\u3088\u308b\u54c1\u8cea\u4fdd\u8a3c</p> <p>\u6700\u7d42\u7d50\u679c:  - \u2705 \u8106\u5f31\u6027\u30bc\u30ed\u9054\u6210 - \u2705 Python 3.13 \u5b8c\u5168\u5bfe\u5fdc - \u2705 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5927\u5e45\u5411\u4e0a - \u2705 \u672c\u756a\u30c7\u30d7\u30ed\u30a4\u6e96\u5099\u5b8c\u4e86</p>"},{"location":"KOIKI-FW_0.5.0/","title":"KOIKI-FW v0.5.0 \u6280\u8853\u4ed5\u69d8\u66f8","text":""},{"location":"KOIKI-FW_0.5.0/#_1","title":"\u6982\u8981","text":"<p>KOIKI-FW \u306f Python (FastAPI) \u3092\u7528\u3044\u305f\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u69cb\u7bc9\u306e\u305f\u3081\u306e\u5805\u7262\u306a\u57fa\u76e4\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u30d0\u30fc\u30b8\u30e7\u30f3 0.5.0 \u3067\u306f\u3001\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63\u3068\u5305\u62ec\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30e2\u30c0\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u3001Python 3.13 \u5bfe\u5fdc\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565\u306e\u5c0e\u5165\u306b\u7126\u70b9\u3092\u5f53\u3066\u305f\u8a2d\u8a08\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30d0\u30fc\u30b8\u30e7\u30f3 0.3.1 \u3067\u5c0e\u5165\u3055\u308c\u305f\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI) \u306b\u3088\u308b\u54c1\u8cea\u4fdd\u8a3c\u3068\u30c6\u30b9\u30c8\u81ea\u52d5\u5316\u306e\u5f37\u5316\u3082\u5f15\u304d\u7d9a\u304d\u8a2d\u8a08\u306e\u4e2d\u6838\u8981\u7d20\u3068\u3057\u3066\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u958b\u767a\u30d7\u30ed\u30bb\u30b9\u306e\u5b89\u5b9a\u6027\u3068\u52b9\u7387\u6027\u3092\u7d99\u7d9a\u7684\u306b\u652f\u63f4\u3057\u307e\u3059\u3002</p>"},{"location":"KOIKI-FW_0.5.0/#v050","title":"v0.5.0 \u4e3b\u8981\u5909\u66f4\u70b9","text":""},{"location":"KOIKI-FW_0.5.0/#_2","title":"\ud83d\udea8 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8","text":"<ul> <li>fastapi: 0.104.1 \u2192 0.115.13 (\u4fee\u6b63: PYSEC-2024-38)</li> <li>python-jose: 3.3.0 \u2192 3.5.0 (\u4fee\u6b63: PYSEC-2024-232, PYSEC-2024-233)</li> <li>starlette: 0.27.0 \u2192 0.46.2 (\u4fee\u6b63: GHSA-f96h-pmfr-66vw)</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_3","title":"\ud83d\udd27 \u4f9d\u5b58\u95a2\u4fc2\u30e2\u30c0\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3","text":"<ul> <li>Python 3.13 \u5bfe\u5fdc: asyncpg 0.29.0 \u2192 0.30.0 \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30b5\u30dd\u30fc\u30c8\u5f37\u5316</li> <li>Enterprise Requirements: pydantic 2.9.2 \u2192 2.11.7 (&gt;=2.7.0 \u8981\u4ef6\u5bfe\u5fdc)</li> <li>Phase 1-3 Updates: \u4f4e\u30ea\u30b9\u30af\u304b\u3089\u9ad8\u30ea\u30b9\u30af\u307e\u3067\u6bb5\u968e\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u66f4\u65b0</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#poetry-2x-pep-621","title":"\ud83d\udce6 Poetry 2.x &amp; PEP 621 \u5bfe\u5fdc","text":"<ul> <li>PEP 621 \u6e96\u62e0: \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u4f9d\u5b58\u95a2\u4fc2\u306e\u6a19\u6e96\u5316</li> <li>\u4f9d\u5b58\u95a2\u4fc2\u30b0\u30eb\u30fc\u30d7: \u958b\u767a\u3001\u30c6\u30b9\u30c8\u3001\u672c\u756a\u4f9d\u5b58\u95a2\u4fc2\u306e\u660e\u78ba\u306a\u5206\u96e2</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316: \u4e26\u5217\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u62e1\u5f35\u30ad\u30e3\u30c3\u30b7\u30e5\u7ba1\u7406</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_4","title":"\ud83d\udd10 \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6226\u7565","text":"<ul> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u512a\u5148\u30a2\u30d7\u30ed\u30fc\u30c1: \u958b\u767a\u671f\u9593\u4e2d\u306e\u7a4d\u6975\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u66f4\u65b0</li> <li>\u76e3\u67fb\u30c4\u30fc\u30eb: pip-audit, bandit \u306b\u3088\u308b\u7d99\u7d9a\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb</li> <li>\u30bc\u30ed\u8106\u5f31\u6027: \u65e2\u77e5\u306e\u8106\u5f31\u6027\u5b8c\u5168\u89e3\u6c7a</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_5","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<p>KOIKI-FW \u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u968e\u5c64\u578b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059:</p> <ol> <li>API \u30ec\u30a4\u30e4\u30fc (<code>api/</code>): \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\u3001\u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u51e6\u7406\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>\u30b5\u30fc\u30d3\u30b9\u30ec\u30a4\u30e4\u30fc (<code>services/</code>): \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406</li> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u30ec\u30a4\u30e4\u30fc (<code>repositories/</code>): \u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u3068\u6c38\u7d9a\u5316</li> <li>\u30e2\u30c7\u30eb\u30ec\u30a4\u30e4\u30fc (<code>models/</code>): \u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u3068\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7</li> <li>\u30b9\u30ad\u30fc\u30de\u30ec\u30a4\u30e4\u30fc (<code>schemas/</code>): Pydantic \u30e2\u30c7\u30eb\u3001\u30c7\u30fc\u30bf\u691c\u8a3c</li> </ol> <p>\u5404\u30ec\u30a4\u30e4\u30fc\u306f\u660e\u78ba\u306b\u5206\u96e2\u3055\u308c\u3001\u4f9d\u5b58\u6027\u306f\u4e0a\u4f4d\u30ec\u30a4\u30e4\u30fc\u304b\u3089\u4e0b\u4f4d\u30ec\u30a4\u30e4\u30fc\u3078\u306e\u4e00\u65b9\u5411\u306e\u307f\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"KOIKI-FW_0.5.0/#_6","title":"\u4e3b\u8981\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8","text":""},{"location":"KOIKI-FW_0.5.0/#_7","title":"\u30b3\u30a2\u6a5f\u80fd","text":"<ul> <li>\u8a2d\u5b9a\u7ba1\u7406 (<code>core/config.py</code>): \u74b0\u5883\u5909\u6570\u30d9\u30fc\u30b9\u306e\u8a2d\u5b9a\u7ba1\u7406</li> <li>\u30ed\u30ae\u30f3\u30b0 (<code>core/logging.py</code>): structlog \u306b\u3088\u308b\u69cb\u9020\u5316\u30ed\u30ae\u30f3\u30b0 (v25.4.0)</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406 (<code>core/error_handlers.py</code>): \u4e00\u8cab\u3057\u305f\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3 (<code>core/security.py</code>): JWT\u8a8d\u8a3c\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30cf\u30c3\u30b7\u30e5\u5316</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406 (<code>core/transaction.py</code>): \u975e\u540c\u671f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30c7\u30b3\u30ec\u30fc\u30bf</li> <li>\u30df\u30c9\u30eb\u30a6\u30a7\u30a2 (<code>core/middleware.py</code>): \u76e3\u67fb\u30ed\u30b0\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\u30fc\u7b49</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_8","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9","text":"<ul> <li>\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406 (<code>db/session.py</code>): \u975e\u540c\u671fDB\u30bb\u30c3\u30b7\u30e7\u30f3 (asyncpg 0.30.0)</li> <li>\u57fa\u5e95\u30e2\u30c7\u30eb (<code>db/base.py</code>): SQLAlchemy 2.0+ \u30e2\u30c7\u30eb\u306e\u5171\u901a\u6a5f\u80fd</li> <li>\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3: Alembic 1.16.2 \u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5909\u66f4\u7ba1\u7406</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_9","title":"\u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<ul> <li>\u30d1\u30d6\u30ea\u30c3\u30b7\u30e3\u30fc (<code>events/publisher.py</code>): \u30a4\u30d9\u30f3\u30c8\u767a\u884c\u6a5f\u80fd</li> <li>\u30cf\u30f3\u30c9\u30e9\u30fc (<code>events/handlers.py</code>): \u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u30ed\u30b8\u30c3\u30af</li> <li>Redis\u7d71\u5408: Redis 6.2.0 \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u3068\u30ad\u30e3\u30c3\u30b7\u30e5</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_10","title":"\u975e\u540c\u671f\u30bf\u30b9\u30af","text":"<ul> <li>Celery\u7d71\u5408 (<code>tasks/celery_app.py</code>): \u975e\u540c\u671f\u30bf\u30b9\u30af\u51e6\u7406</li> <li>\u30e1\u30fc\u30eb\u9001\u4fe1 (<code>tasks/email.py</code>): \u30e1\u30fc\u30eb\u9001\u4fe1\u30bf\u30b9\u30af</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_11","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd","text":""},{"location":"KOIKI-FW_0.5.0/#_12","title":"\u8a8d\u8a3c\u30fb\u8a8d\u53ef","text":"<ul> <li>JWT \u30d9\u30fc\u30b9\u306e\u8a8d\u8a3c (python-jose 3.5.0)</li> <li>RBAC (\u30ed\u30fc\u30eb\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u5236\u5fa1)</li> <li>\u30d1\u30b9\u30ef\u30fc\u30c9\u8907\u96d1\u6027\u30c1\u30a7\u30c3\u30af</li> <li>\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8 (slowapi 0.1.8+)</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\u30fc (HSTS, CSP, etc.)</li> <li>\u76e3\u67fb\u30ed\u30b0\u8a18\u9332</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_13","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb","text":"<ul> <li>pip-audit 2.9.0: OSV \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u3088\u308b\u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3</li> <li>bandit 1.8.5: \u9759\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u89e3\u6790</li> <li>\u7d99\u7d9a\u7684\u76e3\u67fb: CI/CD \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u306e\u81ea\u52d5\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_14","title":"\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u904b\u7528","text":"<ul> <li>Prometheus \u30e1\u30c8\u30ea\u30af\u30b9 (prometheus-fastapi-instrumentator 7.1.0)</li> <li>\u69cb\u9020\u5316\u30ed\u30b0\u51fa\u529b (structlog 25.4.0)</li> <li>\u30ea\u30af\u30a8\u30b9\u30c8 ID \u8ffd\u8de1</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6e2c\u5b9a</li> <li>HTTP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u76e3\u8996 (httpx 0.28.1)</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#todo","title":"ToDo \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<p>\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u7528\u4f8b\u3068\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306a ToDo \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u304c\u542b\u307e\u308c\u307e\u3059:</p> <ul> <li>\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u3068\u30ed\u30b0\u30a4\u30f3</li> <li>ToDo \u30a2\u30a4\u30c6\u30e0\u306e\u4f5c\u6210\u3001\u8aad\u53d6\u3001\u66f4\u65b0\u3001\u524a\u9664 (CRUD)</li> <li>\u6240\u6709\u8005\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u5236\u5fa1</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_15","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210","text":"<p>\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f <code>libkoiki</code> \u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f <code>app</code> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u306e\u5206\u96e2\u306b\u3088\u308a:</p> <ol> <li>\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u6a5f\u80fd\u3092\u518d\u5229\u7528\u53ef\u80fd\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u6271\u3048\u308b</li> <li>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b3\u30fc\u30c9\u3068\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30b3\u30fc\u30c9\u3092\u660e\u78ba\u306b\u5206\u96e2\u3067\u304d\u308b</li> <li>\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u500b\u5225\u306b\u66f4\u65b0\u30fb\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3067\u304d\u308b</li> </ol>"},{"location":"KOIKI-FW_0.5.0/#poetry-2x-pep-621_1","title":"Poetry 2.x &amp; PEP 621 \u6700\u9069\u5316","text":"<ul> <li>PEP 621 \u30e1\u30bf\u30c7\u30fc\u30bf: <code>[project]</code> \u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306e\u6a19\u6e96\u5316\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406</li> <li>\u4f9d\u5b58\u95a2\u4fc2\u30b0\u30eb\u30fc\u30d7: <code>--with dev,test,security</code> \u306b\u3088\u308b\u67d4\u8edf\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>\u4e26\u5217\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: <code>installer.parallel = true</code> \u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a</li> <li>\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0: poetry-core &gt;=1.5.0 \u3067\u6700\u65b0\u6a5f\u80fd\u5bfe\u5fdc</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#ci","title":"\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI)","text":"<p>KOIKI-FW \u3067\u306f\u3001GitHub Actions \u3092\u6d3b\u7528\u3057\u305f\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI) \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3068\u5b89\u5b9a\u6027\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"KOIKI-FW_0.5.0/#ci_1","title":"CI \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u6210","text":"<p>CI \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f <code>.github/workflows/ci.yml</code> \u3067\u5b9a\u7fa9\u3055\u308c\u3001\u4ee5\u4e0b\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>\u30d7\u30c3\u30b7\u30e5\u30a4\u30d9\u30f3\u30c8: <code>master</code>, <code>develop</code>, <code>dev/*</code>, <code>feature/*</code>, <code>bugfix/*</code> \u30d6\u30e9\u30f3\u30c1\u3078\u306e\u30d7\u30c3\u30b7\u30e5</li> <li>\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: <code>master</code>, <code>develop</code> \u30d6\u30e9\u30f3\u30c1\u3078\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_16","title":"\u5b9f\u884c\u74b0\u5883","text":"<ul> <li>\u30e9\u30f3\u30ca\u30fc: Ubuntu \u6700\u65b0\u7248</li> <li>\u30b5\u30fc\u30d3\u30b9: PostgreSQL 15\uff08\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09</li> <li>Python \u30d0\u30fc\u30b8\u30e7\u30f3: 3.11.7+ (Python 3.13 \u5bfe\u5fdc)</li> <li>Poetry: 2.x \u6700\u9069\u5316</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#ci_2","title":"CI \u30d7\u30ed\u30bb\u30b9\u306e\u4e3b\u8981\u30b9\u30c6\u30c3\u30d7","text":"<ol> <li>\u30b3\u30fc\u30c9\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8: \u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30b3\u30fc\u30c9\u3092\u53d6\u5f97</li> <li>Python \u74b0\u5883\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7: \u6307\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Python \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>Poetry \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: Poetry 2.x \u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7</li> <li>\u30d1\u30c3\u30b1\u30fc\u30b8\u6574\u5408\u6027\u691c\u8a3c: <code>pyproject.toml</code> \u3068 <code>poetry.lock</code> \u306e\u6574\u5408\u6027\u3092\u78ba\u8a8d</li> <li>\u4f9d\u5b58\u95a2\u4fc2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: Poetry 2.x \u4e26\u5217\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u9ad8\u901f\u5316</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb: pip-audit, bandit \u306b\u3088\u308b\u81ea\u52d5\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af</li> <li>\u30c6\u30b9\u30c8\u5b9f\u884c: Pytest \u306b\u3088\u308b\u30c6\u30b9\u30c8\u5b9f\u884c\u3068\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u751f\u6210</li> <li>\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u4fdd\u5b58: HTML\u5f62\u5f0f\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u3092\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u3068\u3057\u3066\u4fdd\u5b58</li> </ol>"},{"location":"KOIKI-FW_0.5.0/#ci_3","title":"CI \u74b0\u5883\u306e\u8a2d\u5b9a","text":"<p>\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u74b0\u5883\u5909\u6570\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li><code>DATABASE_URL</code>: \u30c6\u30b9\u30c8\u7528 PostgreSQL \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u6587\u5b57\u5217</li> <li><code>ENV_FILE</code>: CI \u74b0\u5883\u7528\u306e\u74b0\u5883\u5909\u6570\u30d5\u30a1\u30a4\u30eb (<code>.env.ci</code>)</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#ci_4","title":"CI \u306e\u5229\u70b9","text":"<ul> <li>\u65e9\u671f\u554f\u984c\u691c\u51fa: \u30b3\u30fc\u30c9\u306e\u554f\u984c\u3092\u65e9\u671f\u306b\u767a\u898b\u3057\u3001\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd</li> <li>\u54c1\u8cea\u4fdd\u8a3c: \u81ea\u52d5\u30c6\u30b9\u30c8\u306b\u3088\u308a\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u7d99\u7d9a\u7684\u306b\u691c\u8a3c</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b2\u30fc\u30c8: \u8106\u5f31\u6027\u691c\u51fa\u6642\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u963b\u6b62</li> <li>\u958b\u767a\u52b9\u7387\u5411\u4e0a: \u624b\u52d5\u30c6\u30b9\u30c8\u306e\u8ca0\u62c5\u3092\u8efd\u6e1b\u3057\u3001\u958b\u767a\u8005\u306e\u751f\u7523\u6027\u3092\u5411\u4e0a</li> <li>\u5b89\u5b9a\u6027\u78ba\u4fdd: \u30de\u30b9\u30bf\u30fc\u30d6\u30e9\u30f3\u30c1\u306e\u30b3\u30fc\u30c9\u5b89\u5b9a\u6027\u3092\u7dad\u6301</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_17","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u5c65\u6b74","text":""},{"location":"KOIKI-FW_0.5.0/#v050-2025-06-21","title":"v0.5.0 (2025-06-21)","text":"<ul> <li>\u91cd\u8981\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63: fastapi, python-jose, starlette \u306e\u8106\u5f31\u6027\u89e3\u6c7a</li> <li>\u5305\u62ec\u7684\u4f9d\u5b58\u95a2\u4fc2\u30e2\u30c0\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3: 51\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u6700\u65b0\u5316</li> <li>Python 3.13 \u5bfe\u5fdc: asyncpg, pydantic\u7b49\u306e\u4e92\u63db\u6027\u78ba\u4fdd</li> <li>Poetry 2.x &amp; PEP 621 \u5bfe\u5fdc: \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u5f37\u5316: pip-audit, bandit \u306b\u3088\u308b\u7d99\u7d9a\u7684\u76e3\u67fb</li> <li>\u30bc\u30ed\u8106\u5f31\u6027\u9054\u6210: \u65e2\u77e5\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u5b8c\u5168\u89e3\u6c7a</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#v031","title":"v0.3.1","text":"<ul> <li>GitHub Actions \u306b\u3088\u308b\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI) \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9f\u88c5</li> <li>\u30c6\u30b9\u30c8\u81ea\u52d5\u5316\u3068\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u751f\u6210\u306e\u5c0e\u5165</li> <li>Poetry \u306b\u3088\u308b\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u306e\u5f37\u5316</li> <li>CI \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6574\u5099</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#v030","title":"v0.3.0","text":"<ul> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u306e\u6539\u5584\uff08libkoiki \u30d1\u30c3\u30b1\u30fc\u30b8\u5316\uff09</li> <li>\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u306e\u6700\u9069\u5316</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u30d1\u30b9\u306e\u6a19\u6e96\u5316</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6574\u5099</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#v020","title":"v0.2.0","text":"<ul> <li>ToDo \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8ffd\u52a0</li> <li>RBAC \u5b9f\u88c5\u306e\u5f37\u5316</li> <li>\u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0\u306e\u6539\u5584</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306e\u6700\u9069\u5316</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#v010","title":"v0.1.0","text":"<ul> <li>\u521d\u671f\u30ea\u30ea\u30fc\u30b9</li> <li>\u57fa\u672c\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u69cb\u9020</li> <li>\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0</li> <li>\u975e\u540c\u671f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9</li> </ul>"},{"location":"KOIKI-FW_0.5.0/#_18","title":"\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565","text":""},{"location":"KOIKI-FW_0.5.0/#_19","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u512a\u5148\u30a2\u30d7\u30ed\u30fc\u30c1","text":"<ol> <li>\u5373\u5ea7\u306e\u8106\u5f31\u6027\u5bfe\u5fdc: \u958b\u767a\u671f\u9593\u4e2d\u306e\u7a4d\u6975\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u66f4\u65b0</li> <li>\u5f71\u97ff\u7bc4\u56f2\u5206\u6790: \u4f9d\u5b58\u95a2\u4fc2\u6570\u3068\u5f71\u97ff\u7bc4\u56f2\u306b\u57fa\u3065\u304f\u66f4\u65b0\u5224\u65ad</li> <li>\u4f01\u696d\u8981\u4ef6\u9075\u5b88: pydantic &gt;=2.7.0 \u7b49\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u8981\u4ef6\u7dad\u6301</li> <li>\u6bb5\u968e\u7684\u66f4\u65b0: Phase 1-3 \u3067\u30ea\u30b9\u30af\u30ec\u30d9\u30eb\u5225\u306e\u8a08\u753b\u7684\u66f4\u65b0</li> </ol>"},{"location":"KOIKI-FW_0.5.0/#_20","title":"\u76e3\u67fb\u30fb\u54c1\u8cea\u4fdd\u8a3c","text":"<ul> <li>\u7d99\u7d9a\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb: \u65e5\u6b21 pip-audit \u30b9\u30ad\u30e3\u30f3</li> <li>\u9759\u7684\u89e3\u6790: bandit \u306b\u3088\u308b\u9ad8\u6df1\u523b\u5ea6\u554f\u984c\u691c\u51fa</li> <li>\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30b2\u30fc\u30c8: \u8106\u5f31\u6027\u691c\u51fa\u6642\u306e\u672c\u756a\u30ea\u30ea\u30fc\u30b9\u963b\u6b62</li> <li>\u30b3\u30f3\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9: JSON \u30ec\u30dd\u30fc\u30c8\u751f\u6210\u306b\u3088\u308b\u76e3\u67fb\u8a3c\u8de1\u78ba\u4fdd</li> </ul>"},{"location":"README-deploy/","title":"KOIKI-FW \u30b3\u30f3\u30c6\u30ca\u914d\u5099\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001KOIKI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306b\u3088\u308b\u5404\u7a2e\u914d\u5099\u30b7\u30ca\u30ea\u30aa\u3068\u5fc5\u8981\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002<code>docker-entrypoint.sh</code>\u306e\u81ea\u52d5\u5b9f\u884c\u6a5f\u80fd\u3092\u8003\u616e\u3057\u305f\u6700\u9069\u306a\u624b\u9806\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u66f4\u65b0: Poetry 2.x\u79fb\u884c\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u5b8c\u4e86\uff082025-06-21\uff09</p>"},{"location":"README-deploy/#1","title":"1. \u521d\u56de\u74b0\u5883\u69cb\u7bc9\u6642","text":"<pre><code># \u74b0\u5883\u5909\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\ncp .env.example .env\n# \u5fc5\u8981\u306b\u5fdc\u3058\u3066.env\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\n\n# \u30b3\u30f3\u30c6\u30ca\u306e\u30d3\u30eb\u30c9\u3068\u8d77\u52d5\ndocker-compose up --build -d\n# \u3053\u306e\u904e\u7a0b\u3067\u4ee5\u4e0b\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059:\n# - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u306e\u78ba\u8a8d\uff08\u6700\u592730\u56de\u30ea\u30c8\u30e9\u30a4\uff09\n# - alembic/versions\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u78ba\u8a8d\u3068\u4f5c\u6210\n# - \u521d\u671f\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\uff08\u307e\u305f\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u81ea\u52d5\u751f\u6210\uff09\n\n# \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u30ed\u30b0\u306e\u78ba\u8a8d\ndocker-compose logs -f app\n</code></pre>"},{"location":"README-deploy/#2","title":"2. \u65e5\u5e38\u306e\u958b\u767a\u4f5c\u696d","text":"<pre><code># \u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\uff08\u65e2\u306b\u30d3\u30eb\u30c9\u6e08\u307f\u306e\u5834\u5408\uff09\ndocker-compose up -d\n# entrypoint.sh\u306b\u3088\u308a\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u81ea\u52d5\u5b9f\u884c\u3055\u308c\u307e\u3059\n\n# \u30b3\u30f3\u30c6\u30ca\u505c\u6b62\ndocker-compose down\n\n# \u30ed\u30b0\u78ba\u8a8d\ndocker-compose logs -f app\n</code></pre>"},{"location":"README-deploy/#3","title":"3. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u4fee\u6b63\u5f8c","text":"<pre><code># \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u306e\u307f\u306e\u5834\u5408\n# \uff08\u591a\u304f\u306e\u30b3\u30fc\u30c9\u306f\u30dc\u30ea\u30e5\u30fc\u30e0\u30de\u30a6\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u5909\u66f4\u304c\u5373\u6642\u53cd\u6620\uff09\n# \u7279\u5225\u306a\u64cd\u4f5c\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\n\n# \u4f9d\u5b58\u95a2\u4fc2\u3084Dockerfile\u5909\u66f4\u6642\u306f\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"README-deploy/#4","title":"4. \u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u5909\u66f4\u6642\uff08\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\uff09","text":"<pre><code># 1. \u30e2\u30c7\u30eb\u30b3\u30fc\u30c9\u3092\u5909\u66f4\n\n# 2. \u65b0\u3057\u3044\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\ndocker-compose exec app alembic revision --autogenerate -m \"\u5909\u66f4\u5185\u5bb9\u3092\u8aac\u660e\"\n\n# 3. \u30b3\u30f3\u30c6\u30ca\u518d\u8d77\u52d5\u3067\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u81ea\u52d5\u9069\u7528\ndocker-compose restart app\n\n# 4. \u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u9069\u7528\u78ba\u8a8d\ndocker-compose logs -f app\n</code></pre>"},{"location":"README-deploy/#5","title":"5. \u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u95a2\u9023\u64cd\u4f5c","text":"<pre><code># \u73fe\u5728\u306e\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u78ba\u8a8d\ndocker-compose exec app alembic current\n\n# \u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u5c65\u6b74\u306e\u78ba\u8a8d\ndocker-compose exec app alembic history\n\n# \u7279\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u3078\u306e\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\uff08\u5fc5\u8981\u6642\u306e\u307f\uff09\ndocker-compose exec app alembic downgrade &lt;revision_id&gt;\n</code></pre>"},{"location":"README-deploy/#6","title":"6. \u74b0\u5883\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<pre><code># \u30b3\u30f3\u30c6\u30ca\u3068\u95a2\u9023\u30ea\u30bd\u30fc\u30b9\u306e\u505c\u6b62\u30fb\u524a\u9664\uff08\u30c7\u30fc\u30bf\u306f\u4fdd\u6301\uff09\ndocker-compose down\n\n# \u30c7\u30fc\u30bf\u3082\u542b\u3081\u305f\u5b8c\u5168\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\ndocker-compose down -v\n\n# \u5168\u3066\u306e\u74b0\u5883\u3092\u521d\u671f\u72b6\u614b\u304b\u3089\u518d\u69cb\u7bc9\ndocker-compose up --build -d\n</code></pre>"},{"location":"README-deploy/#7","title":"7. \u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":"<pre><code># \u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u78ba\u8a8d\ndocker-compose ps\n\n# entrypoint.sh\u3092\u542b\u3080\u8a73\u7d30\u30ed\u30b0\u306e\u78ba\u8a8d\ndocker-compose logs -f app\n\n# \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u78ba\u8a8d\ndocker-compose exec db psql -U koiki_user -d koiki_todo_db\n\n# \u30b3\u30f3\u30c6\u30ca\u5185\u30b7\u30a7\u30eb\u30a2\u30af\u30bb\u30b9\ndocker-compose exec app bash\n\n# \u5f37\u5236\u7684\u306a\u518d\u30d3\u30eb\u30c9\ndocker-compose build --no-cache\ndocker-compose up -d --force-recreate\n</code></pre>"},{"location":"README-deploy/#8","title":"8. \u672c\u756a\u74b0\u5883\u30c7\u30d7\u30ed\u30a4\u6e96\u5099","text":"<pre><code># \u672c\u756a\u7528.env\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\ncp .env.example .env.production\n# \u672c\u756a\u74b0\u5883\u7528\u306e\u8a2d\u5b9a\u306b\u7de8\u96c6\n\n# \u672c\u756a\u74b0\u5883\u7528\u30a4\u30e1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9\ndocker-compose -f docker-compose.production.yml build\n\n# \u30a4\u30e1\u30fc\u30b8\u306e\u30d7\u30c3\u30b7\u30e5\uff08\u30ec\u30b8\u30b9\u30c8\u30ea\u304c\u3042\u308b\u5834\u5408\uff09\ndocker-compose -f docker-compose.production.yml push\n</code></pre>"},{"location":"README-deploy/#9-2025-06-21","title":"9. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u3068\u30c6\u30b9\u30c8 (2025-06-21 \u8ffd\u52a0)","text":"<pre><code># \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u306e\u5b9f\u884c\ndocker-compose exec app pip-audit\n\n# \u9759\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u89e3\u6790\ndocker-compose exec app bandit -r app/ libkoiki/\n\n# \u5305\u62ec\u7684API\u30c6\u30b9\u30c8\uff08\u958b\u767a\u74b0\u5883\uff09\ncurl -s http://localhost:8000/ | jq .\ncurl -s http://localhost:8000/health | jq .\ncurl -s http://localhost:8000/api/v1/health | jq .\n\n# \u30e6\u30fc\u30b6\u30fc\u767b\u9332\u30c6\u30b9\u30c8\ncurl -X POST http://localhost:8000/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"email\": \"test@example.com\", \"password\": \"testpass123\"}' | jq .\n\n# \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u53d6\u5f97\u30c6\u30b9\u30c8\ncurl -X POST http://localhost:8000/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"password\": \"testpass123\"}' | jq .\n</code></pre>"},{"location":"README-deploy/#_1","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<p>\u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\u5f8c\u3001\u4ee5\u4e0b\u306eURL\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 (Swagger UI): http://localhost:8000/docs</li> <li>API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 (ReDoc): http://localhost:8000/redoc</li> <li>\u30eb\u30fc\u30c8\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8: http://localhost:8000/</li> </ul>"},{"location":"README-deploy/#_2","title":"\u6280\u8853\u7684\u306a\u8aac\u660e","text":""},{"location":"README-deploy/#docker-entrypointsh","title":"docker-entrypoint.sh\u306e\u6a5f\u80fd","text":"<p>\u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\u6642\u306b\u306f<code>docker-entrypoint.sh</code>\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u5b9f\u884c\u3055\u308c\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u304c\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u307e\u3059\uff1a</p> <ol> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u78ba\u8a8d\uff1a</li> <li>DATABASE_URL\u74b0\u5883\u5909\u6570\u304b\u3089\u63a5\u7d9a\u60c5\u5831\u3092\u89e3\u6790</li> <li> <p>\u6700\u592730\u56de\u306e\u30ea\u30c8\u30e9\u30a4\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u3092\u78ba\u8a8d</p> </li> <li> <p>\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u6e96\u5099\uff1a</p> </li> <li> <p><code>alembic/versions</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5b58\u5728\u78ba\u8a8d\u3068\u4f5c\u6210</p> </li> <li> <p>\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\uff1a</p> </li> <li><code>alembic upgrade head</code>\u3067\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c</li> <li>\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u521d\u671f\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u81ea\u52d5\u751f\u6210</li> </ol> <p>\u3053\u306e\u81ea\u52d5\u5316\u306b\u3088\u308a\u3001\u958b\u767a\u8005\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306e\u591a\u304f\u306e\u624b\u9806\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u96c6\u4e2d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"README-deploy/#poetry-2x","title":"\u6700\u65b0\u306ePoetry 2.x\u5bfe\u5fdc\u72b6\u6cc1","text":""},{"location":"README-deploy/#_3","title":"\u4f9d\u5b58\u6027\u7ba1\u7406\u306e\u6539\u5584\u70b9","text":"<ul> <li>Poetry 2.1.0: \u6700\u65b0\u306ePoetry 2.x\u30b7\u30b9\u30c6\u30e0\u3092\u63a1\u7528</li> <li>PEP 621\u6e96\u62e0: <code>pyproject.toml</code>\u304c\u6a19\u6e96\u7684\u306a\u8a2d\u5b9a\u69cb\u9020\u306b\u79fb\u884c</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5f37\u5316: \u5168\u8106\u5f31\u6027\uff08PYSEC-2024-38, PYSEC-2024-232/233, GHSA-f96h-pmfr-66vw\uff09\u3092\u4fee\u6b63</li> <li>Python 3.13\u5bfe\u5fdc: \u5b8c\u5168\u306a\u4e92\u63db\u6027\u3092\u78ba\u4fdd</li> </ul>"},{"location":"README-deploy/#_4","title":"\u4e3b\u8981\u306a\u66f4\u65b0\u5185\u5bb9","text":"<pre><code># \u4e3b\u8981\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u66f4\u65b0\u4f8b\nfastapi = \"&gt;=0.115.13,&lt;0.116.0\"     # \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u7248\npydantic = \"&gt;=2.11.7,&lt;2.12.0\"       # \u691c\u8a3c\u6a5f\u80fd\u5f37\u5316\u7248\nuvicorn = \"&gt;=0.34.3,&lt;0.35.0\"        # \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5927\u5e45\u6539\u5584\npytest = \"&gt;=8.4.1,&lt;8.5.0\"          # \u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u6700\u65b0\u7248\n</code></pre> <p>\u8a73\u7d30\u306a\u66f4\u65b0\u5c65\u6b74\u3068\u4f01\u696d\u5411\u3051\u5b9f\u88c5\u6226\u7565\u306b\u3064\u3044\u3066\u306f\u3001ENTERPRISE_DEPENDENCY_STRATEGY.md\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"SECURITY_AUDIT_COMMANDS/","title":"\u4f01\u696d\u5411\u3051\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u30b3\u30de\u30f3\u30c9","text":""},{"location":"SECURITY_AUDIT_COMMANDS/#_2","title":"\u4f9d\u5b58\u6027\u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3","text":""},{"location":"SECURITY_AUDIT_COMMANDS/#1","title":"1. \u57fa\u672c\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af","text":"<pre><code># \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npoetry install --with security\n\n# Safety - \u65e2\u77e5\u306e\u8106\u5f31\u6027\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c1\u30a7\u30c3\u30af\npoetry run safety check\n\n# pip-audit - OSV \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u76e3\u67fb\npoetry run pip-audit\n\n# Bandit - Python\u30b3\u30fc\u30c9\u306e\u9759\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u89e3\u6790\npoetry run bandit -r . -f json -o security-report.json\npoetry run bandit -r . --severity-level medium\n</code></pre>"},{"location":"SECURITY_AUDIT_COMMANDS/#2","title":"2. \u7d99\u7d9a\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u8996","text":"<pre><code># \u65e5\u6b21\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\n#!/bin/bash\necho \"=== Daily Security Audit ===\"\necho \"Date: $(date)\"\necho \"\"\n\necho \"1. Dependency Vulnerability Scan (Safety):\"\npoetry run safety check --json &gt; safety-report-$(date +%Y%m%d).json\npoetry run safety check\n\necho \"\"\necho \"2. OSV Database Audit (pip-audit):\"\npoetry run pip-audit --format=json --output=audit-report-$(date +%Y%m%d).json\npoetry run pip-audit\n\necho \"\"\necho \"3. Static Code Security Analysis (Bandit):\"\npoetry run bandit -r . -f json -o bandit-report-$(date +%Y%m%d).json\npoetry run bandit -r . --severity-level low\n\necho \"\"\necho \"4. Outdated Dependencies Check:\"\npoetry show --outdated\n\necho \"=== Security Audit Complete ===\"\n</code></pre>"},{"location":"SECURITY_AUDIT_COMMANDS/#3","title":"3. \u7dca\u6025\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8","text":"<pre><code># \u7dca\u6025CVE\u5bfe\u5fdc\u30d7\u30ed\u30bb\u30b9\necho \"=== Emergency Security Update Process ===\"\n\n# 1. \u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d\npoetry show | grep -E \"(fastapi|uvicorn|sqlalchemy|pydantic)\"\n\n# 2. \u8106\u5f31\u6027\u5f71\u97ff\u78ba\u8a8d\npoetry run safety check --json | jq '.vulnerabilities[]'\n\n# 3. \u7279\u5b9a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u7dca\u6025\u66f4\u65b0\npoetry add \"fastapi&gt;=0.104.2,&lt;0.105.0\"  # \u4f8b: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u7248\npoetry add \"pydantic&gt;=2.5.1,&lt;2.6.0\"     # \u4f8b: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fee\u6b63\u7248\n\n# 4. \u4f9d\u5b58\u6027\u6574\u5408\u6027\u78ba\u8a8d\npoetry check --lock\npoetry lock\npoetry install\n\n# 5. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u518d\u691c\u8a3c\npoetry run safety check\npoetry run pip-audit\n\n# 6. \u30c6\u30b9\u30c8\u5b9f\u884c\npoetry run pytest tests/\n\necho \"=== Emergency Update Complete ===\"\n</code></pre>"},{"location":"SECURITY_AUDIT_COMMANDS/#_3","title":"\u672c\u756a\u74b0\u5883\u30c7\u30d7\u30ed\u30a4\u524d\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8","text":""},{"location":"SECURITY_AUDIT_COMMANDS/#_4","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c\u30d7\u30ed\u30bb\u30b9","text":"<pre><code>#!/bin/bash\n# pre-deploy-security-check.sh\n\nset -e\n\necho \"\ud83d\udd12 Pre-deployment Security Verification\"\necho \"=======================================\"\n\n# 1. \u4f9d\u5b58\u6027\u8106\u5f31\u6027\u30b9\u30ad\u30e3\u30f3\necho \"1. Vulnerability Scanning...\"\npoetry run safety check --json &gt; pre-deploy-safety.json\nif ! poetry run safety check; then\n    echo \"\u274c Vulnerability found! Deployment blocked.\"\n    exit 1\nfi\n\n# 2. \u4f9d\u5b58\u6027\u76e3\u67fb\necho \"2. Dependency Audit...\"\npoetry run pip-audit --format=json --output=pre-deploy-audit.json\nif ! poetry run pip-audit; then\n    echo \"\u274c Audit failed! Deployment blocked.\"\n    exit 1\nfi\n\n# 3. \u30b3\u30fc\u30c9\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u89e3\u6790\necho \"3. Static Security Analysis...\"\npoetry run bandit -r . -f json -o pre-deploy-bandit.json\nif ! poetry run bandit -r . --severity-level medium; then\n    echo \"\u26a0\ufe0f  Security issues found. Review required.\"\n    # \u6ce8\u610f: \u4e2d\u30ec\u30d9\u30eb\u4ee5\u4e0a\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u306f\u8981\u30ec\u30d3\u30e5\u30fc\nfi\n\n# 4. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u691c\u8a3c\necho \"4. Configuration Security Check...\"\nif grep -r \"password\\|secret\\|key\" . --exclude-dir=.git --exclude-dir=.venv --exclude=\"*.md\"; then\n    echo \"\u26a0\ufe0f  Potential secrets in code. Manual review required.\"\nfi\n\n# 5. Docker\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\necho \"5. Container Security Baseline...\"\ndocker run --rm -v \"$(pwd)\":/app hadolint/hadolint hadolint /app/Dockerfile\n\necho \"\u2705 Security verification complete!\"\necho \"\ud83d\udcc4 Reports generated:\"\necho \"   - pre-deploy-safety.json\"\necho \"   - pre-deploy-audit.json\" \necho \"   - pre-deploy-bandit.json\"\n</code></pre>"},{"location":"SECURITY_AUDIT_COMMANDS/#_5","title":"\u6708\u6b21\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ec\u30d3\u30e5\u30fc","text":"<pre><code>#!/bin/bash\n# monthly-security-review.sh\n\necho \"\ud83d\udcc5 Monthly Security Review - $(date +%Y-%m)\"\necho \"============================================\"\n\n# 1. \u5168\u4f9d\u5b58\u6027\u306e\u6700\u65b0\u72b6\u6cc1\u78ba\u8a8d\necho \"1. Dependency Status Review:\"\npoetry show --outdated &gt; monthly-outdated-$(date +%Y%m).txt\npoetry show --tree &gt; monthly-deps-tree-$(date +%Y%m).txt\n\n# 2. \u7d2f\u7a4d\u8106\u5f31\u6027\u30ec\u30dd\u30fc\u30c8\necho \"2. Cumulative Vulnerability Report:\"\npoetry run safety check --json &gt; monthly-safety-$(date +%Y%m).json\n\n# 3. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a\u30ec\u30d3\u30e5\u30fc\necho \"3. Security Configuration Review:\"\necho \"   - Environment variables check\"\necho \"   - CORS settings verification\"\necho \"   - Rate limiting configuration\"\necho \"   - Authentication mechanisms\"\n\n# 4. Docker \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\necho \"4. Container Security Assessment:\"\ndocker scout cves local://koiki-pyfw-app &gt; monthly-docker-cves-$(date +%Y%m).txt\n\n# 5. \u63a8\u5968\u30a2\u30af\u30b7\u30e7\u30f3\u751f\u6210\necho \"5. Recommended Actions:\"\necho \"   See generated reports for specific recommendations\"\n\necho \"\ud83d\udcca Monthly review complete. Reports saved with timestamp.\"\n</code></pre>"},{"location":"SECURITY_AUDIT_COMMANDS/#_6","title":"\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u76e3\u67fb\u7d71\u5408","text":""},{"location":"SECURITY_AUDIT_COMMANDS/#cicd","title":"CI/CD \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u7d71\u5408","text":"<pre><code># .github/workflows/security-audit.yml\nname: Security Audit\n\non:\n  schedule:\n    - cron: '0 2 * * *'  # \u6bce\u65e5\u5348\u524d2\u6642\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  security-audit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v5\n      with:\n        python-version: '3.11.7'\n\n    - name: Install Poetry\n      run: |\n        curl -sSL https://install.python-poetry.org | python3 - --version 2.1.0\n        echo \"$HOME/.local/bin\" &gt;&gt; $GITHUB_PATH\n\n    - name: Install dependencies\n      run: |\n        poetry install --with security\n\n    - name: Run Safety Check\n      run: |\n        poetry run safety check --json --output safety-report.json\n        poetry run safety check\n\n    - name: Run pip-audit\n      run: |\n        poetry run pip-audit --format=json --output audit-report.json\n\n    - name: Run Bandit\n      run: |\n        poetry run bandit -r . -f json -o bandit-report.json\n        poetry run bandit -r . --severity-level medium\n\n    - name: Upload Security Reports\n      uses: actions/upload-artifact@v4\n      with:\n        name: security-reports\n        path: |\n          safety-report.json\n          audit-report.json\n          bandit-report.json\n</code></pre>"},{"location":"design_kkfw_0.5.0/","title":"KOIKI-FW v0.5.0","text":"<p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051FastAPI\u30d9\u30fc\u30b9\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u300cKOIKI-FW\u300d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 0.5.0 \u306b\u5bfe\u5fdc\u3057\u305f\u6a5f\u80fd\u8a2d\u8a08\u30fb\u69cb\u6210\u30ac\u30a4\u30c9\u3067\u3059\u3002 \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001v0.3.1\u306e\u57fa\u672c\u69cb\u6210\u3092\u7dad\u6301\u3057\u306a\u304c\u3089\u3001\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63\u3068\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565\u3001\u5305\u62ec\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30e2\u30c0\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u65bd\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"design_kkfw_0.5.0/#_1","title":"\u76ee\u6b21","text":"<ul> <li>01. \u306f\u3058\u3081\u306b<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> </ul> </li> <li>02. \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u6982\u8981<ul> <li>2.1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020\u3068\u30ec\u30a4\u30e4\u30fc</li> <li>2.2 \u4f9d\u5b58\u95a2\u4fc2\u306e\u6d41\u308c</li> </ul> </li> <li>03. \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210<ul> <li>3.1 libkoiki (\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30b3\u30a2)</li> <li>3.2 app (\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709)</li> </ul> </li> <li>04. \u8a2d\u5b9a\uff08Config\uff09\u3068\u4f9d\u5b58\u6027\u6ce8\u5165\uff08DI\uff09<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>4.1 \u8a2d\u5b9a\u7ba1\u7406 (config.py)</li> <li>4.2 \u4f9d\u5b58\u6027\u6ce8\u5165 (dependencies.py)</li> </ul> </li> <li>05. \u30e2\u30c7\u30eb &amp; \u30b9\u30ad\u30fc\u30de\u5c64<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>5.1 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb (SQLAlchemy)</li> <li>5.2 API\u30b9\u30ad\u30fc\u30de (Pydantic)</li> </ul> </li> <li>06. \u30ea\u30dd\u30b8\u30c8\u30ea\u5c64<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>6.1 \u30d9\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea</li> <li>6.2 \u5177\u4f53\u7684\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u5b9f\u88c5</li> </ul> </li> <li>07. \u30b5\u30fc\u30d3\u30b9\u5c64<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>7.1 \u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5</li> <li>7.2 \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406</li> </ul> </li> <li>08. \u8a8d\u8a3c\u30fb\u8a8d\u53ef\uff08JWT\uff09<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>8.1 JWT\u8a8d\u8a3c\u306e\u5b9f\u88c5</li> <li>8.2 \u8a8d\u8a3cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8</li> <li>8.3 \u30ed\u30fc\u30eb\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u5236\u5fa1 (RBAC)</li> </ul> </li> <li>09. \u975e\u540c\u671f\u51e6\u7406\uff08Celery &amp; Redis\uff09<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac</li> <li>9.1 Celery\u306b\u3088\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af</li> <li>9.2 \u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0 (\u30aa\u30d7\u30b7\u30e7\u30f3)</li> <li>9.3 Celery\u306e\u672c\u756a\u904b\u7528\u306b\u95a2\u3059\u308b\u8003\u616e\u4e8b\u9805</li> </ul> </li> <li>10. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\u4f8b\u3068\u8d77\u52d5\u65b9\u6cd5 (app/)<ul> <li>10.1 app/main.py</li> <li>10.2 app/routers/todo_router.py</li> <li>10.3 app/services/todo_service.py</li> <li>10.4 app/repositories/todo_repository.py</li> <li>10.5 app/models/todo_model.py</li> <li>10.6 app/schemas/todo_schema.py</li> <li>10.7 app/api/dependencies.py (\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u4f9d\u5b58\u6027)</li> <li>10.8 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (Alembic)</li> <li>10.9 \u8d77\u52d5\u65b9\u6cd5</li> </ul> </li> <li>11. \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u4f8b\u5916\u51e6\u7406<ul> <li>11.1 \u30ab\u30b9\u30bf\u30e0\u4f8b\u5916</li> <li>11.2 \u30b0\u30ed\u30fc\u30d0\u30eb\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u30fc</li> </ul> </li> <li>12. \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30ed\u30ae\u30f3\u30b0)</li> <li>12.1 \u30ed\u30ae\u30f3\u30b0\u8a2d\u5b9a (structlog)</li> <li>12.2 \u76e3\u67fb\u30ed\u30b0</li> <li>12.3 \u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306b\u3088\u308b\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0 (\u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30b0)</li> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0)</li> <li>12.4 Prometheus \u30e1\u30c8\u30ea\u30af\u30b9</li> </ul> </li> <li>13. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e00\u822c)</li> <li>13.1 \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8 (slowapi)</li> <li>13.2 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0</li> <li>13.3 \u5165\u529b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30d1\u30b9\u30ef\u30fc\u30c9\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3)</li> <li>13.4 \u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc</li> </ul> </li> <li>14. \u30c6\u30b9\u30c8\u6226\u7565\u3068\u30c6\u30b9\u30c8\u5b9f\u88c5<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30c6\u30b9\u30c8\u306e\u7a2e\u985e)</li> <li>14.1 \u30c6\u30b9\u30c8\u8a2d\u5b9a (conftest.py)</li> <li>14.2 \u5358\u4f53\u30c6\u30b9\u30c8\u4f8b</li> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30e2\u30c3\u30af)</li> <li>14.3 \u7d71\u5408\u30c6\u30b9\u30c8\u4f8b</li> </ul> </li> <li>15. \u30ed\u30fc\u30eb\u3068\u6a29\u9650<ul> <li>15.1 \u30ed\u30fc\u30eb\u30fb\u6a29\u9650\u30e2\u30c7\u30eb</li> <li>15.2 \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u306e\u5b9f\u88c5</li> </ul> </li> <li>16. UI/UX\u5b9f\u88c5\u306e\u9078\u629e\u80a2<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (UI/UX)</li> </ul> </li> <li>17. \u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI)<ul> <li>\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (CI/CD)</li> <li>17.1 GitHub Actions \u306b\u3088\u308bCI</li> <li>17.2 CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u6210</li> <li>17.3 \u30c6\u30b9\u30c8\u81ea\u52d5\u5316\u3068\u30ab\u30d0\u30ec\u30c3\u30b8</li> <li>17.4 CI\u74b0\u5883\u306e\u8a2d\u5b9a</li> </ul> </li> <li>18. \u307e\u3068\u3081</li> <li>19. \u4eca\u5f8c\u306e\u62e1\u5f35\u30fbDDD\u3078\u306e\u5e03\u77f3</li> <li>20. \u30d0\u30fc\u30b8\u30e7\u30f3\u5c65\u6b74</li> <li>\u304a\u308f\u308a\u306b</li> </ul>"},{"location":"design_kkfw_0.5.0/#01","title":"01. \u306f\u3058\u3081\u306b","text":"<p>KOIKI-FW \u306f\u3001FastAPI \u306b\u3088\u308b\u5805\u7262\u304b\u3064\u62e1\u5f35\u53ef\u80fd\u306a Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002</p> <p>\u672c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u76ee\u7684\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u696d\u52d9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8fc5\u901f\u306b\u7acb\u3061\u4e0a\u3052\u3089\u308c\u308b \u958b\u767a\u57fa\u76e4\u306e\u63d0\u4f9b</li> <li>\u30a4\u30f3\u30d5\u30e9\u3068\u30ed\u30b8\u30c3\u30af\u3092\u660e\u78ba\u306b\u5206\u96e2\u3057\u3001\u4fdd\u5b88\u6027\u30fb\u518d\u5229\u7528\u6027\u30fb\u30c6\u30b9\u30c8\u5bb9\u6613\u6027 \u3092\u5b9f\u73fe</li> <li>\u975e\u540c\u671f\u51e6\u7406\u3084JWT\u8a8d\u8a3c\u306a\u3069\u3001\u5b9f\u52d9\u8981\u4ef6\u306b\u5373\u3057\u305f\u6a5f\u80fd\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6a19\u6e96\u642d\u8f09</li> <li>\u5c06\u6765\u7684\u306a DDD\uff08\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08\uff09\u5c0e\u5165\u3092\u8996\u91ce\u306b\u5165\u308c\u305f\u3001\u62e1\u5f35\u53ef\u80fd\u306a\u69cb\u9020</li> </ul> <p>KOIKI-FW v0.5.0 \u3067\u306f\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u6a5f\u80fd\u3092 <code>libkoiki/</code> \u306b\u660e\u78ba\u306b\u5206\u96e2\u3057\u3001\u958b\u767a\u8005\u304c <code>/app</code> \u4ee5\u4e0b\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u672c\u4f53\u3092\u5b9f\u88c5\u3067\u304d\u308b\u69cb\u6210\u3092\u7dad\u6301\u3057\u306a\u304c\u3089\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565\u3092\u5c0e\u5165\u3057\u3001\u5305\u62ec\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u5b9f\u65bd\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"design_kkfw_0.5.0/#_2","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>FastAPI: Python\u306e\u30e2\u30c0\u30f3\u306aWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002\u9ad8\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u958b\u767a\u52b9\u7387\u304c\u7279\u5fb4\u3002</li> <li>SQLAlchemy: Python\u306eORM\uff08Object-Relational Mapper\uff09\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u6271\u3048\u308b\u3002</li> <li>Pydantic: Python\u306e\u30c7\u30fc\u30bf\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u578b\u30d2\u30f3\u30c8\u306b\u57fa\u3065\u304d\u30c7\u30fc\u30bf\u306e\u691c\u8a3c\u3084\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u884c\u3046\u3002</li> <li>JWT (JSON Web Token): Web\u3067\u5b89\u5168\u306b\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u30c8\u30fc\u30af\u30f3\u5f62\u5f0f\u3002\u8a8d\u8a3c\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u3002</li> <li>Celery: Python\u3067\u4eba\u6c17\u306e\u975e\u540c\u671f\u30bf\u30b9\u30af\u30ad\u30e5\u30fc/\u30b8\u30e7\u30d6\u30ad\u30e5\u30fc\u3002\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u306e\u306b\u4f7f\u3046\u3002</li> <li>\u975e\u540c\u671f\u51e6\u7406: \u51e6\u7406\u3092\u5f85\u305f\u305a\u306b\u88cf\u3067\u540c\u6642\u306b\u5b9f\u884c\u3059\u308b\u4ed5\u7d44\u307f\u3002\u4f8b\uff1aCelery \u306a\u3069\u306e\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u51e6\u7406\u3002</li> <li>Redis: \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u3068\u3057\u3066\u3082\u4f7f\u3048\u308b\u9ad8\u901f\u306a\u30a4\u30f3\u30e1\u30e2\u30ea\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3002</li> <li>DDD (\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08): \u30d3\u30b8\u30cd\u30b9\u306e\u95a2\u5fc3\u4e8b\uff08\u30c9\u30e1\u30a4\u30f3\uff09\u3092\u4e2d\u5fc3\u306b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u8a2d\u8a08\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#02","title":"02. \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u6982\u8981","text":"<p>\u672c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3001\u95a2\u5fc3\u4e8b\u306e\u5206\u96e2 (Separation of Concerns) \u3092\u91cd\u8996\u3057\u305f\u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#21","title":"2.1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020\u3068\u30ec\u30a4\u30e4\u30fc","text":"<ul> <li>API\u30ec\u30a4\u30e4\u30fc (<code>app/routers/</code>, <code>libkoiki/api/v1/endpoints/</code>):<ul> <li>HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u53d7\u4fe1\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3001\u5165\u529b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff08Pydantic \u30b9\u30ad\u30fc\u30de\u7d4c\u7531\uff09\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u6574\u5f62\u3002</li> <li>\u4f9d\u5b58\u6027\u6ce8\u5165\u3092\u5229\u7528\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u5c64\u3092\u547c\u3073\u51fa\u3059\u3002</li> <li>\u8a8d\u8a3c\u30fb\u8a8d\u53ef\u3001\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u306e\u9069\u7528\u3002</li> </ul> </li> <li>\u30b5\u30fc\u30d3\u30b9\u30ec\u30a4\u30e4\u30fc (<code>app/services/</code>, <code>libkoiki/services/</code>):<ul> <li>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30b3\u30a2\u3068\u306a\u308b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3002</li> <li>\u8907\u6570\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u5b9f\u73fe\u3002</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306e\u8cac\u52d9\u3092\u6301\u3064\u3002</li> <li>API\u5c64\u3084\u4ed6\u306e\u30b5\u30fc\u30d3\u30b9\u304b\u3089\u5229\u7528\u3055\u308c\u308b\u3002</li> </ul> </li> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u30ec\u30a4\u30e4\u30fc (<code>app/repositories/</code>, <code>libkoiki/repositories/</code>):<ul> <li>\u30c7\u30fc\u30bf\u6c38\u7d9a\u5316\u5c64\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u62bd\u8c61\u5316\u3002</li> <li>SQLAlchemy \u3092\u4f7f\u7528\u3057\u305f CRUD \u64cd\u4f5c\u3084\u30ab\u30b9\u30bf\u30e0\u30af\u30a8\u30ea\u306e\u5b9f\u88c5\u3002</li> <li>\u30b5\u30fc\u30d3\u30b9\u5c64\u304b\u3089\u5229\u7528\u3055\u308c\u308b\u3002</li> </ul> </li> <li>\u30e2\u30c7\u30eb\u30ec\u30a4\u30e4\u30fc (<code>app/models/</code>, <code>libkoiki/models/</code>, <code>app/schemas/</code>, <code>libkoiki/schemas/</code>):<ul> <li><code>models/</code>: SQLAlchemy \u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9 (ORM \u30e2\u30c7\u30eb)\u3002</li> <li><code>schemas/</code>: Pydantic \u3092\u7528\u3044\u305f API \u306e\u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9\u3001\u304a\u3088\u3073\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3002</li> </ul> </li> <li>\u30b3\u30a2\u30fb\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30ec\u30a4\u30e4\u30fc (<code>libkoiki/core/</code>, <code>libkoiki/db/</code>, <code>libkoiki/tasks/</code>):<ul> <li>\u8a2d\u5b9a (<code>config.py</code>)\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3 (<code>core/security.py</code>)\u3001\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916 (<code>exceptions.py</code>)\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406 (<code>transaction.py</code>)\u3001\u30ed\u30ae\u30f3\u30b0 (<code>logging.py</code>)\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u7ba1\u7406\u306a\u3069\u3002</li> </ul> </li> </ul>"},{"location":"design_kkfw_0.5.0/#22","title":"2.2 \u4f9d\u5b58\u95a2\u4fc2\u306e\u6d41\u308c","text":"<p>\u4ee5\u4e0b\u306b\u3001\u4e3b\u8981\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u6d41\u308c\u3092\u30c6\u30ad\u30b9\u30c8\u30d9\u30fc\u30b9\u3067\u793a\u3057\u307e\u3059\u3002</p> <pre><code>[Client / External System]\n  |\n  (HTTP Request)\n  V\n[API Layer (FastAPI Routers in app/ or libkoiki/api/v1/endpoints/)]\n  |  -------------------------------------------------------&gt; [Authentication/Authorization (libkoiki/core/security.py)]\n  |  -------------------------------------------------------&gt; [Configuration (libkoiki/core/config.py)]\n  |  -------------------------------------------------------&gt; [Logging (libkoiki/core/logging.py)]\n  |  -------------------------------------------------------&gt; [Monitoring (libkoiki/core/monitoring.py)]\n  |\n  (Calls Service, Uses Schemas)\n  V\n[Service Layer (Business Logic in app/services/ or libkoiki/services/)]\n  |  -------------------------------------------------------&gt; [Configuration]\n  |  -------------------------------------------------------&gt; [Logging]\n  |  ---- (May Publish Events) -----------------------------&gt; [Message Queue (Redis via libkoiki/events/ - Optional)]\n  |  ---- (May Dispatch Tasks) -----------------------------&gt; [Task Queue (Celery via libkoiki/tasks/)]\n  |\n  (Uses Repository, Uses Schemas for internal data structure)\n  V\n[Repository Layer (Data Access in app/repositories/ or libkoiki/repositories/)]\n  |  -------------------------------------------------------&gt; [Configuration]\n  |  -------------------------------------------------------&gt; [Logging]\n  |\n  (Interacts with DB, Uses DB Models)\n  V\n[Database (e.g., PostgreSQL, managed by libkoiki/db/)]\n  ^\n  | (Celery Worker may access DB via Repository/Service)\n  |\n[Async Task Workers (Celery in libkoiki/tasks/)]\n  |\n  (Uses Message Broker)\n  V\n[Message Broker (e.g., Redis, for Celery and optionally Events)]\n\nAssociated Data Structures:\n- DB Models (SQLAlchemy in app/models/, libkoiki/models/) - Used by Repository Layer\n- Data Schemas (Pydantic in app/schemas/, libkoiki/schemas/) - Used by API and Service Layers\n</code></pre> <ul> <li>\u4f9d\u5b58\u306e\u65b9\u5411: \u77e2\u5370\u306f\u4f9d\u5b58\u306e\u65b9\u5411\u3092\u793a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001API\u30ec\u30a4\u30e4\u30fc\u306f\u30b5\u30fc\u30d3\u30b9\u30ec\u30a4\u30e4\u30fc\u306b\u4f9d\u5b58\u3057\u307e\u3059\u304c\u3001\u30b5\u30fc\u30d3\u30b9\u30ec\u30a4\u30e4\u30fc\u306fAPI\u30ec\u30a4\u30e4\u30fc\u3092\u77e5\u308a\u307e\u305b\u3093\u3002</li> <li>\u4f9d\u5b58\u6027\u6ce8\u5165 (DI): FastAPI \u306e <code>Depends</code> \u6a5f\u80fd\u306b\u3088\u308a\u3001\u4e0a\u4f4d\u30ec\u30a4\u30e4\u30fc\u306f\u4e0b\u4f4d\u30ec\u30a4\u30e4\u30fc\u306e\u5177\u4f53\u7684\u306a\u5b9f\u88c5\u3067\u306f\u306a\u304f\u3001\u62bd\u8c61\uff08\u307e\u305f\u306f\u4f9d\u5b58\u6027\u89e3\u6c7a\u95a2\u6570\uff09\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002</li> <li>\u30b3\u30a2\u6a5f\u80fd: \u8a8d\u8a3c\u3001\u8a2d\u5b9a\u3001\u30ed\u30ae\u30f3\u30b0\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u3044\u3063\u305f\u6a2a\u65ad\u7684\u306a\u6a5f\u80fd\u306f\u3001\u5404\u30ec\u30a4\u30e4\u30fc\u304b\u3089\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5229\u7528\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#03","title":"03. \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210","text":"<p>\u672c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u4ee5\u4e0b\u306e2\u5c64\u306b\u5206\u304b\u308c\u305f\u69cb\u6210\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li><code>libkoiki/</code>: \u5171\u901a\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30ed\u30b8\u30c3\u30af\uff08DI/\u8a8d\u8a3c/\u975e\u540c\u671f/DB\u51e6\u7406\u306a\u3069\u3001\u518d\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff09</li> <li><code>app/</code>: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u30fbUI/API\u5b9a\u7fa9\u30fb\u30c9\u30e1\u30a4\u30f3\u5b9f\u88c5</li> </ul> <pre><code>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8/\n\u251c\u2500\u2500 app/                     # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b3\u30fc\u30c9\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 api/                 # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eDI\u306a\u3069\n\u2502   \u2502   \u2514\u2500\u2500 dependencies.py\n\u2502   \u251c\u2500\u2500 models/              # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eDB\u30e2\u30c7\u30eb\n\u2502   \u2502   \u2514\u2500\u2500 todo_model.py\n\u2502   \u251c\u2500\u2500 repositories/        # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\n\u2502   \u2502   \u2514\u2500\u2500 todo_repository.py\n\u2502   \u251c\u2500\u2500 routers/             # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eAPI\u30eb\u30fc\u30bf\u30fc\n\u2502   \u2502   \u2514\u2500\u2500 todo_router.py\n\u2502   \u251c\u2500\u2500 schemas/             # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306ePydantic\u30b9\u30ad\u30fc\u30de\n\u2502   \u2502   \u2514\u2500\u2500 todo_schema.py\n\u2502   \u251c\u2500\u2500 services/            # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b5\u30fc\u30d3\u30b9\n\u2502   \u2502   \u2514\u2500\u2500 todo_service.py\n\u2502   \u2514\u2500\u2500 main.py              # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\u251c\u2500\u2500 libkoiki/                # \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30b3\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 api/                 # API\u5171\u901a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 v1/              # API\u30d0\u30fc\u30b8\u30e7\u30f31\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2514\u2500\u2500 endpoints/   # \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9f\u88c5\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 auth.py  # \u8a8d\u8a3c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\n\u2502   \u251c\u2500\u2500 core/                # \u30b3\u30a2\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n\u2502   \u2502   \u251c\u2500\u2500 config.py        # \u8a2d\u5b9a\u7ba1\u7406\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py  # \u5171\u901aDI\n\u2502   \u2502   \u251c\u2500\u2500 error_handlers.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 logging.py\n\u2502   \u2502   \u251c\u2500\u2500 middleware.py\n\u2502   \u2502   \u251c\u2500\u2500 monitoring.py\n\u2502   \u2502   \u251c\u2500\u2500 rate_limiter.py  # \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\n\u2502   \u2502   \u251c\u2500\u2500 security.py      # JWT\u8a8d\u8a3c\n\u2502   \u2502   \u2514\u2500\u2500 transaction.py   # \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\n\u2502   \u251c\u2500\u2500 db/                  # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u95a2\u9023\n\u2502   \u2502   \u251c\u2500\u2500 base.py          # SQLAlchemy Base \u3068\u5171\u901a\u30e2\u30c7\u30eb\n\u2502   \u2502   \u2514\u2500\u2500 session.py       # DB\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\n\u2502   \u251c\u2500\u2500 models/              # \u5171\u901aDB\u30e2\u30c7\u30eb (User, Role, Permission\u306a\u3069)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 associations.py\n\u2502   \u2502   \u251c\u2500\u2500 permission.py\n\u2502   \u2502   \u251c\u2500\u2500 role.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py\n\u2502   \u251c\u2500\u2500 repositories/        # \u5171\u901a\u30ea\u30dd\u30b8\u30c8\u30ea (BaseRepository, UserRepository\u306a\u3069)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py\n\u2502   \u2502   \u2514\u2500\u2500 user_repository.py\n\u2502   \u251c\u2500\u2500 schemas/             # \u5171\u901aPydantic\u30b9\u30ad\u30fc\u30de (User, Token\u306a\u3069)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 token.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py\n\u2502   \u251c\u2500\u2500 services/            # \u5171\u901a\u30b5\u30fc\u30d3\u30b9 (UserService\u306a\u3069)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 user_service.py\n\u2502   \u251c\u2500\u2500 tasks/               # Celery\u30bf\u30b9\u30af\u95a2\u9023\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 celery_app.py\n\u2502   \u2502   \u2514\u2500\u2500 example_task.py\n\u2502   \u2514\u2500\u2500 pyproject.toml       # libkoiki\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u60c5\u5831\n\u251c\u2500\u2500 alembic/                 # DB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\n\u251c\u2500\u2500 tests/                   # \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9 (unit, integration)\n\u251c\u2500\u2500 .env.example             # \u74b0\u5883\u5909\u6570\u30b5\u30f3\u30d7\u30eb\n\u251c\u2500\u2500 .github/                 # GitHub Actions\u8a2d\u5b9a\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml           # CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b9a\u7fa9\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"design_kkfw_0.5.0/#31-libkoiki","title":"3.1 libkoiki (\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30b3\u30a2)","text":"<p><code>libkoiki/</code> \u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u6a2a\u65ad\u7684\u306b\u5229\u7528\u3055\u308c\u308b\u5171\u901a\u6a5f\u80fd\u3084\u57fa\u76e4\u90e8\u54c1\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\u3053\u306e\u90e8\u5206\u306f\u72ec\u7acb\u3057\u305f Python \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u7ba1\u7406\u3055\u308c\u3001\u4ed6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3082\u518d\u5229\u7528\u3067\u304d\u307e\u3059\u3002</p> <ul> <li><code>libkoiki/core/</code>: \u8a2d\u5b9a\u3001\u30ed\u30ae\u30f3\u30b0\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3001\u8a8d\u8a3c\u306a\u3069\u3002</li> <li><code>libkoiki/db/</code>: SQLAlchemy\u306e\u30d9\u30fc\u30b9\u8a2d\u5b9a\u3001DB\u30bb\u30c3\u30b7\u30e7\u30f3\u7ba1\u7406\u3002</li> <li><code>libkoiki/models/</code>: \u6c4e\u7528\u7684\u306a User, Role, Permission \u306a\u3069\u306eDB\u30e2\u30c7\u30eb\u3002</li> <li><code>libkoiki/schemas/</code>: User, Token \u306a\u3069\u306e\u6c4e\u7528\u7684\u306aPydantic\u30b9\u30ad\u30fc\u30de\u3002</li> <li><code>libkoiki/repositories/</code>: <code>BaseRepository</code> \u3084 <code>UserRepository</code> \u306a\u3069\u306e\u6c4e\u7528\u30ea\u30dd\u30b8\u30c8\u30ea\u3002</li> <li><code>libkoiki/services/</code>: <code>UserService</code> \u306a\u3069\u306e\u6c4e\u7528\u30b5\u30fc\u30d3\u30b9\u3002</li> <li><code>libkoiki/api/v1/endpoints/</code>: \u8a8d\u8a3c\u306a\u3069\u306e\u5171\u901a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9f\u88c5\u3002</li> <li><code>libkoiki/tasks/</code>: Celery\u306e\u57fa\u672c\u8a2d\u5b9a\u3084\u5171\u901a\u30bf\u30b9\u30af\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#32-app","title":"3.2 app (\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709)","text":"<p><code>app/</code> \u306f\u3001\u7279\u5b9a\u306e\u30d3\u30b8\u30cd\u30b9\u30c9\u30e1\u30a4\u30f3\u306b\u7279\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001ToDo\u7ba1\u7406\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3042\u308c\u3070\u3001ToDo\u306b\u95a2\u3059\u308b\u30e2\u30c7\u30eb\u3001\u30b9\u30ad\u30fc\u30de\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u3001\u30b5\u30fc\u30d3\u30b9\u3001\u30eb\u30fc\u30bf\u30fc\u306a\u3069\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <ul> <li><code>app/main.py</code>: FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u3001<code>libkoiki</code>\u306e\u6a5f\u80fd\u306e\u7d44\u307f\u8fbc\u307f\u3001<code>app/</code>\u56fa\u6709\u30eb\u30fc\u30bf\u30fc\u306e\u767b\u9332\u306a\u3069\u3002</li> <li><code>app/routers/</code>: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\u3002</li> <li><code>app/services/</code>: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3002</li> <li><code>app/repositories/</code>: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u30ed\u30b8\u30c3\u30af\u3002</li> <li><code>app/models/</code>, <code>app/schemas/</code>: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9\u3002</li> </ul> <p>\u3053\u306e\u69cb\u6210\u306b\u3088\u308a\u3001<code>libkoiki</code> \u3092 pip install \u53ef\u80fd\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u5916\u90e8\u63d0\u4f9b\u3057\u306a\u304c\u3089\u3001 <code>app/</code> \u5074\u3067\u306f\u500b\u5225\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3084\u30c9\u30e1\u30a4\u30f3\u306b\u7279\u5316\u3057\u305f\u958b\u767a\u3092\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#04-configdi","title":"04. \u8a2d\u5b9a\uff08Config\uff09\u3068\u4f9d\u5b58\u6027\u6ce8\u5165\uff08DI\uff09","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u67d4\u8edf\u306b\u69cb\u6210\u3059\u308b\u300c\u8a2d\u5b9a\u7ba1\u7406\u300d\u3068\u3001\u5404\u51e6\u7406\u3067\u5fc5\u8981\u306a\u6a5f\u80fd\u3092\u7c21\u6f54\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u300c\u4f9d\u5b58\u6027\u6ce8\u5165\uff08DI\uff09\u300d\u306e\u4ed5\u7d44\u307f\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_3","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>\u8a2d\u5b9a\uff08Config\uff09: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u3001\u63a5\u7d9a\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3084\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u306e\u60c5\u5831\u3092 <code>.env</code> \u30d5\u30a1\u30a4\u30eb\u306a\u3069\u304b\u3089\u52d5\u7684\u306b\u8aad\u307f\u8fbc\u3081\u308b\u3088\u3046\u306b\u3059\u308b\u4ed5\u7d44\u307f\u3002</li> <li>\u4f9d\u5b58\u6027\u6ce8\u5165\uff08DI: Dependency Injection\uff09: \u3042\u308b\u30af\u30e9\u30b9\u3084\u95a2\u6570\u304c\u5fc5\u8981\u3068\u3059\u308b\u6a5f\u80fd\uff08\u4f8b\uff1aDB\u63a5\u7d9a\u3084\u30b5\u30fc\u30d3\u30b9\uff09\u3092\u300c\u5916\u304b\u3089\u6e21\u3059\u300d\u3053\u3068\u3067\u3001\u518d\u5229\u7528\u6027\u3068\u30c6\u30b9\u30c8\u306e\u5bb9\u6613\u3055\u3092\u9ad8\u3081\u308b\u8a2d\u8a08\u624b\u6cd5\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#41-configpy","title":"4.1 \u8a2d\u5b9a\u7ba1\u7406 (config.py)","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u306f <code>pydantic</code> \u306e <code>BaseSettings</code> \u3092\u4f7f\u7528\u3057\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002\u74b0\u5883\u5909\u6570\u3084 <code>.env</code> \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5024\u3092\u8aad\u307f\u8fbc\u307f\u3001\u578b\u691c\u8a3c\u3082\u884c\u3044\u307e\u3059\u3002</p> <p><code>libkoiki/core/config.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/config.py\nimport os\nfrom pydantic import BaseSettings, PostgresDsn, AnyHttpUrl, validator\nfrom typing import Optional, Dict, Any, List, Union\nfrom functools import lru_cache\n\nclass Settings(BaseSettings):\n    # --- App ---\n    APP_NAME: str = \"KOIKI-FW\"\n    APP_ENV: str = \"development\" # \u4f8b: development, staging, production\n    DEBUG: bool = False\n    SECRET_KEY: str # \u2605\u672c\u756a\u3067\u306f\u5fc5\u305a\u74b0\u5883\u5909\u6570\u3067\u8a2d\u5b9a\u2605\n    API_PREFIX: str = \"/api/v1\"\n\n    # --- JWT ---\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 # 1 day\n    JWT_ALGORITHM: str = \"HS256\"\n    JWT_SECRET: str # JWT\u7f72\u540d\u306b\u4f7f\u7528\u3059\u308b\u9375\u3002SECRET_KEY\u3068\u540c\u3058\u5024\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\n\n    # --- Database ---\n    POSTGRES_USER: str = \"user\"\n    POSTGRES_PASSWORD: str = \"password\"\n    POSTGRES_HOST: str = \"localhost\"\n    POSTGRES_PORT: str = \"5432\"\n    POSTGRES_DB: str = \"koiki_db\"\n    DATABASE_URL: Optional[PostgresDsn] = None\n    DB_ECHO: bool = False\n    DB_POOL_SIZE: int = 10\n    DB_MAX_OVERFLOW: int = 20\n\n    @validator(\"DATABASE_URL\", pre=True)\n    def assemble_db_url(cls, v: Optional[str], values: Dict[str, Any]) -&gt; str:\n        if isinstance(v, str):\n            return v\n        return str(PostgresDsn.build(\n            scheme=\"postgresql+asyncpg\", # \u975e\u540c\u671f\u30c9\u30e9\u30a4\u30d0\n            user=values.get(\"POSTGRES_USER\"),\n            password=values.get(\"POSTGRES_PASSWORD\"),\n            host=values.get(\"POSTGRES_HOST\"),\n            port=values.get(\"POSTGRES_PORT\"),\n            path=f\"/{values.get('POSTGRES_DB') or ''}\",\n        ))\n\n    # --- Redis ---\n    REDIS_HOST: str = \"localhost\"\n    REDIS_PORT: int = 6379\n    REDIS_PASSWORD: Optional[str] = None\n    REDIS_DB: int = 0\n    REDIS_URL: Optional[str] = None\n\n    @validator(\"REDIS_URL\", pre=True)\n    def assemble_redis_url(cls, v: Optional[str], values: Dict[str, Any]) -&gt; str:\n        if isinstance(v, str): return v\n        password_part = f\":{values.get('REDIS_PASSWORD')}@\" if values.get('REDIS_PASSWORD') else \"\"\n        return f\"redis://{password_part}{values.get('REDIS_HOST')}:{values.get('REDIS_PORT')}/{values.get('REDIS_DB')}\"\n\n    # --- Celery ---\n    CELERY_BROKER_URL: Optional[str] = None\n    CELERY_RESULT_BACKEND: Optional[str] = None\n\n    # --- CORS ---\n    BACKEND_CORS_ORIGINS: List[str] = [\"http://localhost:3000\", \"http://localhost:8080\"]\n\n    @validator(\"BACKEND_CORS_ORIGINS\", pre=True)\n    def assemble_cors_origins(cls, v: Union[str, List[str]]) -&gt; List[str]:\n        if isinstance(v, str) and not v.startswith(\"[\"):\n            return [i.strip() for i in v.split(\",\")]\n        elif isinstance(v, list):\n            return v\n        raise ValueError(v)\n\n    # --- Rate Limiting (slowapi) ---\n    RATE_LIMIT_ENABLED: bool = True\n    RATE_LIMIT_DEFAULT: str = \"100/minute\"\n    RATE_LIMIT_STRATEGY: str = \"fixed-window\"\n\n    # --- Logging ---\n    LOG_LEVEL: str = \"INFO\"\n\n    class Config:\n        env_file = os.getenv(\"ENV_FILE\", \".env\") # \u74b0\u5883\u5909\u6570 `ENV_FILE` \u3067 .env \u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u53ef\u80fd\n        env_file_encoding = 'utf-8'\n        case_sensitive = True\n        # .env \u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306b\u3057\u306a\u3044\n        # \u5fc5\u9808\u9805\u76ee\u306f Settings \u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5b9a\u7fa9\u3067\u578b\u30d2\u30f3\u30c8\u306e\u307f\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306a\u3057\uff09\u306b\u3059\u308b\u3053\u3068\u3067\u5bfe\u5fdc\n        # \u4f8b: SECRET_KEY: str (\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306a\u3057) -&gt; \u74b0\u5883\u5909\u6570\u307e\u305f\u306f.env\u306b\u306a\u3044\u3068\u8d77\u52d5\u6642\u30a8\u30e9\u30fc\n        # env_ignore_missing = True # Python-dotenv v1.0.0+\n\n@lru_cache() # \u8a2d\u5b9a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u518d\u5229\u7528\ndef get_settings() -&gt; Settings:\n    return Settings()\n\n# \u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nsettings = get_settings()\n</code></pre> <p>\u74b0\u5883\u8a2d\u5b9a\u306e\u512a\u5148\u9806\u4f4d: 1. OS\u74b0\u5883\u5909\u6570 2. <code>.env</code> \u30d5\u30a1\u30a4\u30eb\uff08<code>ENV_FILE</code>\u3067\u6307\u5b9a\u3055\u308c\u305f\u3082\u306e\u3001\u307e\u305f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e <code>.env</code>\uff09 3. <code>Settings</code> \u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024</p> <p>\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u7ba1\u7406: <code>SECRET_KEY</code> \u3084\u672c\u756aDB\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u306a\u3069\u306e\u6a5f\u5bc6\u60c5\u5831\u306f\u3001<code>.env</code> \u30d5\u30a1\u30a4\u30eb\u306b\u76f4\u63a5\u8a18\u8ff0\u305b\u305a\u3001HashiCorp Vault, AWS Secrets Manager \u306a\u3069\u306e\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u7ba1\u7406\u30b5\u30fc\u30d3\u30b9\u3084\u3001CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u74b0\u5883\u5909\u6570\u3068\u3057\u3066\u7ba1\u7406\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#42-dependenciespy","title":"4.2 \u4f9d\u5b58\u6027\u6ce8\u5165 (dependencies.py)","text":"<p>FastAPI \u306e <code>Depends</code> \u3092\u6d3b\u7528\u3057\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u89e3\u6c7a\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u306e\u518d\u5229\u7528\u6027\u3084\u30c6\u30b9\u30c8\u5bb9\u6613\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/dependencies.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/dependencies.py\nfrom typing import Annotated\nfrom fastapi import Depends\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n# session.py\u304b\u3089\u5b9f\u88c5\u6e08\u307f\u306eget_db\u95a2\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom libkoiki.db.session import get_db\nfrom libkoiki.services.user_service import UserService\nfrom libkoiki.repositories.user_repository import UserRepository\n\n# \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u4f9d\u5b58\u6027\u306fsession.py\u304b\u3089\u76f4\u63a5\u30a4\u30f3\u30dd\u30fc\u30c8\nDBSessionDep = Annotated[AsyncSession, Depends(get_db)]\n\n# UserService \u306e\u4f9d\u5b58\u6027\nasync def get_user_service(db: AsyncSession = Depends(get_db)) -&gt; UserService:\n    \"\"\"\n    UserService \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u63d0\u4f9b\n    \"\"\"\n    repository = UserRepository()\n    repository.set_session(db)\n    return UserService(repository)\n\n# \u4f9d\u5b58\u6027\u6ce8\u5165\u7528\u306e\u30bf\u30a4\u30d7\u30a8\u30a4\u30ea\u30a2\u30b9\nUserServiceDep = Annotated[UserService, Depends(get_user_service)]\n\n# \u8a8d\u8a3c\u95a2\u9023\u306e\u4f9d\u5b58\u6027\u306fsecurity.py\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\n</code></pre> <p><code>libkoiki/core/security.py</code> \u306e\u8a8d\u8a3c\u95a2\u9023\u4f9d\u5b58\u6027:</p> <pre><code># libkoiki/core/security.py (\u4e00\u90e8\u629c\u7c8b)\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom typing import Annotated\n\nfrom libkoiki.core.config import settings\nfrom libkoiki.db.session import get_db\nfrom libkoiki.models.user import UserModel\n\n# OAuth2\u30b9\u30ad\u30fc\u30e0\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=f\"{settings.API_PREFIX}/auth/login\")\n\n# JWT\u8a8d\u8a3c\u3067\u73fe\u5728\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\nasync def get_current_user_from_token(\n    token: Annotated[str, Depends(oauth2_scheme)],\n    db: Annotated[AsyncSession, Depends(get_db)]\n) -&gt; UserModel:\n    # \u5b9f\u88c5\u8a73\u7d30\u306f\u7701\u7565\uff088.1 JWT\u8a8d\u8a3c\u306e\u5b9f\u88c5\u3092\u53c2\u7167\uff09\n    ...\n\n# \u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nasync def get_current_active_user(\n    current_user: Annotated[UserModel, Depends(get_current_user_from_token)]\n) -&gt; UserModel:\n    if not current_user.is_active:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\")\n    return current_user\n\n# \u7ba1\u7406\u8005\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nasync def get_current_active_superuser(\n    current_user: Annotated[UserModel, Depends(get_current_active_user)]\n) -&gt; UserModel:\n    if not current_user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user doesn't have enough privileges\"\n        )\n    return current_user\n\n# \u4f9d\u5b58\u6027\u6ce8\u5165\u7528\u306e\u30bf\u30a4\u30d7\u30a8\u30a4\u30ea\u30a2\u30b9\nCurrentUserDep = Annotated[UserModel, Depends(get_current_user_from_token)]\nActiveUserDep = Annotated[UserModel, Depends(get_current_active_user)]\nSuperUserDep = Annotated[UserModel, Depends(get_current_active_superuser)]\n</code></pre> <p><code>libkoiki/core/rate_limiter.py</code> \u306e\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u8a2d\u5b9a:</p> <pre><code># libkoiki/core/rate_limiter.py\nfrom slowapi import Limiter\nfrom slowapi.util import get_remote_address\nfrom libkoiki.core.config import settings\n\n# \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30bf\u30fc\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[settings.RATE_LIMIT_DEFAULT],\n    enabled=settings.RATE_LIMIT_ENABLED,\n    strategy=settings.RATE_LIMIT_STRATEGY\n)\n\n# \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u306e\u4f7f\u7528\u4f8b:\n# @router.post(\"/\")\n# @limiter.limit(\"5/minute\")\n# async def create_item(...):\n#    ...\n</code></pre> <p>FastAPI\u306eDI\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3067 <code>Depends</code> \u3092\u4f7f\u7528\u3057\u3066\u4f9d\u5b58\u6027\u3092\u5ba3\u8a00\u3059\u308b\u3068\u3001FastAPI\u304c\u305d\u306e\u4f9d\u5b58\u6027\uff08\u95a2\u6570\u3084\u30af\u30e9\u30b9\uff09\u3092\u5b9f\u884c\u307e\u305f\u306f\u89e3\u6c7a\u3057\u3001\u7d50\u679c\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u95a2\u6570\u306b\u6ce8\u5165\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u758e\u7d50\u5408\u304c\u5b9f\u73fe\u3057\u3001\u30c6\u30b9\u30c8\u306e\u5bb9\u6613\u6027\u3082\u5411\u4e0a\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#05","title":"05. \u30e2\u30c7\u30eb &amp; \u30b9\u30ad\u30fc\u30de\u5c64","text":"<p>\u3053\u3053\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u884c\u3046 \u30e2\u30c7\u30eb\uff08Model\uff09 \u3068\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u306e\u30c7\u30fc\u30bf\u9001\u53d7\u4fe1\u3092\u5b9a\u7fa9\u3059\u308b \u30b9\u30ad\u30fc\u30de\uff08Schema\uff09 \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_4","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>\u30e2\u30c7\u30eb\uff08Model\uff09: Python \u3067\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3068\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\uff08ORM: Object Relational Mapping\uff09\u3002FastAPI \u3067\u306f SQLAlchemy \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>\u30b9\u30ad\u30fc\u30de\uff08Schema\uff09: API \u3092\u901a\u3058\u3066\u3084\u308a\u53d6\u308a\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3001<code>pydantic</code> \u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u578b\u30c1\u30a7\u30c3\u30af\u30fb\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u884c\u3048\u307e\u3059\u3002</li> </ul> <p>\u30e2\u30c7\u30eb\u306f\u300c\u4fdd\u5b58\u5f62\u5f0f\u300d\u3001\u30b9\u30ad\u30fc\u30de\u306f\u300c\u901a\u4fe1\u5f62\u5f0f\u300d\u3068\u6349\u3048\u308b\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#51-sqlalchemy","title":"5.1 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb (SQLAlchemy)","text":"<p>SQLAlchemy\u306eDeclarative System\u3092\u4f7f\u7528\u3057\u3066DB\u30c6\u30fc\u30d6\u30eb\u3092Python\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5171\u901a\u30ab\u30e9\u30e0\uff08id, created_at, updated_at\uff09\u3092\u6301\u3064\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002</p> <p><code>libkoiki/db/base.py</code> (\u5171\u901a\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb):</p> <pre><code># libkoiki/db/base.py\nfrom sqlalchemy.orm import declarative_base, declared_attr\nfrom sqlalchemy import Column, Integer, DateTime, func\nfrom typing import Any\n\nclass CustomBase:\n    @declared_attr\n    def __tablename__(cls) -&gt; str:\n        import re\n        return re.sub(r'(?&lt;!^)(?=[A-Z])', '_', cls.__name__).lower().replace(\"_model\", \"\")\n\n    id: Any = Column(Integer, primary_key=True, index=True)\n    created_at: Any = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at: Any = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())\n\nBase = declarative_base(cls=CustomBase)\n</code></pre> <p><code>libkoiki/models/user.py</code> (UserModel\u4f8b):</p> <pre><code># libkoiki/models/user.py\nfrom sqlalchemy import Column, String, Boolean, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom libkoiki.db.base import Base\n# from libkoiki.models.associations import user_roles # \u591a\u5bfe\u591a\u95a2\u9023\u30c6\u30fc\u30d6\u30eb\n\nclass UserModel(Base):\n    # __tablename__ = \"users\" # CustomBase\u3067\u81ea\u52d5\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u3067\u4e0d\u8981\u306a\u5834\u5408\u3082\u3042\u308b\n\n    email = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    full_name = Column(String, index=True, nullable=True)\n    is_active = Column(Boolean, default=True)\n    is_superuser = Column(Boolean, default=False)\n\n    # roles = relationship(\"RoleModel\", secondary=user_roles, back_populates=\"users\")\n    # todos = relationship(\"TodoModel\", back_populates=\"owner\") # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u30e2\u30c7\u30eb\u3068\u306e\u95a2\u9023\n</code></pre> <p>(RoleModel, PermissionModel, associations.py \u306a\u3069\u3082\u540c\u69d8\u306b <code>libkoiki/models/</code> \u306b\u5b9a\u7fa9)</p> <p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30e2\u30c7\u30eb (\u4f8b: <code>TodoModel</code>) \u306f <code>app/models/</code> \u306b\u914d\u7f6e\u3057\u307e\u3059 (\u8a73\u7d30\u306f 10. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\u4f8b\u3068\u8d77\u52d5\u65b9\u6cd5 (app/) \u3092\u53c2\u7167)\u3002</p>"},{"location":"design_kkfw_0.5.0/#52-api-pydantic","title":"5.2 API\u30b9\u30ad\u30fc\u30de (Pydantic)","text":"<p>Pydantic\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066API\u306e\u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/schemas/user.py</code> (User\u30b9\u30ad\u30fc\u30de\u4f8b):</p> <pre><code># libkoiki/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional, List\nfrom datetime import datetime\n\n# --- Base Schemas ---\nclass UserBase(BaseModel):\n    email: EmailStr\n    full_name: Optional[str] = None\n    is_active: bool = True\n\n# --- Request Schemas ---\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8) # \u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306f\u30b5\u30fc\u30d3\u30b9\u5c64\u3067\u3082\u691c\u8a3c\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    full_name: Optional[str] = None\n    is_active: Optional[bool] = None\n    password: Optional[str] = Field(None, min_length=8)\n\n# --- Response Schemas ---\nclass RoleResponseSimple(BaseModel): # UserResponse\u5185\u3067\u4f7f\u7528\n     id: int\n     name: str\n     class Config:\n         orm_mode = True\n\nclass UserResponse(UserBase):\n    id: int\n    is_superuser: bool\n    created_at: datetime\n    updated_at: datetime\n    # roles: List[RoleResponseSimple] = [] # RBAC\u3092\u6709\u52b9\u306b\u3059\u308b\u5834\u5408\n\n    class Config:\n        orm_mode = True # SQLAlchemy\u30e2\u30c7\u30eb\u304b\u3089Pydantic\u30e2\u30c7\u30eb\u3078\u306e\u5909\u63db\u3092\u8a31\u53ef\n</code></pre> <p><code>libkoiki/schemas/token.py</code> (\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u30b9\u30ad\u30fc\u30de):</p> <pre><code># libkoiki/schemas/token.py\nfrom pydantic import BaseModel\nfrom typing import Optional\nfrom datetime import datetime\n\nclass Token(BaseModel):\n    \"\"\"\n    OAuth2\u5f62\u5f0f\u306e\u30c8\u30fc\u30af\u30f3\u30ec\u30b9\u30dd\u30f3\u30b9\n    \"\"\"\n    access_token: str\n    token_type: str\n\nclass TokenPayload(BaseModel):\n    \"\"\"\n    JWT\u30c8\u30fc\u30af\u30f3\u306e\u30da\u30a4\u30ed\u30fc\u30c9\n    \"\"\"\n    sub: Optional[str] = None  # user_id (\u6587\u5b57\u5217\u578b\u3067\u4fdd\u5b58)\n    exp: Optional[int] = None  # UNIX timestamp\n</code></pre> <p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b9\u30ad\u30fc\u30de (\u4f8b: <code>TodoSchema</code>) \u306f <code>app/schemas/</code> \u306b\u914d\u7f6e\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#06","title":"06. \u30ea\u30dd\u30b8\u30c8\u30ea\u5c64","text":"<p>\u30ea\u30dd\u30b8\u30c8\u30ea\uff08Repository\uff09\u5c64\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u306e\u8a73\u7d30\u3092\u96a0\u853d\u3057\u3001\u30b5\u30fc\u30d3\u30b9\u5c64\u304b\u3089\u306f\u300c\u30c7\u30fc\u30bf\u53d6\u5f97\u30fb\u4fdd\u5b58\u300d\u3068\u3044\u3046\u64cd\u4f5c\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u5f79\u5272\u3092\u6301\u3061\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_5","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u30d1\u30bf\u30fc\u30f3: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u51e6\u7406\u3092\u5c02\u7528\u30af\u30e9\u30b9\u306b\u5207\u308a\u51fa\u3059\u3053\u3068\u3067\u3001\u30a2\u30d7\u30ea\u306e\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3092\u7c21\u6f54\u304b\u3064\u30c6\u30b9\u30c8\u3057\u3084\u3059\u304f\u4fdd\u3064\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\u3002</li> <li>\u305f\u3068\u3048\u3070\u300cTodo\u3092\u8ffd\u52a0\u3059\u308b\u300d\u51e6\u7406\u306f\u3001SQL \u3092\u76f4\u63a5\u66f8\u304f\u306e\u3067\u306f\u306a\u304f\u3001<code>TodoRepository.create()</code> \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u3058\u3066\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#61","title":"6.1 \u30d9\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea","text":"<p>\u5171\u901a\u306eCRUD\u64cd\u4f5c\u3092\u63d0\u4f9b\u3059\u308b\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30d9\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/repositories/base.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/repositories/base.py\nfrom typing import Generic, TypeVar, Type, Optional, List, Dict, Any, Sequence, Union\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.future import select\nfrom sqlalchemy import delete as sql_delete, update as sql_update\nfrom pydantic import BaseModel as PydanticBaseModel # SQLAlchemy\u306eBase\u3068\u533a\u5225\nfrom libkoiki.db.base import Base as DBBase # SQLAlchemy\u306eORM Base\n\nModelType = TypeVar(\"ModelType\", bound=DBBase)\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=PydanticBaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=PydanticBaseModel)\n\nclass BaseRepository(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self._db: Optional[AsyncSession] = None\n\n    def set_session(self, db: AsyncSession):\n        self._db = db\n\n    @property\n    def db(self) -&gt; AsyncSession:\n        if self._db is None:\n            raise Exception(f\"DB session not set for repository {self.__class__.__name__}\")\n        return self._db\n\n    async def get(self, id: Any) -&gt; Optional[ModelType]:\n        result = await self.db.execute(select(self.model).where(self.model.id == id))\n        return result.scalar_one_or_none()\n\n    async def get_multi(self, *, skip: int = 0, limit: int = 100) -&gt; Sequence[ModelType]:\n        result = await self.db.execute(\n            select(self.model).offset(skip).limit(limit).order_by(self.model.id)\n        )\n        return result.scalars().all()\n\n    async def create(self, obj_in: ModelType) -&gt; ModelType:\n        self.db.add(obj_in)\n        await self.db.flush()\n        await self.db.refresh(obj_in)\n        return obj_in\n\n    async def update(\n        self, db_obj: ModelType, obj_in: Union[UpdateSchemaType, Dict[str, Any]]\n    ) -&gt; ModelType:\n        if isinstance(obj_in, dict):\n            update_data = obj_in\n        else:\n            update_data = obj_in.dict(exclude_unset=True)\n\n        for field, value in update_data.items():\n            if hasattr(db_obj, field):\n                setattr(db_obj, field, value)\n        self.db.add(db_obj)\n        await self.db.flush()\n        await self.db.refresh(db_obj)\n        return db_obj\n\n    async def delete(self, id: Any) -&gt; Optional[ModelType]:\n        obj = await self.get(id)\n        if obj:\n            await self.db.delete(obj)\n            await self.db.flush()\n        return obj\n</code></pre> <p>\u3053\u306e\u30d9\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u64cd\u4f5c\u5bfe\u8c61\u306e\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u53d7\u3051\u53d6\u308a\u3001<code>set_session</code> \u30e1\u30bd\u30c3\u30c9\u3067\u975e\u540c\u671fDB\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b5\u30fc\u30d3\u30b9\u5c64\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306b\u3001\u5916\u90e8\u304b\u3089\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u6ce8\u5165\u3059\u308b\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#62","title":"6.2 \u5177\u4f53\u7684\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u5b9f\u88c5","text":"<p>\u30d9\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u7d99\u627f\u3057\u3001\u30e2\u30c7\u30eb\u56fa\u6709\u306e\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/repositories/user_repository.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/repositories/user_repository.py\nfrom typing import Optional\nfrom sqlalchemy.future import select\nfrom sqlalchemy.orm import selectinload\n\nfrom libkoiki.models.user import UserModel\nfrom libkoiki.models.role import RoleModel\nfrom libkoiki.repositories.base import BaseRepository\nfrom libkoiki.schemas.user import UserCreate, UserUpdate # \u76f4\u63a5\u306f\u4f7f\u308f\u306a\u3044\u3053\u3068\u304c\u591a\u3044\n\nclass UserRepository(BaseRepository[UserModel, UserCreate, UserUpdate]):\n    def __init__(self):\n        super().__init__(UserModel)\n\n    async def get_by_email(self, email: str) -&gt; Optional[UserModel]:\n        result = await self.db.execute(\n            select(UserModel).where(UserModel.email == email)\n        )\n        return result.scalar_one_or_none()\n\n    # RBAC\u4f7f\u7528\u6642\u306a\u3069\u3001\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    async def get_user_with_roles_permissions(self, user_id: int) -&gt; Optional[UserModel]:\n        stmt = (\n            select(UserModel)\n            .options(\n                selectinload(UserModel.roles).selectinload(RoleModel.permissions)\n            )\n            .where(UserModel.id == user_id)\n        )\n        result = await self.db.execute(stmt)\n        return result.scalar_one_or_none()\n</code></pre> <p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30ea\u30dd\u30b8\u30c8\u30ea (\u4f8b: <code>TodoRepository</code>) \u306f <code>app/repositories/</code> \u306b\u914d\u7f6e\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#07","title":"07. \u30b5\u30fc\u30d3\u30b9\u5c64","text":"<p>\u30b5\u30fc\u30d3\u30b9\u5c64\u306f\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\uff08\uff1d\u300c\u3069\u3046\u51e6\u7406\u3059\u3079\u304d\u304b\u300d\u3068\u3044\u3046\u30eb\u30fc\u30eb\uff09\u3092\u307e\u3068\u3081\u308b\u5834\u6240\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_6","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>\u30b5\u30fc\u30d3\u30b9\uff08Service\uff09: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u3092\u307e\u3068\u3081\u305f\u30af\u30e9\u30b9\u3084\u95a2\u6570\u7fa4\u3067\u3059\u3002\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\uff08API\u5c64\uff09\u3068\u30c7\u30fc\u30bf\u5c64\uff08\u30ea\u30dd\u30b8\u30c8\u30ea\uff09\u3068\u306e\u4ef2\u4ecb\u5f79\u3092\u679c\u305f\u3057\u307e\u3059\u3002</li> <li>\u305f\u3068\u3048\u3070\u300cTodo \u3092\u66f4\u65b0\u3059\u308b\u300d\u51e6\u7406\u3067\u306f\u3001\u307e\u305a\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u5fc5\u8981\u306a\u5909\u66f4\u3092\u52a0\u3048\u3001\u518d\u4fdd\u5b58\u3059\u308b\u3068\u3044\u3046\u4e00\u9023\u306e\u6d41\u308c\u3092\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u5c64\u3067\u51e6\u7406\u3057\u307e\u3059\u3002</li> </ul> <p>\u3053\u306e\u5c64\u3092\u8a2d\u3051\u308b\u3053\u3068\u3067\u3001API\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3084UI\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u304c\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#71","title":"7.1 \u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5","text":"<p>\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5fc5\u8981\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u3084\u4ed6\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u53d7\u3051\u53d6\u308a\uff08DI\u7d4c\u7531\uff09\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/services/user_service.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/services/user_service.py\nfrom typing import Optional, List, Sequence\nfrom sqlalchemy.ext.asyncio import AsyncSession\nimport structlog\n\nfrom libkoiki.repositories.user_repository import UserRepository\nfrom libkoiki.models.user import UserModel\nfrom libkoiki.schemas.user import UserCreate, UserUpdate\nfrom libkoiki.core.security import get_password_hash, verify_password, check_password_complexity\n# from libkoiki.events.publisher import EventPublisher # \u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3046\u5834\u5408\nfrom libkoiki.core.exceptions import ValidationException, ResourceNotFoundException\nfrom libkoiki.core.transaction import transactional # \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30c7\u30b3\u30ec\u30fc\u30bf\n\nlogger = structlog.get_logger(__name__)\n\nclass UserService:\n    def __init__(self, repository: UserRepository): # event_publisher: Optional[EventPublisher] = None):\n        self.repository = repository\n        # self.event_publisher = event_publisher\n\n    async def get_user_by_id(self, user_id: int, db: AsyncSession) -&gt; Optional[UserModel]:\n        self.repository.set_session(db)\n        user = await self.repository.get(user_id)\n        if not user:\n            raise ResourceNotFoundException(resource_name=\"User\", resource_id=user_id)\n        return user\n\n    async def get_user_by_email(self, email: str, db: AsyncSession) -&gt; Optional[UserModel]:\n        self.repository.set_session(db)\n        return await self.repository.get_by_email(email)\n\n    async def get_users(self, db: AsyncSession, skip: int = 0, limit: int = 100) -&gt; Sequence[UserModel]:\n        self.repository.set_session(db)\n        return await self.repository.get_multi(skip=skip, limit=limit)\n\n    @transactional # \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\n    async def create_user(self, user_in: UserCreate, db: AsyncSession) -&gt; UserModel:\n        self.repository.set_session(db)\n        if await self.repository.get_by_email(user_in.email):\n            raise ValidationException(\"\u3053\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\")\n\n        if not check_password_complexity(user_in.password): # \u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u30c1\u30a7\u30c3\u30af\n            raise ValidationException(\n                \"\u30d1\u30b9\u30ef\u30fc\u30c9\u306f8\u6587\u5b57\u4ee5\u4e0a\u3067\u3001\u5927\u6587\u5b57\u3001\u5c0f\u6587\u5b57\u3001\u6570\u5b57\u3001\u8a18\u53f7\u3092\u54041\u3064\u4ee5\u4e0a\u542b\u3081\u3066\u304f\u3060\u3055\u3044\u3002\"\n            )\n\n        hashed_password = get_password_hash(user_in.password)\n        # Pydantic\u30e2\u30c7\u30eb\u306e dict() \u306f\u4fbf\u5229\u3060\u304c\u3001DB\u30e2\u30c7\u30eb\u306b\u76f4\u63a5\u6e21\u305b\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u307f\u306b\u3059\u308b\n        user_model_data = user_in.dict(exclude={\"password\"}, exclude_unset=True)\n        user_model_data[\"hashed_password\"] = hashed_password\n\n        user = UserModel(**user_model_data)\n        created_user = await self.repository.create(user)\n\n        logger.info(\"User created successfully\", user_id=created_user.id, email=created_user.email)\n        # if self.event_publisher:\n        #     await self.event_publisher.publish(\"user_created\", {\"user_id\": created_user.id, \"email\": created_user.email})\n        return created_user\n\n    @transactional\n    async def update_user(self, user_id: int, user_in: UserUpdate, db: AsyncSession) -&gt; UserModel:\n        self.repository.set_session(db)\n        user = await self.repository.get(user_id)\n        if not user:\n            raise ResourceNotFoundException(resource_name=\"User\", resource_id=user_id)\n\n        update_data = user_in.dict(exclude_unset=True)\n        if \"password\" in update_data and update_data[\"password\"]:\n            if not check_password_complexity(update_data[\"password\"]):\n                 raise ValidationException(\"\u30d1\u30b9\u30ef\u30fc\u30c9\u306f8\u6587\u5b57\u4ee5\u4e0a\u3067\u3001\u5927\u6587\u5b57\u3001\u5c0f\u6587\u5b57\u3001\u6570\u5b57\u3001\u8a18\u53f7\u3092\u54041\u3064\u4ee5\u4e0a\u542b\u3081\u3066\u304f\u3060\u3055\u3044\u3002\")\n            update_data[\"hashed_password\"] = get_password_hash(update_data[\"password\"])\n            del update_data[\"password\"]\n        elif \"password\" in update_data: # password\u304c\u7a7a\u6587\u5b57\u3084None\u306e\u5834\u5408\n             del update_data[\"password\"]\n\n        if \"email\" in update_data and update_data[\"email\"] != user.email:\n             existing_user = await self.repository.get_by_email(update_data[\"email\"])\n             if existing_user and existing_user.id != user_id:\n                 raise ValidationException(\"\u3053\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\")\n\n        updated_user = await self.repository.update(user, update_data)\n        logger.info(\"User updated\", user_id=updated_user.id)\n        # if self.event_publisher:\n        # await self.event_publisher.publish(\"user_updated\", {\"user_id\": updated_user.id})\n        return updated_user\n\n    @transactional\n    async def delete_user(self, user_id: int, db: AsyncSession) -&gt; Optional[UserModel]:\n        self.repository.set_session(db)\n        user = await self.repository.get(user_id)\n        if not user:\n            raise ResourceNotFoundException(resource_name=\"User\", resource_id=user_id)\n        # \u7269\u7406\u524a\u9664\u304b\u8ad6\u7406\u524a\u9664\u304b\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u5c64\u307e\u305f\u306f\u3053\u3053\u3067\u5236\u5fa1\n        deleted_user = await self.repository.delete(user_id) # delete\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u5834\u5408\n        logger.info(\"User deleted\", user_id=user_id)\n        return deleted_user\n\n    async def authenticate_user(self, email: str, password: str, db: AsyncSession) -&gt; Optional[UserModel]:\n        self.repository.set_session(db)\n        user = await self.repository.get_by_email(email)\n        if not user:\n            logger.warning(\"Authentication failed: user not found\", email=email)\n            return None\n        if not verify_password(password, user.hashed_password):\n            logger.warning(\"Authentication failed: invalid password\", email=email)\n            return None\n        return user\n</code></pre>"},{"location":"design_kkfw_0.5.0/#72","title":"7.2 \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406","text":"<p>\u8907\u6570\u306eDB\u64cd\u4f5c\u3092\u4f34\u3046\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3067\u306f\u3001\u51e6\u7406\u306e\u539f\u5b50\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u304c\u4e0d\u53ef\u6b20\u3067\u3059\u3002 <code>@transactional</code> \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u30b5\u30fc\u30d3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30e1\u30bd\u30c3\u30c9\u5168\u4f53\u3092\u4e00\u3064\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30b9\u30b3\u30fc\u30d7\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/transaction.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/transaction.py\nimport functools\nfrom typing import Callable, Any, Optional\nfrom sqlalchemy.ext.asyncio import AsyncSession\nimport structlog\n\n# from libkoiki.db.session import get_db_session # DB\u30bb\u30c3\u30b7\u30e7\u30f3\u53d6\u5f97\u95a2\u6570\u3092\u76f4\u63a5\u4f7f\u308f\u306a\u3044\nlogger = structlog.get_logger(__name__)\n\ndef transactional(func: Callable) -&gt; Callable:\n    @functools.wraps(func)\n    async def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        # \u30c7\u30b3\u30ec\u30fc\u30bf\u304c\u9069\u7528\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5f8c\u306e\u5f15\u6570\u304c AsyncSession \u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\n        # \u4f8b: async def my_method(self, ..., db: AsyncSession):\n        db: Optional[AsyncSession] = None\n        # args\u306e\u6700\u5f8c\u304cAsyncSession\u304b\u3001kwargs\u306bdb\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        if args and isinstance(args[-1], AsyncSession):\n            db = args[-1]\n        elif \"db\" in kwargs and isinstance(kwargs[\"db\"], AsyncSession):\n            db = kwargs[\"db\"]\n\n        if db is None:\n            # \u901a\u5e38\u3001\u30b5\u30fc\u30d3\u30b9\u30e1\u30bd\u30c3\u30c9\u306fFastAPI\u306eDI\u304b\u3089db\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u6ce8\u5165\u3055\u308c\u308b\n            # \u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u306f\u305d\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306b\u4f7f\u3046\n            raise ValueError(\n                f\"Transactional method {func.__name__} must receive an AsyncSession \"\n                \"instance as its last positional argument or as a 'db' keyword argument.\"\n            )\n\n        # \u65e2\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u958b\u59cb\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d (\u30cd\u30b9\u30c8\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306f begin_nested() \u304c\u5fc5\u8981)\n        # \u3053\u3053\u3067\u306f\u5358\u7d14\u306a\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u60f3\u5b9a\n        if db.in_transaction():\n            # \u30cd\u30b9\u30c8\u3055\u308c\u305f\u547c\u3073\u51fa\u3057\u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3044\u3067\u305d\u306e\u307e\u307e\u5b9f\u884c\n            logger.debug(f\"Joining existing transaction for {func.__name__}\")\n            return await func(*args, **kwargs)\n\n        # \u65b0\u3057\u3044\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u958b\u59cb\n        async with db.begin(): # begin() \u3067\u81ea\u52d5\u7684\u306b commit/rollback\n            logger.debug(f\"Starting transaction for {func.__name__}\")\n            try:\n                result = await func(*args, **kwargs)\n                # await db.commit() # async with db.begin() \u304c\u81ea\u52d5\u3067\u884c\u3046\n                logger.debug(f\"Transaction for {func.__name__} will be committed.\")\n                return result\n            except Exception as e:\n                logger.error(f\"Transaction failed for {func.__name__}, will be rolled back. Error: {e}\", exc_info=True)\n                # await db.rollback() # async with db.begin() \u304c\u81ea\u52d5\u3067\u884c\u3046\n                raise\n    return wrapper\n</code></pre> <p>\u4f7f\u7528\u65b9\u6cd5: \u30b5\u30fc\u30d3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5f8c\u306e\u5f15\u6570\u3068\u3057\u3066 <code>db: AsyncSession</code> \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u306b <code>@transactional</code> \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4ed8\u3051\u307e\u3059\u3002 \u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001<code>repository.set_session(db)</code> \u3092\u547c\u3073\u51fa\u3057\u3066\u73fe\u5728\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30b9\u30b3\u30fc\u30d7\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u6e21\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#08-jwt","title":"08. \u8a8d\u8a3c\u30fb\u8a8d\u53ef\uff08JWT\uff09","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u300c\u8ab0\u3067\u3042\u308b\u304b\u300d\u3092\u78ba\u8a8d\u3057\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u300c\u4f55\u3092\u3057\u3066\u3088\u3044\u304b\u300d\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c \u8a8d\u8a3c\u30fb\u8a8d\u53ef \u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_7","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>JWT\uff08JSON Web Token\uff09: \u30e6\u30fc\u30b6\u30fc\u306e\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u4fdd\u6301\u3059\u308b\u30c8\u30fc\u30af\u30f3\u5f62\u5f0f\u3002\u3053\u308c\u3092API\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u542b\u3081\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u8b58\u5225\u3067\u304d\u307e\u3059\u3002</li> <li>\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3: \u4e00\u5b9a\u6642\u9593\u6709\u52b9\u306a\u300c\u30ed\u30b0\u30a4\u30f3\u8a3c\u660e\u66f8\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u30c8\u30fc\u30af\u30f3\u304c\u3042\u308b\u9593\u3001\u30ed\u30b0\u30a4\u30f3\u72b6\u614b\u3068\u3057\u3066API\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</li> <li>RBAC (Role-Based Access Control): \u30ed\u30fc\u30eb\uff08\u5f79\u5272\uff09\u306b\u57fa\u3065\u3044\u3066\u30e6\u30fc\u30b6\u30fc\u306e\u6a29\u9650\u3092\u7ba1\u7406\u3059\u308b\u4ed5\u7d44\u307f\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#81-jwt","title":"8.1 JWT\u8a8d\u8a3c\u306e\u5b9f\u88c5","text":"<p><code>python-jose</code> \u3068 <code>passlib[bcrypt]</code> \u3092\u4f7f\u7528\u3057\u3066JWT\u306e\u751f\u6210\u30fb\u691c\u8a3c\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u30cf\u30c3\u30b7\u30e5\u5316\u3092\u884c\u3044\u307e\u3059\u3002</p> <p><code>libkoiki/core/security.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/security.py\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any, Optional, Union, Annotated\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import ValidationError\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import selectinload\nimport structlog\n\nfrom libkoiki.core.config import settings\nfrom libkoiki.schemas.token import TokenPayload\nfrom libkoiki.repositories.user_repository import UserRepository\nfrom libkoiki.db.session import get_db\nfrom libkoiki.models.user import UserModel\nfrom libkoiki.models.role import RoleModel\nfrom libkoiki.models.permission import PermissionModel\n\nlogger = structlog.get_logger(__name__)\n\n# \u30d1\u30b9\u30ef\u30fc\u30c9\u30cf\u30c3\u30b7\u30e5\u5316\u306e\u305f\u3081\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# OAuth2\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30ed\u30fc\u8a2d\u5b9a\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=f\"{settings.API_PREFIX}/auth/login\")\n\ndef create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -&gt; str:\n    \"\"\"\n    \u30e6\u30fc\u30b6\u30fcID\u306a\u3069\u3092subject\u5f15\u6570\u306b\u6307\u5b9a\u3057\u3066JWT\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n    Args:\n        subject: \u901a\u5e38\u306f\u30e6\u30fc\u30b6\u30fcID\n        expires_delta: \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6709\u52b9\u671f\u9650\u3002\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528\n\n    Returns:\n        \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fJWT\u30c8\u30fc\u30af\u30f3\n    \"\"\"\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode = {\"exp\": expire.timestamp(), \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n    logger.debug(\"Access token created\", subject=subject, expires_at=expire.isoformat())\n    return encoded_jwt\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"\u5e73\u6587\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u30cf\u30c3\u30b7\u30e5\u5316\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6bd4\u8f03\u3057\u3066\u4e00\u81f4\u3059\u308b\u304b\u691c\u8a3c\u3057\u307e\u3059\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -&gt; str:\n    \"\"\"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u307e\u3059\"\"\"\n    return pwd_context.hash(password)\n\n# \u30d1\u30b9\u30ef\u30fc\u30c9\u8907\u96d1\u6027\u30c1\u30a7\u30c3\u30af\nimport re\ndef check_password_complexity(password: str) -&gt; bool:\n    \"\"\"\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8907\u96d1\u6027\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u691c\u8a3c\u3057\u307e\u3059\"\"\"\n    if len(password) &lt; 8: return False\n    if not re.search(r\"[a-z]\", password): return False\n    if not re.search(r\"[A-Z]\", password): return False\n    if not re.search(r\"\\d\", password): return False\n    if not re.search(r\"[!@#$%^&amp;*(),.?\\\":{}|&lt;&gt;]\", password): return False\n    return True\n\nasync def get_current_user_from_token(\n    token: Annotated[str, Depends(oauth2_scheme)],\n    db: Annotated[AsyncSession, Depends(get_db)]\n) -&gt; UserModel:\n    \"\"\"\n    JWT\u30c8\u30fc\u30af\u30f3\u3092\u691c\u8a3c\u3057\u3001\u5bfe\u5fdc\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092DB\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002\n    \u30ed\u30fc\u30eb\u3068\u6a29\u9650\u3082 Eager Loading \u3057\u307e\u3059\u3002\n    DB\u30bb\u30c3\u30b7\u30e7\u30f3\u306f\u547c\u3073\u51fa\u3057\u5143 (e.g., dependencies.py) \u3067\u63d0\u4f9b\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n    Args:\n        token: Bearer \u30c8\u30fc\u30af\u30f3\n        db: DB\u30bb\u30c3\u30b7\u30e7\u30f3\n\n    Returns:\n        \u8a8d\u8a3c\u6e08\u307fUserModel\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n    Raises:\n        HTTPException: \u30c8\u30fc\u30af\u30f3\u304c\u7121\u52b9\u304b\u671f\u9650\u5207\u308c\u306e\u5834\u5408\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(\n            token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM]\n        )\n        token_data = TokenPayload(**payload) # \u30da\u30a4\u30ed\u30fc\u30c9\u3092\u30b9\u30ad\u30fc\u30de\u3067\u691c\u8a3c\n\n        # \u6709\u52b9\u671f\u9650\u30c1\u30a7\u30c3\u30af\n        if token_data.exp is None or datetime.fromtimestamp(token_data.exp, timezone.utc) &lt; datetime.now(timezone.utc):\n             logger.warning(\"Token expired\", user_id=token_data.sub, exp=token_data.exp)\n             raise credentials_exception\n\n        # \u30b5\u30d6\u30b8\u30a7\u30af\u30c8 (\u30e6\u30fc\u30b6\u30fcID) \u30c1\u30a7\u30c3\u30af\n        if token_data.sub is None:\n            logger.warning(\"Token subject (user ID) is missing\")\n            raise credentials_exception\n\n        user_id = int(token_data.sub) # ID\u3092\u6574\u6570\u306b\u5909\u63db\n        logger.debug(\"Token decoded successfully\", user_id=user_id)\n\n    except (JWTError, ValidationError) as e:\n        logger.warning(f\"Token validation failed: {e}\", token=token[:10]+\"...\") # \u30c8\u30fc\u30af\u30f3\u306e\u4e00\u90e8\u3060\u3051\u30ed\u30b0\u306b\n        raise credentials_exception\n\n    # \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u3092\u30ed\u30fc\u30eb\u3068\u6a29\u9650\u60c5\u5831\u3082\u542b\u3081\u3066\u53d6\u5f97\n    user_repo = UserRepository()\n    user_repo.set_session(db) # \u6e21\u3055\u308c\u305f db \u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\n    user = await user_repo.get_user_with_roles_permissions(user_id)\n\n    if user is None:\n        logger.warning(\"User specified in token not found in DB\", user_id=user_id)\n        raise credentials_exception\n\n    return user\n\n# \u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nasync def get_current_active_user(\n    current_user: Annotated[UserModel, Depends(get_current_user_from_token)]\n) -&gt; UserModel:\n    if not current_user.is_active:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\")\n    return current_user\n\n# \u7ba1\u7406\u8005\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nasync def get_current_active_superuser(\n    current_user: Annotated[UserModel, Depends(get_current_active_user)]\n) -&gt; UserModel:\n    if not current_user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user doesn't have enough privileges\"\n        )\n    return current_user\n\n# \u4f9d\u5b58\u6027\u6ce8\u5165\u7528\u306e\u30bf\u30a4\u30d7\u30a8\u30a4\u30ea\u30a2\u30b9\nCurrentUserDep = Annotated[UserModel, Depends(get_current_user_from_token)]\nActiveUserDep = Annotated[UserModel, Depends(get_current_active_user)]\nSuperUserDep = Annotated[UserModel, Depends(get_current_active_superuser)]\n</code></pre>"},{"location":"design_kkfw_0.5.0/#82-api","title":"8.2 \u8a8d\u8a3cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8","text":"<p>\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3068\u30c8\u30fc\u30af\u30f3\u767a\u884c\u3092\u884c\u3046 <code>/auth/login</code> \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3002</p> <p><code>libkoiki/api/v1/endpoints/auth.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/api/v1/endpoints/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException, status, Request\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom typing import Annotated\nfrom datetime import timedelta\nimport structlog\n\nfrom libkoiki.schemas.token import Token\nfrom libkoiki.schemas.user import UserCreate, UserResponse\nfrom libkoiki.core.dependencies import get_db\nfrom libkoiki.services.user_service import UserService\nfrom libkoiki.core.security import create_access_token\nfrom libkoiki.core.exceptions import AuthenticationException, ValidationException\nfrom libkoiki.core.rate_limiter import limiter  # \u76f4\u63a5limiter\u3092\u4f7f\u7528\nfrom libkoiki.core.config import settings\nfrom libkoiki.core.dependencies import UserServiceDep\n\nlogger = structlog.get_logger(__name__)\n\nrouter = APIRouter()\n\n# \u30ed\u30b0\u30a4\u30f3\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\uff08\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u4ed8\u304d\uff09\n@router.post(\"/login\", response_model=Token)\n@limiter.limit(\"10/minute\")  # limiter\u3092\u4f7f\u7528\u3057\u305f\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\nasync def login_for_access_token(\n    request: Request,  # \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u7528\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n    db: Annotated[AsyncSession, Depends(get_db)],\n    user_service: UserServiceDep,  # \u30b5\u30fc\u30d3\u30b9\u3092\u6ce8\u5165\n):\n    \"\"\"\n    OAuth2\u4e92\u63db\u306e\u30c8\u30fc\u30af\u30f3\u53d6\u5f97\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3002\n    \u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3092\u884c\u3044\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3057\u307e\u3059\u3002\n\n    Args:\n        form_data: \u30e6\u30fc\u30b6\u30fc\u540d(\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9)\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\n        db: DB\u30bb\u30c3\u30b7\u30e7\u30f3\n        user_service: UserService\n\n    Returns:\n        Token: \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3068\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7\n\n    Raises:\n        HTTPException: \u8a8d\u8a3c\u5931\u6557\u6642\u307e\u305f\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u5834\u5408\n    \"\"\"\n    user = await user_service.authenticate_user(\n        email=form_data.username, password=form_data.password, db=db\n    )\n    if not user:\n        logger.warning(\"Login failed: invalid credentials\", username=form_data.username)\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect email or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    if not user.is_active:\n        logger.warning(\"Login attempt with inactive account\", username=form_data.username, user_id=user.id)\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\")\n\n    # \u30ab\u30b9\u30bf\u30e0\u6709\u52b9\u671f\u9650\u306e\u8a2d\u5b9a\u4f8b (\u30aa\u30d7\u30b7\u30e7\u30f3)\n    # access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    # access_token = create_access_token(subject=user.id, expires_delta=access_token_expires)\n\n    # \u30c7\u30d5\u30a9\u30eb\u30c8\u6709\u52b9\u671f\u9650\u3067\u30c8\u30fc\u30af\u30f3\u4f5c\u6210\n    access_token = create_access_token(subject=user.id)\n    logger.info(\"User logged in successfully\", user_id=user.id, email=user.email)\n\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n# \u30e6\u30fc\u30b6\u30fc\u767b\u9332\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n@router.post(\"/register\", response_model=UserResponse, status_code=status.HTTP_201_CREATED)\n@limiter.limit(\"5/minute\")  # \u767b\u9332\u306f\u4f4e\u3081\u306e\u30ec\u30fc\u30c8\u5236\u9650\nasync def register_user(\n    request: Request,\n    user_in: UserCreate,\n    db: Annotated[AsyncSession, Depends(get_db)],\n    user_service: UserServiceDep,\n):\n    \"\"\"\n    \u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n    \"\"\"\n    try:\n        user = await user_service.create_user(user_in=user_in, db=db)\n        logger.info(\"New user registered\", user_id=user.id, email=user.email)\n        return user\n    except ValidationException as e:\n        logger.warning(\"User registration failed\", error=str(e), email=user_in.email)\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n</code></pre>"},{"location":"design_kkfw_0.5.0/#83-rbac","title":"8.3 \u30ed\u30fc\u30eb\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u5236\u5fa1 (RBAC)","text":"<p>\u30e6\u30fc\u30b6\u30fc\u306b\u30ed\u30fc\u30eb\u3092\u5272\u308a\u5f53\u3066\u3001\u30ed\u30fc\u30eb\u306b\u6a29\u9650\u3092\u7d10\u4ed8\u3051\u308b\u3053\u3068\u3067\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u884c\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f 15. \u30ed\u30fc\u30eb\u3068\u6a29\u9650 \u3092\u53c2\u7167\u3002</p>"},{"location":"design_kkfw_0.5.0/#09-celery-redis","title":"09. \u975e\u540c\u671f\u51e6\u7406\uff08Celery &amp; Redis\uff09","text":"<p>\u975e\u540c\u671f\u51e6\u7406\u3068\u306f\u3001\u300c\u30e6\u30fc\u30b6\u30fc\u306e\u5f85\u3061\u6642\u9593\u3092\u6e1b\u3089\u3059\u300d\u305f\u3081\u306b\u3001\u91cd\u3044\u51e6\u7406\u3092\u88cf\u3067\u884c\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_8","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac","text":"<ul> <li>\u975e\u540c\u671f\u51e6\u7406: \u30e6\u30fc\u30b6\u30fc\u304c\u5f85\u305f\u305a\u306b\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u88cf\u5074\u3067\u5225\u30b9\u30ec\u30c3\u30c9\u3084\u30d7\u30ed\u30bb\u30b9\u3067\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u4ed5\u7d44\u307f\u3002Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30e1\u30fc\u30eb\u9001\u4fe1\u3084\u30ec\u30dd\u30fc\u30c8\u751f\u6210\u306a\u3069\u306b\u4f7f\u7528\u3002</li> <li>Celery: Python\u3067\u5b9a\u756a\u306e\u975e\u540c\u671f\u30bf\u30b9\u30af\u30ad\u30e5\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3002</li> <li>Redis: Celery\u3068\u9023\u643a\u3057\u3001\u30bf\u30b9\u30af\u306e\u5f85\u3061\u884c\u5217\u3092\u7ba1\u7406\u3059\u308b\u5f79\u5272\u3092\u62c5\u3046\u9ad8\u901f\u306a\u30a4\u30f3\u30e1\u30e2\u30ea\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#91-celery","title":"9.1 Celery\u306b\u3088\u308b\u975e\u540c\u671f\u30bf\u30b9\u30af","text":"<p>\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\uff08\u30e1\u30fc\u30eb\u9001\u4fe1\u3001\u30ec\u30dd\u30fc\u30c8\u751f\u6210\u306a\u3069\uff09\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/tasks/celery_app.py</code>:</p> <pre><code># libkoiki/tasks/celery_app.py\nfrom celery import Celery\nfrom libkoiki.core.config import settings\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\ncelery_app = None\nif settings.CELERY_BROKER_URL and settings.CELERY_RESULT_BACKEND:\n    celery_app = Celery(\n        \"worker\", # Celery\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\n        broker=settings.CELERY_BROKER_URL,\n        backend=settings.CELERY_RESULT_BACKEND,\n    )\n    # Autodiscover tasks from installed apps (libkoiki.tasks, app.tasks)\n    # For this to work, tasks modules should be importable.\n    # The list should contain paths to modules where tasks are defined.\n    celery_app.autodiscover_tasks(lambda: ['libkoiki.tasks', 'app.tasks']) # app\u5074\u306e\u30bf\u30b9\u30af\u3082\u63a2\u7d22\n\n    celery_app.conf.update(\n        task_serializer=\"json\",\n        accept_content=[\"json\"],\n        result_serializer=\"json\",\n        timezone=getattr(settings, 'TIMEZONE', \"UTC\"), # settings\u306bTIMEZONE\u304c\u3042\u308c\u3070\u4f7f\u7528\n        enable_utc=True,\n        worker_prefetch_multiplier=1,\n        task_acks_late=True, # \u30e1\u30c3\u30bb\u30fc\u30b8\u306eACK\u3092\u30bf\u30b9\u30af\u5b8c\u4e86\u5f8c\u306b\u3059\u308b\n    )\n\n    logger.info(\"Celery application initialized successfully\")\nelse:\n    logger.warning(\"Celery broker or backend URL not configured. Celery tasks disabled.\")\n\n# @celery_app.on_after_configure.connect\n# def setup_periodic_tasks(sender, **kwargs):\n    # sender.add_periodic_task(10.0, some_task.s('hello'), name='add every 10')\n</code></pre> <p><code>libkoiki/tasks/example_task.py</code> (\u5171\u901a\u30bf\u30b9\u30af\u4f8b):</p> <pre><code># libkoiki/tasks/example_task.py\nfrom libkoiki.tasks.celery_app import celery_app # celery_app\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\nif celery_app: # celery_app\u304cNone\u3067\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\n    @celery_app.task(name=\"libkoiki.tasks.add\") # \u30bf\u30b9\u30af\u540d\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3068\u826f\u3044\n    def add(x: int, y: int) -&gt; int:\n        logger.info(f\"Task 'add' called with x={x}, y={y}\")\n        return x + y\n\n    @celery_app.task(name=\"libkoiki.tasks.send_email_example\")\n    def send_email_example(to_email: str, subject: str, body: str):\n        logger.info(f\"Simulating email send to {to_email} with subject '{subject}'\")\n        # \u5b9f\u969b\u306e\u30e1\u30fc\u30eb\u9001\u4fe1\u30ed\u30b8\u30c3\u30af (\u4f8b: smtplib \u3084\u5916\u90e8\u30e1\u30fc\u30eb\u30b5\u30fc\u30d3\u30b9API)\n        import time\n        time.sleep(5) # \u30e1\u30fc\u30eb\u9001\u4fe1\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n        logger.info(f\"Email to {to_email} sent successfully.\")\n        return {\"status\": \"success\", \"to_email\": to_email}\nelse:\n    # Celery\u304c\u7121\u52b9\u306a\u5834\u5408\u306e\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3084\u8b66\u544a\n    def add(x: int, y: int) -&gt; int:\n        logger.warning(\"Celery is not configured. Task 'add' is running synchronously.\")\n        return x + y\n    def send_email_example(to_email: str, subject: str, body: str):\n        logger.warning(\"Celery is not configured. Task 'send_email_example' is running synchronously.\")\n        # \u540c\u671f\u7684\u306b\u5b9f\u884c\u3059\u308b\u7c21\u6613\u7248\n        logger.info(f\"Simulating synchronous email send to {to_email}\")\n        return {\"status\": \"success\", \"to_email\": to_email, \"mode\": \"synchronous\"}\n</code></pre> <p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30bf\u30b9\u30af\u306f <code>app/tasks/</code> \u306b\u914d\u7f6e\u3057\u307e\u3059\u3002 <code>app/tasks/__init__.py</code> \u3092\u4f5c\u6210\u3057\u3001<code>app.tasks.your_task_module</code> \u306e\u3088\u3046\u306bCelery\u304c\u691c\u51fa\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#92","title":"9.2 \u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0 (\u30aa\u30d7\u30b7\u30e7\u30f3)","text":"<p>Redis Pub/Sub \u3092\u5229\u7528\u3057\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u30b5\u30fc\u30d3\u30b9\u5c64\u3067\u30d3\u30b8\u30cd\u30b9\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u884c\u3057\u3001\u5225\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\uff09\u304c\u305d\u308c\u3092\u8cfc\u8aad\u3057\u3066\u975e\u540c\u671f\u306b\u51e6\u7406\u3057\u307e\u3059\u3002 v0.3.0 \u306e <code>libkoiki/events/</code> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5b9f\u88c5 (EventPublisher, EventHandler) \u306a\u3069\u3092\u53c2\u8003\u306b\u5c0e\u5165\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#93-celery","title":"9.3 Celery\u306e\u672c\u756a\u904b\u7528\u306b\u95a2\u3059\u308b\u8003\u616e\u4e8b\u9805","text":"<ul> <li>\u30ea\u30c8\u30e9\u30a4\u6226\u7565: \u30bf\u30b9\u30af\u5931\u6557\u6642\u306e\u81ea\u52d5\u30ea\u30c8\u30e9\u30a4\uff08<code>autoretry_for</code>, <code>retry_kwargs</code>, <code>max_retries</code>\u306a\u3069\uff09\u3002</li> <li>\u76e3\u8996: Flower\u306a\u3069\u306e\u30c4\u30fc\u30eb\u3067\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u72b6\u6cc1\u3001\u30ad\u30e5\u30fc\u306e\u9577\u3055\u3092\u76e3\u8996\u3002Prometheus\u3068\u9023\u643a\u3057\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6\u3002</li> <li>\u30ef\u30fc\u30ab\u7ba1\u7406: Supervisor\u3084Systemd\u3067\u30ef\u30fc\u30ab\u30d7\u30ed\u30bb\u30b9\u3092\u30c7\u30fc\u30e2\u30f3\u5316\u3057\u3001\u81ea\u52d5\u518d\u8d77\u52d5\u3092\u8a2d\u5b9a\u3002\u8ca0\u8377\u306b\u5fdc\u3058\u305f\u30ef\u30fc\u30ab\u6570\u306e\u8abf\u6574\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff09\u3002</li> <li>\u30c7\u30c3\u30c9\u30ec\u30bf\u30fc\u30ad\u30e5\u30fc: \u51e6\u7406\u306b\u5931\u6557\u3057\u7d9a\u3051\u308b\u30bf\u30b9\u30af\u3092\u9694\u96e2\u3059\u308b\u4ed5\u7d44\u307f\u3002</li> <li>\u51aa\u7b49\u6027: \u30bf\u30b9\u30af\u304c\u8907\u6570\u56de\u5b9f\u884c\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u8a2d\u8a08\uff08\u7279\u306b\u30ea\u30c8\u30e9\u30a4\u6642\uff09\u3002</li> <li>\u30bf\u30b9\u30af\u306e\u5206\u5272: \u9577\u6642\u9593\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\u306f\u3001\u5c0f\u3055\u306a\u30b5\u30d6\u30bf\u30b9\u30af\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3092\u691c\u8a0e\u3002</li> <li>\u7d50\u679c\u30d0\u30c3\u30af\u30a8\u30f3\u30c9: \u7d50\u679c\u304c\u4e0d\u8981\u306a\u30bf\u30b9\u30af\u3067\u306f\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u8a2d\u5b9a\u3092\u7701\u7565\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u3002\u5fc5\u8981\u306a\u5834\u5408\u3067\u3082\u3001\u7d50\u679c\u306eTTL\u3092\u8a2d\u5b9a\u3057\u3066Redis\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u6291\u3048\u308b\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#10-app","title":"10. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\u4f8b\u3068\u8d77\u52d5\u65b9\u6cd5 (app/)","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001<code>libkoiki</code> \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5229\u7528\u3057\u3066\u3001\u5177\u4f53\u7684\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 (<code>app/</code> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b) \u3092\u3069\u306e\u3088\u3046\u306b\u69cb\u7bc9\u3059\u308b\u304b\u306e\u4f8b\u3068\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306aToDo\u7ba1\u7406\u30a2\u30d7\u30ea\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#101-appmainpy","title":"10.1 app/main.py","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3002FastAPI\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u521d\u671f\u5316\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306e\u8a2d\u5b9a\u3001\u30eb\u30fc\u30bf\u30fc\u306e\u767b\u9332\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002</p> <pre><code># app/main.py\nfrom contextlib import asynccontextmanager\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom slowapi import _rate_limit_exceeded_handler # slowapi \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\nfrom slowapi.errors import RateLimitExceeded\nfrom slowapi.middleware import SlowAPIMiddleware\nimport redis.asyncio as aioredis # redis.asyncio \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport structlog\n\nfrom libkoiki.core.config import settings\nfrom libkoiki.core.logging import setup_logging, get_logger\nfrom libkoiki.core.error_handlers import setup_exception_handlers\nfrom libkoiki.db.session import connect_db, disconnect_db\nfrom libkoiki.core.rate_limiter import limiter\n# from libkoiki.core.monitoring import setup_monitoring # Prometheus\u4f7f\u3046\u5834\u5408\n# from libkoiki.core.middleware import SecurityHeadersMiddleware, AuditLogMiddleware # \u5fc5\u8981\u306a\u3089\n\n# \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30eb\u30fc\u30bf\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom app.routers import todo_router # ToDo\u30eb\u30fc\u30bf\u30fc\n\nlogger = get_logger(__name__) # \u30ed\u30ac\u30fc\u3092\u53d6\u5f97\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # --- \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u6642 ---\n    setup_logging(\n        log_level_str=settings.LOG_LEVEL,\n        app_env=settings.APP_ENV,\n        debug=settings.DEBUG\n    )\n    logger.info(f\"Starting application: {settings.APP_NAME} in {settings.APP_ENV} mode\")\n\n    await connect_db() # DB\u63a5\u7d9a\u78ba\u8a8d\n\n    # Redis\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u521d\u671f\u5316 (\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3001Pub/Sub\u7528)\n    if settings.REDIS_URL:\n        try:\n            # aioredis.from_url \u306f aioredis.Redis.from_url \u306b\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308b\n            app.state.redis = aioredis.Redis.from_url(settings.REDIS_URL, encoding=\"utf-8\", decode_responses=True)\n            await app.state.redis.ping() # \u63a5\u7d9a\u78ba\u8a8d\n            logger.info(\"Redis connection successful.\")\n        except Exception as e:\n            logger.error(f\"Redis connection failed: {e}\", exc_info=True)\n            app.state.redis = None # \u5931\u6557\u3057\u305f\u5834\u5408\u306fNone\u306b\u8a2d\u5b9a\n    else:\n        app.state.redis = None\n        logger.warning(\"Redis URL not configured. Redis client not initialized.\")\n\n    # \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30bf\u30fc\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u306b\u8a2d\u5b9a\n    app.state.limiter = limiter\n    app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler) # slowapi\u30c7\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\n    # \u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3068\u3057\u3066\u9069\u7528\u3059\u308b\u5834\u5408\n    # app.add_middleware(SlowAPIMiddleware)\n    logger.info(f\"Rate limiter initialized (Strategy: {limiter.strategy}).\")\n\n    # setup_monitoring(app) # Prometheus\u30e1\u30c8\u30ea\u30af\u30b9\u8a2d\u5b9a (\u6709\u52b9\u306b\u3059\u308b\u5834\u5408)\n\n    yield # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\n\n    # --- \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642 ---\n    if hasattr(app.state, 'redis') and app.state.redis:\n        await app.state.redis.close()\n        logger.info(\"Redis connection closed.\")\n    await disconnect_db()\n    logger.info(\"Application shutdown.\")\n\napp = FastAPI(\n    title=settings.APP_NAME,\n    debug=settings.DEBUG,\n    lifespan=lifespan # lifespan\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u767b\u9332\n)\n\n# \u30b0\u30ed\u30fc\u30d0\u30eb\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u30fc\u8a2d\u5b9a\nsetup_exception_handlers(app)\n\n# \u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u8a2d\u5b9a\n# from libkoiki.core.middleware import AuditLogMiddleware, SecurityHeadersMiddleware # \u30a4\u30f3\u30dd\u30fc\u30c8\n# app.add_middleware(AuditLogMiddleware) # \u76e3\u67fb\u30ed\u30b0 (DB\u30a2\u30af\u30bb\u30b9\u306b\u6ce8\u610f)\n# app.add_middleware(SecurityHeadersMiddleware) # \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0\nif settings.BACKEND_CORS_ORIGINS:\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], # \u6587\u5b57\u5217\u30ea\u30b9\u30c8\u306b\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n\n# API\u30eb\u30fc\u30bf\u30fc\u767b\u9332\n# \u8a8d\u8a3c\u30eb\u30fc\u30bf\u30fc\u306f libkoiki \u306b\u542b\u307e\u308c\u308b\u3082\u306e\u3092\u4f7f\u7528\nfrom libkoiki.api.v1.endpoints import auth\napp.include_router(auth.router, prefix=f\"{settings.API_PREFIX}/auth\", tags=[\"Authentication\"]) \n\n# \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30eb\u30fc\u30bf\u30fc\napp.include_router(todo_router.router, prefix=f\"{settings.API_PREFIX}/todos\", tags=[\"Todos\"]) \n\n@app.get(\"/health\", tags=[\"Health Check\"])\nasync def health_check():\n    return {\"status\": \"ok\", \"message\": \"Application is healthy\"}\n\n# Celery\u3092\u4f7f\u3046\u5834\u5408\u3001celery_app\u3092FastAPI\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b (\u30aa\u30d7\u30b7\u30e7\u30f3)\nfrom libkoiki.tasks.celery_app import celery_app\napp.state.celery_app = celery_app\n\n# if __name__ == \"__main__\":\n# import uvicorn\n# uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"design_kkfw_0.5.0/#102-approuterstodo_routerpy","title":"10.2 app/routers/todo_router.py","text":"<p>ToDo API\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002<code>libkoiki</code> \u306e\u5171\u901a\u4f9d\u5b58\u6027\u3084 <code>app</code> \u56fa\u6709\u306e\u4f9d\u5b58\u6027\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code># app/routers/todo_router.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import List, Annotated\nimport structlog\n\nfrom libkoiki.core.dependencies import DBSessionDep\nfrom libkoiki.core.security import ActiveUserDep # \u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\nfrom libkoiki.models.user import UserModel # UserModel\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\nfrom app.schemas.todo_schema import TodoCreateSchema, TodoUpdateSchema, TodoResponseSchema\nfrom app.services.todo_service import TodoService # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30b5\u30fc\u30d3\u30b9\nfrom app.api.dependencies import get_todo_service # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306eDI\n\nlogger = structlog.get_logger(__name__)\nrouter = APIRouter()\nTodoServiceDep = Annotated[TodoService, Depends(get_todo_service)]\n\n@router.post(\"/\", response_model=TodoResponseSchema, status_code=status.HTTP_201_CREATED)\nasync def create_todo_endpoint(\n    todo_in: TodoCreateSchema,\n    db: DBSessionDep,\n    todo_service: TodoServiceDep,\n    current_user: ActiveUserDep, # \u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u4f5c\u6210\u53ef\u80fd\n):\n    \"\"\"\u65b0\u3057\u3044ToDo\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u8a8d\u8a3c\u304c\u5fc5\u8981\u3067\u3059\u3002\"\"\"\n    logger.info(\"Creating new todo\", user_id=current_user.id)\n    return await todo_service.create_todo(todo_data=todo_in, db=db, owner_id=current_user.id)\n\n@router.get(\"/\", response_model=List[TodoResponseSchema])\nasync def get_todos_endpoint(\n    db: DBSessionDep,\n    todo_service: TodoServiceDep,\n    current_user: ActiveUserDep, # \u81ea\u5206\u306eToDo\u306e\u307f\u53d6\u5f97\n    skip: int = 0,\n    limit: int = 100,\n):\n    \"\"\"\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306eToDo\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n    logger.debug(\"Fetching todos for user\", user_id=current_user.id, skip=skip, limit=limit)\n    return await todo_service.get_todos_by_owner(owner_id=current_user.id, db=db, skip=skip, limit=limit)\n\n@router.get(\"/{todo_id}\", response_model=TodoResponseSchema)\nasync def get_todo_by_id_endpoint(\n    todo_id: int,\n    db: DBSessionDep,\n    todo_service: TodoServiceDep,\n    current_user: ActiveUserDep,\n):\n    \"\"\"\u6307\u5b9a\u3055\u308c\u305fID\u306eToDo\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306eToDo\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\"\"\"\n    todo = await todo_service.get_todo_by_id_and_owner(todo_id=todo_id, owner_id=current_user.id, db=db)\n    if not todo:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Todo not found or not authorized\")\n    return todo\n\n@router.put(\"/{todo_id}\", response_model=TodoResponseSchema)\nasync def update_todo_endpoint(\n    todo_id: int,\n    todo_in: TodoUpdateSchema,\n    db: DBSessionDep,\n    todo_service: TodoServiceDep,\n    current_user: ActiveUserDep,\n):\n    \"\"\"\u6307\u5b9a\u3055\u308c\u305fID\u306eToDo\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306eToDo\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\"\"\"\n    updated_todo = await todo_service.update_todo(\n        todo_id=todo_id, todo_data=todo_in, db=db, owner_id=current_user.id\n    )\n    if not updated_todo:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Todo not found or not authorized\")\n    return updated_todo\n\n@router.delete(\"/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo_endpoint(\n    todo_id: int,\n    db: DBSessionDep,\n    todo_service: TodoServiceDep,\n    current_user: ActiveUserDep,\n):\n    \"\"\"\u6307\u5b9a\u3055\u308c\u305fID\u306eToDo\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u8a8d\u8a3c\u30e6\u30fc\u30b6\u30fc\u306eToDo\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\"\"\"\n    deleted = await todo_service.delete_todo(todo_id=todo_id, db=db, owner_id=current_user.id)\n    if not deleted:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Todo not found or not authorized\")\n    return None # No content\n</code></pre>"},{"location":"design_kkfw_0.5.0/#103-appservicestodo_servicepy","title":"10.3 app/services/todo_service.py","text":"<p>ToDo\u306b\u95a2\u9023\u3059\u308b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002<code>libkoiki</code>\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30c7\u30b3\u30ec\u30fc\u30bf\u306a\u3069\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code># app/services/todo_service.py\nfrom typing import List, Optional, Sequence\nfrom sqlalchemy.ext.asyncio import AsyncSession\nimport structlog\n\nfrom libkoiki.core.transaction import transactional\nfrom libkoiki.core.exceptions import ResourceNotFoundException, AuthorizationException # \u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom app.repositories.todo_repository import TodoRepository\nfrom app.models.todo_model import TodoModel\nfrom app.schemas.todo_schema import TodoCreateSchema, TodoUpdateSchema\n\nlogger = structlog.get_logger(__name__)\n\nclass TodoService:\n    def __init__(self, repository: TodoRepository):\n        self.repository = repository\n\n    @transactional\n    async def create_todo(self, todo_data: TodoCreateSchema, db: AsyncSession, owner_id: int) -&gt; TodoModel:\n        self.repository.set_session(db)\n        # owner_id\u3092TodoModel\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3059\n        todo = TodoModel(**todo_data.dict(), owner_id=owner_id)\n        created_todo = await self.repository.create(todo)\n        logger.info(\"Todo created\", todo_id=created_todo.id, owner_id=owner_id)\n        return created_todo\n\n    async def get_todos_by_owner(\n        self, owner_id: int, db: AsyncSession, skip: int = 0, limit: int = 100\n    ) -&gt; Sequence[TodoModel]:\n        self.repository.set_session(db)\n        return await self.repository.get_multi_by_owner(owner_id=owner_id, skip=skip, limit=limit)\n\n    async def get_todo_by_id_and_owner(\n        self, todo_id: int, owner_id: int, db: AsyncSession\n    ) -&gt; Optional[TodoModel]:\n        self.repository.set_session(db)\n        todo = await self.repository.get(todo_id)\n        if not todo:\n            logger.warning(\"Todo not found\", todo_id=todo_id)\n            return None # \u30eb\u30fc\u30bf\u30fc\u3067404\u51e6\u7406\n        if todo.owner_id != owner_id:\n            logger.warning(\"Todo access denied - ownership mismatch\", todo_id=todo_id, requested_by=owner_id, owner_id=todo.owner_id)\n            return None # \u30eb\u30fc\u30bf\u30fc\u3067404\u307e\u305f\u306f403\u51e6\u7406\n        return todo\n\n    @transactional\n    async def update_todo(\n        self, todo_id: int, todo_data: TodoUpdateSchema, db: AsyncSession, owner_id: int\n    ) -&gt; Optional[TodoModel]:\n        self.repository.set_session(db)\n        todo = await self.repository.get(todo_id) # \u307e\u305a\u53d6\u5f97\n        if not todo:\n            logger.warning(\"Todo not found for update\", todo_id=todo_id)\n            return None\n        if todo.owner_id != owner_id: # \u6240\u6709\u8005\u30c1\u30a7\u30c3\u30af\n            logger.warning(\"Todo update denied - ownership mismatch\", todo_id=todo_id, requested_by=owner_id, owner_id=todo.owner_id)\n            return None # Not authorized\n\n        update_data = todo_data.dict(exclude_unset=True)\n        updated_todo = await self.repository.update(todo, update_data) # \u53d6\u5f97\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\n        logger.info(\"Todo updated\", todo_id=todo_id, owner_id=owner_id)\n        return updated_todo\n\n    @transactional\n    async def delete_todo(self, todo_id: int, db: AsyncSession, owner_id: int) -&gt; bool:\n        self.repository.set_session(db)\n        todo = await self.repository.get(todo_id) # \u307e\u305a\u53d6\u5f97\n        if not todo:\n            logger.warning(\"Todo not found for deletion\", todo_id=todo_id)\n            return False\n        if todo.owner_id != owner_id: # \u6240\u6709\u8005\u30c1\u30a7\u30c3\u30af\n            logger.warning(\"Todo deletion denied - ownership mismatch\", todo_id=todo_id, requested_by=owner_id, owner_id=todo.owner_id)\n            return False # Not authorized\n\n        await self.repository.delete(todo_id) # ID\u3067\u524a\u9664 (delete\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u306b\u3088\u308b)\n        logger.info(\"Todo deleted\", todo_id=todo_id, owner_id=owner_id)\n        return True\n</code></pre>"},{"location":"design_kkfw_0.5.0/#104-apprepositoriestodo_repositorypy","title":"10.4 app/repositories/todo_repository.py","text":"<p>ToDo\u30e2\u30c7\u30eb\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002<code>libkoiki</code>\u306e<code>BaseRepository</code>\u3092\u7d99\u627f\u3067\u304d\u307e\u3059\u3002</p> <pre><code># app/repositories/todo_repository.py\nfrom typing import Optional, Sequence\nfrom sqlalchemy.future import select\n\nfrom libkoiki.repositories.base import BaseRepository\nfrom app.models.todo_model import TodoModel\nfrom app.schemas.todo_schema import TodoCreateSchema, TodoUpdateSchema # \u30b9\u30ad\u30fc\u30de\u306f\u76f4\u63a5\u4f7f\u308f\u306a\u3044\u3053\u3068\u304c\u591a\u3044\n\nclass TodoRepository(BaseRepository[TodoModel, TodoCreateSchema, TodoUpdateSchema]):\n    def __init__(self):\n        super().__init__(TodoModel) # \u64cd\u4f5c\u5bfe\u8c61\u306e\u30e2\u30c7\u30eb\u3092\u6e21\u3059\n\n    async def get_multi_by_owner(\n        self, owner_id: int, skip: int = 0, limit: int = 100\n    ) -&gt; Sequence[TodoModel]:\n        \"\"\"\u6307\u5b9a\u3055\u308c\u305fowner_id\u3092\u6301\u3064ToDo\u3092\u8907\u6570\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        result = await self.db.execute(\n            select(self.model) # self.model (TodoModel) \u3092\u4f7f\u7528\n            .where(self.model.owner_id == owner_id)\n            .offset(skip)\n            .limit(limit)\n            .order_by(self.model.id) # \u4f8b: ID\u3067\u30bd\u30fc\u30c8\n        )\n        return result.scalars().all()\n</code></pre>"},{"location":"design_kkfw_0.5.0/#105-appmodelstodo_modelpy","title":"10.5 app/models/todo_model.py","text":"<p>ToDo\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002<code>libkoiki</code>\u306e<code>Base</code>\u3092\u7d99\u627f\u3057\u307e\u3059\u3002</p> <pre><code># app/models/todo_model.py\nfrom sqlalchemy import Column, String, Boolean, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\n\nfrom libkoiki.db.base import Base # libkoiki\u306eBase\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\nclass TodoModel(Base): # libkoiki\u306eBase\u3092\u7d99\u627f\n    # __tablename__ = \"todos\" # CustomBase\u3067\u81ea\u52d5\u8a2d\u5b9a\u3055\u308c\u308b\n\n    title = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    completed = Column(Boolean, default=False)\n\n    # UserModel\u306e\u4e3b\u30ad\u30fc\u3092\u53c2\u7167\u3059\u308b\u5916\u90e8\u30ad\u30fc\n    owner_id = Column(Integer, ForeignKey(\"usermodel.id\")) # \"usermodel\" \u306fUserModel\u306e\u30c6\u30fc\u30d6\u30eb\u540d\n\n    # UserModel\u5074\u306b\u3082\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    # owner = relationship(\"UserModel\", back_populates=\"todos\")\n</code></pre> <p>\u6ce8\u610f: \u53cc\u65b9\u5411\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001<code>libkoiki/models/user.py</code> \u306e <code>UserModel</code> \u306b\u3082 <code>todos = relationship(\"TodoModel\", back_populates=\"owner\")</code> \u306e\u3088\u3046\u306a\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#106-appschemastodo_schemapy","title":"10.6 app/schemas/todo_schema.py","text":"<p>ToDo\u306ePydantic\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <pre><code># app/schemas/todo_schema.py\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\nfrom datetime import datetime\n\nclass TodoBaseSchema(BaseModel):\n    title: str = Field(..., min_length=1, max_length=100, description=\"ToDo\u306e\u30bf\u30a4\u30c8\u30eb\")\n    description: Optional[str] = Field(None, max_length=500, description=\"ToDo\u306e\u8a73\u7d30\u8aac\u660e\")\n\nclass TodoCreateSchema(TodoBaseSchema):\n    pass # \u57fa\u672c\u7684\u306bBase\u3068\u540c\u3058\u3060\u304c\u3001\u4f5c\u6210\u6642\u7279\u6709\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u3042\u308c\u3070\u8ffd\u52a0\n\nclass TodoUpdateSchema(BaseModel): # \u66f4\u65b0\u6642\u306f\u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u304c\u4e00\u822c\u7684\n    title: Optional[str] = Field(None, min_length=1, max_length=100)\n    description: Optional[str] = Field(None, max_length=500)\n    completed: Optional[bool] = None\n\nclass TodoResponseSchema(TodoBaseSchema):\n    id: int\n    completed: bool\n    owner_id: int # \u3069\u306e\u30e6\u30fc\u30b6\u30fc\u306eToDo\u304b\u3092\u793a\u3059\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        orm_mode = True # SQLAlchemy\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u306e\u5909\u63db\u3092\u8a31\u53ef\n</code></pre>"},{"location":"design_kkfw_0.5.0/#107-appapidependenciespy","title":"10.7 app/api/dependencies.py (\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u4f9d\u5b58\u6027)","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u4f9d\u5b58\u6027\uff08DI\uff09\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <pre><code># app/api/dependencies.py\nfrom typing import Annotated\nfrom fastapi import Depends\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom libkoiki.core.dependencies import DBSessionDep\nfrom app.services.todo_service import TodoService\nfrom app.repositories.todo_repository import TodoRepository\n\ndef get_todo_repository() -&gt; TodoRepository:\n    \"\"\"ToDo\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u4f9d\u5b58\u6027\u95a2\u6570\u3002\"\"\"\n    return TodoRepository()\n\ndef get_todo_service(\n    # \u30ea\u30dd\u30b8\u30c8\u30ea\u3092DI\u3067\u6ce8\u5165\n    repo: Annotated[TodoRepository, Depends(get_todo_repository)],\n    # DB\u30bb\u30c3\u30b7\u30e7\u30f3\u306f\u30b5\u30fc\u30d3\u30b9\u5185\u3067\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u4e0d\u8981\n) -&gt; TodoService:\n    \"\"\"ToDo\u30b5\u30fc\u30d3\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u4f9d\u5b58\u6027\u95a2\u6570\u3002\"\"\"\n    return TodoService(repository=repo)\n</code></pre>"},{"location":"design_kkfw_0.5.0/#108-alembic","title":"10.8 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (Alembic)","text":"<p>Alembic\u304c <code>app/models/</code> \u5185\u306e\u30e2\u30c7\u30eb\u3082\u8a8d\u8b58\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <p><code>alembic/env.py</code> \u306e\u4fee\u6b63\u7b87\u6240: <code>env.py</code> \u306e\u5192\u982d\u3067\u3001<code>libkoiki</code> \u3068 <code>app</code> \u306e\u4e21\u65b9\u306e\u30e2\u30c7\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <pre><code># alembic/env.py \u306e\u4e0a\u90e8 (sys.path\u306e\u8a2d\u5b9a\u306a\u3069\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u76f4\u5f8c)\n# ...\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u3092Python\u30d1\u30b9\u306b\u8ffd\u52a0 (alembic\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081)\nimport os\nimport sys\nsys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), \"..\")))\n\n# libkoiki \u306e\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066Alembic\u306b\u8a8d\u8b58\u3055\u305b\u308b\nimport libkoiki.models.user # \u4f8b\nimport libkoiki.models.role # \u4f8b\nimport libkoiki.models.permission # \u4f8b\nimport libkoiki.models.associations # \u4f8b\n\n# app \u306e\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066Alembic\u306b\u8a8d\u8b58\u3055\u305b\u308b\nimport app.models.todo_model # \u4f8b\n\n# target_metadata \u306e\u8a2d\u5b9a\nfrom libkoiki.db.base import Base # \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u5171\u6709\u3055\u308c\u308bBase\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\ntarget_metadata = Base.metadata\n# ...\n</code></pre> <p>Alembic\u304c\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u305f\u3081\u306b\u306f\u3001<code>alembic.ini</code> \u306e <code>sqlalchemy.url</code> \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3001\u305d\u3057\u3066 <code>env.py</code> \u5185\u3067 <code>target_metadata</code> \u304c\u5168\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u542b\u3080\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 <code>libkoiki.db.base.Base</code> \u304c <code>app</code> \u5074\u3067\u3082\u5171\u901a\u3057\u3066\u4f7f\u308f\u308c\u3066\u3044\u308c\u3070\u3001<code>target_metadata = Base.metadata</code> \u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30b3\u30de\u30f3\u30c9: - <code>alembic revision --autogenerate -m \"create_todos_table\"</code> - <code>alembic upgrade head</code></p>"},{"location":"design_kkfw_0.5.0/#109","title":"10.9 \u8d77\u52d5\u65b9\u6cd5","text":"<pre><code># \u4f9d\u5b58\u95a2\u4fc2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u3067)\n# pip install -r requirements.txt (\u3082\u3057\u3042\u308c\u3070)\npoetry install # poetry\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n# pip install \".[dev]\" (pyproject.toml\u306bdev\u4f9d\u5b58\u304c\u3042\u308b\u5834\u5408)\n\n# .env\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210 (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u306b.env.example\u3092\u30b3\u30d4\u30fc\u3057\u3066\u7de8\u96c6)\n# SECRET_KEY \u3068 JWT_SECRET \u3092\u5fc5\u305a\u8a2d\u5b9a\uff01\ncp .env.example .env\nnano .env # \u307e\u305f\u306f\u4efb\u610f\u306e\u30a8\u30c7\u30a3\u30bf\u3067\u7de8\u96c6\n\n# DB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068)\nalembic upgrade head\n\n# FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5 (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u304b\u3089)\nuvicorn app.main:app --reload --host 0.0.0.0 --port 8000\n\n# Celery Worker \u8d77\u52d5 (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u304b\u3089\u3001Celery\u8a2d\u5b9a\u304c\u6709\u52b9\u306a\u5834\u5408)\n# .env\u30d5\u30a1\u30a4\u30eb\u3067 CELERY_BROKER_URL \u3068 CELERY_RESULT_BACKEND \u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3053\u3068\ncelery -A libkoiki.tasks.celery_app worker --loglevel=info\n</code></pre> <p>Docker Compose \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408:</p> <pre><code># (docker-compose.yml \u304c\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u524d\u63d0)\ndocker-compose up --build\n</code></pre> <p><code>docker-compose.yml</code> \u3067\u306f\u3001FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001PostgreSQL\u3001Redis\u3001Celery\u30ef\u30fc\u30ab\u3092\u5404\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#11","title":"11. \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u4f8b\u5916\u51e6\u7406","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5168\u4f53\u3067\u4e00\u8cab\u6027\u306e\u3042\u308b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u63d0\u4f9b\u3057\u3001\u30c7\u30d0\u30c3\u30b0\u3092\u5bb9\u6613\u306b\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#111","title":"11.1 \u30ab\u30b9\u30bf\u30e0\u4f8b\u5916","text":"<p>\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u3092\u793a\u3059\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916\u3002</p> <p><code>libkoiki/core/exceptions.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/exceptions.py\nfrom fastapi import HTTPException, status\nfrom typing import Optional\n\nclass BaseAppException(HTTPException): # FastAPI\u306eHTTPException\u3092\u7d99\u627f\n    def __init__(self, status_code: int, detail: str, error_code: Optional[str] = None, headers: Optional[dict] = None):\n        super().__init__(status_code=status_code, detail=detail, headers=headers)\n        self.error_code = error_code if error_code else self.__class__.__name__.upper().replace(\"EXCEPTION\", \"_ERROR\")\n\nclass ResourceNotFoundException(BaseAppException):\n    def __init__(self, resource_name: str, resource_id: any, detail: Optional[str] = None):\n        detail_msg = detail or f\"{resource_name} with ID '{resource_id}' not found.\"\n        super().__init__(status_code=status.HTTP_404_NOT_FOUND, detail=detail_msg, error_code=\"RESOURCE_NOT_FOUND\")\n\nclass ValidationException(BaseAppException): # \u30d3\u30b8\u30cd\u30b9\u30eb\u30fc\u30eb\u9055\u53cd\u7528\n    def __init__(self, detail: str, error_code: Optional[str] = \"BUSINESS_VALIDATION_ERROR\"): # Pydantic\u306e\u3068\u306f\u533a\u5225\n        super().__init__(status_code=status.HTTP_400_BAD_REQUEST, detail=detail, error_code=error_code)\n\nclass AuthenticationException(BaseAppException):\n    def __init__(self, detail: str = \"Authentication failed.\", error_code: Optional[str] = \"AUTHENTICATION_FAILED\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail, error_code=error_code, headers={\"WWW-Authenticate\": \"Bearer\"})\n\nclass AuthorizationException(BaseAppException):\n    def __init__(self, detail: str = \"Not authorized to perform this action.\", error_code: Optional[str] = \"AUTHORIZATION_FAILED\"):\n        super().__init__(status_code=status.HTTP_403_FORBIDDEN, detail=detail, error_code=error_code)\n\nclass ConflictException(BaseAppException): # \u4f8b: \u91cd\u8907\u4f5c\u6210\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306a\u3069\n    def __init__(self, detail: str = \"Resource conflict.\", error_code: Optional[str] = \"CONFLICT_ERROR\"):\n        super().__init__(status_code=status.HTTP_409_CONFLICT, detail=detail, error_code=error_code)\n</code></pre>"},{"location":"design_kkfw_0.5.0/#112","title":"11.2 \u30b0\u30ed\u30fc\u30d0\u30eb\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u30fc","text":"<p>\u7279\u5b9a\u306e\u4f8b\u5916\u3092\u88dc\u8db3\u3057\u3001\u7d71\u4e00\u3055\u308c\u305fJSON\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/error_handlers.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/error_handlers.py\nfrom fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError # Pydantic\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\nfrom sqlalchemy.exc import SQLAlchemyError, IntegrityError, NoResultFound\nfrom slowapi.errors import RateLimitExceeded # slowapi\u306e\u4f8b\u5916\nimport structlog\n\nfrom libkoiki.core.exceptions import BaseAppException, ResourceNotFoundException, ValidationException as BusinessValidationException\n\nlogger = structlog.get_logger(__name__)\n\nasync def base_app_exception_handler(request: Request, exc: BaseAppException):\n    \"\"\"\u30ab\u30b9\u30bf\u30e0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f8b\u5916\u306e\u6c4e\u7528\u30cf\u30f3\u30c9\u30e9\"\"\"\n    error_code = getattr(exc, \"error_code\", \"APPLICATION_ERROR\") # error_code\u304c\u3042\u308c\u3070\u4f7f\u7528\n    log_extra = {\"error_code\": error_code, \"status_code\": exc.status_code, \"path\": str(request.url)}\n\n    # \u30a8\u30e9\u30fc\u306e\u6df1\u523b\u5ea6\u306b\u5fdc\u3058\u3066\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u8abf\u6574\n    if exc.status_code == status.HTTP_404_NOT_FOUND:\n        logger.info(f\"Application Exception (NotFound): {exc.detail}\", extra=log_extra, exc_info=False)\n    elif exc.status_code // 100 == 4: # 4xx\u7cfb\u30a8\u30e9\u30fc\n        logger.warning(f\"Application Exception (ClientError): {exc.detail}\", extra=log_extra, exc_info=False)\n    else: # 5xx\u7cfb\u30a8\u30e9\u30fc\u3084\u4e88\u671f\u305b\u306c\u3082\u306e\n        logger.error(f\"Application Exception (ServerError): {exc.detail}\", extra=log_extra, exc_info=True)\n\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail, \"error_code\": error_code},\n        headers=getattr(exc, \"headers\", None), # \u30d8\u30c3\u30c0\u30fc\u304c\u3042\u308c\u3070\u4ed8\u4e0e\n    )\n\nasync def pydantic_validation_exception_handler(request: Request, exc: RequestValidationError):\n    \"\"\"FastAPI\u306ePydantic\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9\"\"\"\n    logger.warning(f\"Pydantic Request Validation Error at {request.method} {request.url.path}: {exc.errors()}\", extra={\"error_details\": exc.errors(), \"path\": str(request.url)})\n    # \u30a8\u30e9\u30fc\u8a73\u7d30\u3092\u6574\u5f62\u3057\u3066\u8fd4\u3059\u3053\u3068\u3082\u53ef\u80fd\n    # errors = [{\"loc\": e[\"loc\"], \"msg\": e[\"msg\"], \"type\": e[\"type\"]} for e in exc.errors()]\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\"detail\": exc.errors(), \"error_code\": \"PYDANTIC_VALIDATION_ERROR\"}, # FastAPI\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8fd1\u3044\u5f62\u5f0f\n    )\n\nasync def db_exception_handler(request: Request, exc: SQLAlchemyError):\n    \"\"\"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u6c4e\u7528\u30cf\u30f3\u30c9\u30e9\"\"\"\n    error_code = \"DB_OPERATION_ERROR\"\n    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR\n    detail = \"An unexpected database error occurred.\"\n\n    if isinstance(exc, IntegrityError): # \u4e00\u610f\u6027\u5236\u7d04\u9055\u53cd\u306a\u3069\n        status_code = status.HTTP_409_CONFLICT # 409 Conflict\u306e\u65b9\u304c\u9069\u5207\n        detail = \"Database integrity constraint violated. Resource might already exist or a foreign key constraint failed.\"\n        error_code = \"DB_INTEGRITY_ERROR\"\n        logger.warning(f\"Database Integrity Error: {exc}\", exc_info=False, extra={\"error_code\": error_code, \"path\": str(request.url)})\n    elif isinstance(exc, NoResultFound): # SQLAlchemy 2.0 \u306e .one() \u306a\u3069\u3067\u767a\u751f\n        status_code = status.HTTP_404_NOT_FOUND\n        detail = \"The requested database record was not found.\"\n        error_code = \"DB_NO_RESULT_FOUND\"\n        logger.info(f\"Database NoResultFound Error: {exc}\", exc_info=False, extra={\"error_code\": error_code, \"path\": str(request.url)})\n    else: # \u305d\u306e\u4ed6\u306e SQLAlchemyError\n        logger.error(f\"Unhandled Database Error: {exc}\", exc_info=True, extra={\"error_code\": error_code, \"path\": str(request.url)})\n\n    return JSONResponse(status_code=status_code, content={\"detail\": detail, \"error_code\": error_code})\n\nasync def generic_exception_handler(request: Request, exc: Exception):\n    \"\"\"\u305d\u306e\u4ed6\u306e\u4e88\u671f\u305b\u306c\u30a8\u30e9\u30fc\u306e\u305f\u3081\u306e\u6700\u7d42\u9632\u885b\u30e9\u30a4\u30f3\u30cf\u30f3\u30c9\u30e9\"\"\"\n    logger.error(f\"Unhandled Generic Exception at {request.method} {request.url.path}: {exc}\", exc_info=True, extra={\"path\": str(request.url)})\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={\"detail\": \"An unexpected internal server error occurred. Please try again later.\", \"error_code\": \"UNHANDLED_INTERNAL_SERVER_ERROR\"},\n    )\n\ndef setup_exception_handlers(app: FastAPI):\n    \"\"\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u4e3b\u8981\u306a\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u767b\u9332\u3059\u308b\"\"\"\n    app.add_exception_handler(BaseAppException, base_app_exception_handler) # \u30ab\u30b9\u30bf\u30e0\u30a2\u30d7\u30ea\u4f8b\u5916\n    app.add_exception_handler(RequestValidationError, pydantic_validation_exception_handler) # Pydantic\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\n    app.add_exception_handler(SQLAlchemyError, db_exception_handler) # DB\u30a8\u30e9\u30fc\n    # RateLimitExceeded \u306f app.main \u306e lifespan \u3067 slowapi \u306e _rate_limit_exceeded_handler \u3092\u767b\u9332\n    app.add_exception_handler(Exception, generic_exception_handler) # \u6700\u3082\u6c4e\u7528\u7684\u306a\u30cf\u30f3\u30c9\u30e9\u3092\u6700\u5f8c\u306b\u767b\u9332\n    logger.info(\"Global exception handlers configured.\")\n</code></pre> <p><code>app/main.py</code> \u306e <code>FastAPI</code> \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u5f8c\u306b <code>setup_exception_handlers(app)</code> \u3092\u547c\u3073\u51fa\u3057\u3066\u767b\u9332\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#12","title":"12. \u30ed\u30ae\u30f3\u30b0\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u52d5\u4f5c\u72b6\u6cc1\u3092\u628a\u63e1\u3057\u3001\u554f\u984c\u767a\u751f\u6642\u306e\u8abf\u67fb\u3092\u5bb9\u6613\u306b\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_9","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30ed\u30ae\u30f3\u30b0)","text":"<ul> <li>\u30ed\u30ae\u30f3\u30b0: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6319\u52d5\u3092\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u4e0d\u5177\u5408\u306e\u8abf\u67fb\u3084\u904b\u7528\u76e3\u8996\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</li> <li>structlog: Python\u306e\u69cb\u9020\u5316\u30ed\u30ae\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u3002JSON\u5f62\u5f0f\u306a\u3069\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3057\u3001\u6a5f\u68b0\u7684\u306a\u51e6\u7406\u3092\u5bb9\u6613\u306b\u3059\u308b\u3002</li> <li>\u76e3\u67fb\u30ed\u30b0: \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e0a\u91cd\u8981\u306a\u64cd\u4f5c\uff08\u8ab0\u304c\u3001\u3044\u3064\u3001\u4f55\u3092\u3057\u305f\u304b\uff09\u3092\u8a18\u9332\u3059\u308b\u30ed\u30b0\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#121-structlog","title":"12.1 \u30ed\u30ae\u30f3\u30b0\u8a2d\u5b9a (structlog)","text":"<p><code>structlog</code> \u3068\u6a19\u6e96 <code>logging</code> \u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u69cb\u9020\u5316\u30ed\u30b0\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/logging.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/logging.py\nimport logging\nimport sys\nimport structlog\nfrom structlog.types import Processor\nfrom typing import Optional\n\ndef setup_logging(log_level_str: str = \"INFO\", app_env: str = \"development\", debug: bool = False):\n    \"\"\"structlog \u3092\u4f7f\u7528\u3057\u3066\u30ed\u30ae\u30f3\u30b0\u3092\u8a2d\u5b9a\"\"\"\n    log_level = getattr(logging, log_level_str.upper(), logging.INFO)\n\n    # structlog\u306e\u5171\u901a\u30d7\u30ed\u30bb\u30c3\u30b5\u30c1\u30a7\u30fc\u30f3\n    shared_processors: list[Processor] = [\n        structlog.contextvars.merge_contextvars, # contextvars\u304b\u3089\u306e\u60c5\u5831\u3092\u30de\u30fc\u30b8 (\u30ea\u30af\u30a8\u30b9\u30c8ID\u306a\u3069)\n        structlog.stdlib.add_logger_name,        # \u30ed\u30ac\u30fc\u540d (module\u540d) \u3092\u8ffd\u52a0\n        structlog.stdlib.add_log_level,          # \u30ed\u30b0\u30ec\u30d9\u30eb (INFO, ERROR\u306a\u3069) \u3092\u8ffd\u52a0\n        structlog.stdlib.PositionalArgumentsFormatter(), # %s\u5f62\u5f0f\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5bfe\u5fdc\n        structlog.processors.StackInfoRenderer(),      # \u30b9\u30bf\u30c3\u30af\u60c5\u5831\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0 (\u30aa\u30d7\u30b7\u30e7\u30f3)\n        structlog.processors.format_exc_info,          # \u4f8b\u5916\u60c5\u5831\u3092\u6574\u5f62\n        structlog.processors.TimeStamper(fmt=\"iso\", utc=True), # ISO\u5f62\u5f0f\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 (UTC)\n    ]\n\n    # \u74b0\u5883\u306b\u5fdc\u3058\u305f\u6700\u7d42\u7684\u306a\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3092\u9078\u629e\n    if app_env == \"development\" or debug:\n        # \u958b\u767a\u74b0\u5883: \u4eba\u9593\u304c\u8aad\u307f\u3084\u3059\u3044\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n        final_processor = structlog.dev.ConsoleRenderer()\n    else:\n        # \u672c\u756a\u74b0\u5883: JSON\u5f62\u5f0f\u3067\u51fa\u529b (\u30ed\u30b0\u96c6\u7d04\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a\u3092\u60f3\u5b9a)\n        final_processor = structlog.processors.JSONRenderer()\n        # \u30ad\u30fc\u306e\u9806\u756a\u3092\u56fa\u5b9a\u3057\u305f\u3044\u5834\u5408\u306a\u3069\n        # final_processor = structlog.processors.JSONRenderer(serializer=json.dumps, sort_keys=True)\n\n    # structlog \u3068\u6a19\u6e96 logging \u3092\u9023\u643a\u3055\u305b\u308b\u8a2d\u5b9a\n    structlog.configure(\n        processors=shared_processors + [\n            structlog.stdlib.ProcessorFormatter.wrap_for_formatter, # \u6a19\u6e96logging\u30cf\u30f3\u30c9\u30e9\u7528\u30e9\u30c3\u30d1\u30fc\n        ],\n        logger_factory=structlog.stdlib.LoggerFactory(), # \u6a19\u6e96logging\u306eLogger\u3092\u751f\u6210\n        wrapper_class=structlog.stdlib.BoundLogger,    # \u6a19\u6e96logging\u306eLogger\u4e92\u63db\u306eBoundLogger\n        cache_logger_on_first_use=True,\n    )\n\n    # \u6a19\u6e96logging\u306e\u30eb\u30fc\u30c8\u30ed\u30ac\u30fc\u8a2d\u5b9a\n    # \u3053\u308c\u306b\u3088\u308a\u3001structlog\u7d4c\u7531\u3060\u3051\u3067\u306a\u304f\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea(\u4f8b: SQLAlchemy)\u304b\u3089\u306e\u30ed\u30b0\u3082\u540c\u3058\u5f62\u5f0f\u3067\u51fa\u529b\u3055\u308c\u308b\n    formatter = structlog.stdlib.ProcessorFormatter(\n        processor=final_processor, # \u6700\u7d42\u7684\u306a\u51fa\u529b\u5f62\u5f0f\n        foreign_pre_chain=shared_processors, # structlog\u4ee5\u5916\u306e\u30ed\u30b0\u306b\u9069\u7528\u3059\u308b\u30d7\u30ed\u30bb\u30c3\u30b5\n    )\n\n    handler = logging.StreamHandler(sys.stdout) # \u6a19\u6e96\u51fa\u529b\u3078\n    handler.setFormatter(formatter)\n\n    root_logger = logging.getLogger()\n    # Uvicorn\u306a\u3069\u304c\u65e2\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u30cf\u30f3\u30c9\u30e9\u3092\u30af\u30ea\u30a2\u3059\u308b\u5834\u5408\n    # for h in root_logger.handlers[:]:\n    #     root_logger.removeHandler(h)\n    root_logger.addHandler(handler)\n    root_logger.setLevel(log_level) # \u30eb\u30fc\u30c8\u30ed\u30ac\u30fc\u306e\u30ed\u30b0\u30ec\u30d9\u30eb\n\n    # \u7279\u5b9a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u8abf\u6574\n    logging.getLogger(\"uvicorn.access\").setLevel(logging.WARNING if not debug else logging.INFO)\n    logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.WARNING if not debug else logging.INFO)\n\n    logger = structlog.get_logger(\"logging_setup\") # \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306e\u30ed\u30ac\u30fc\n    logger.info(\"Logging configured successfully.\", log_level=log_level_str, app_env=app_env, debug_mode=debug)\n\ndef get_logger(name: Optional[str] = None) -&gt; structlog.stdlib.BoundLogger:\n    \"\"\"structlog\u30ed\u30ac\u30fc\u3092\u53d6\u5f97\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\"\"\"\n    # __name__ \u3092\u6e21\u3059\u3068\u3001\u547c\u3073\u51fa\u3057\u5143\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3067\u30ed\u30ac\u30fc\u304c\u53d6\u5f97\u3055\u308c\u308b\n    return structlog.get_logger(name if name else __name__)\n\n# \u76e3\u67fb\u30ed\u30b0\u7528\u30ed\u30ac\u30fc\u8a2d\u5b9a (\u30aa\u30d7\u30b7\u30e7\u30f3\u3001\u5fc5\u8981\u306a\u3089\u5225\u306e\u8a2d\u5b9a\u95a2\u6570\u3092\u4f5c\u6210)\n# def setup_audit_logger():\n#     audit_handler = logging.FileHandler(\"audit.log\") # \u4f8b: \u76e3\u67fb\u30ed\u30b0\u5c02\u7528\u30d5\u30a1\u30a4\u30eb\n#     audit_formatter = structlog.stdlib.ProcessorFormatter(\n#         processor=structlog.processors.JSONRenderer(), # \u76e3\u67fb\u30ed\u30b0\u306fJSON\u5f62\u5f0f\u63a8\u5968\n#         foreign_pre_chain=shared_processors\n#     )\n#     audit_handler.setFormatter(audit_formatter)\n#     audit_log_instance = logging.getLogger(\"audit\") # \"audit\" \u3068\u3044\u3046\u540d\u524d\u306e\u30ed\u30ac\u30fc\n#     audit_log_instance.addHandler(audit_handler)\n#     audit_log_instance.setLevel(logging.INFO)\n#     audit_log_instance.propagate = False # \u30eb\u30fc\u30c8\u30ed\u30ac\u30fc\u306b\u4f1d\u64ad\u3055\u305b\u306a\u3044\n#     return structlog.wrap_logger(audit_log_instance)\n</code></pre> <p><code>app/main.py</code> \u306e <code>lifespan</code> \u5185\u3067 <code>setup_logging(settings.LOG_LEVEL, settings.APP_ENV, settings.DEBUG)</code> \u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#122","title":"12.2 \u76e3\u67fb\u30ed\u30b0","text":"<p>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e0a\u91cd\u8981\u306a\u64cd\u4f5c\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3067\u57fa\u672c\u7684\u306a\u60c5\u5831\u3092\u8a18\u9332\u3057\u3001\u30b5\u30fc\u30d3\u30b9\u5c64\u3067\u8a73\u7d30\u60c5\u5831\u3092\u88dc\u8db3\u3067\u304d\u307e\u3059\u3002</p> <p><code>libkoiki/core/middleware.py</code> \u306b\u76e3\u67fb\u30ed\u30b0\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306e\u4f8b:</p> <pre><code># libkoiki/core/middleware.py (\u7d9a\u304d)\n        # \u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u30ed\u30b0\u8a18\u9332\u306f\u30c7\u30fc\u30bf\u91cf\u3068\u6a5f\u5bc6\u6027\u306b\u6ce8\u610f\u3057\u3066\u9078\u629e\u7684\u306b\u884c\u3046\n        # if request.method in [\"POST\", \"PUT\", \"PATCH\"] and \"application/json\" in request.headers.get(\"content-type\", \"\"):\n        #     try:\n        #         req_body_bytes = await request.body()\n        #         # request.stream() \u3092\u6d88\u8cbb\u3059\u308b\u3068\u5f8c\u7d9a\u51e6\u7406\u3067\u8aad\u3081\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u518d\u5ea6\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3059\u308b\n        #         request._stream = lambda: asyncio.BytesIO(req_body_bytes)\n        #         if req_body_bytes: # \u6a5f\u5bc6\u60c5\u5831\u306f\u30de\u30b9\u30ad\u30f3\u30b0\u51e6\u7406\u304c\u5fc5\u8981\n        #             try:\n        #                 req_json = json.loads(req_body_bytes.decode('utf-8'))\n        #                 # \u30d1\u30b9\u30ef\u30fc\u30c9\u306a\u3069\u306e\u6a5f\u5bc6\u60c5\u5831\u3092\u30de\u30b9\u30af\n        #                 if 'password' in req_json:\n        #                     req_json['password'] = '***MASKED***'\n        #                 log_entry[\"request_body\"] = req_json\n        #             except json.JSONDecodeError:\n        #                 log_entry[\"request_body\"] = \"[Non-JSON body]\"\n        #     except Exception as e:\n        #         log_entry[\"request_body_error\"] = str(e)\n\n        audit_logger.info(\"API request processed\", **log_entry) # \u69cb\u9020\u5316\u30ed\u30b0\u3068\u3057\u3066\u51fa\u529b\n        return response\n</code></pre> <p><code>app/main.py</code> \u3067 <code>app.add_middleware(AuditLogMiddleware)</code> \u3068\u3057\u3066\u767b\u9332\u3002</p>"},{"location":"design_kkfw_0.5.0/#123","title":"12.3 \u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306b\u3088\u308b\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0 (\u30ea\u30af\u30a8\u30b9\u30c8\u30ed\u30b0)","text":"<p>HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u57fa\u672c\u60c5\u5831\u3092\u30ed\u30b0\u51fa\u529b\u3057\u307e\u3059\u3002<code>structlog</code> \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001Uvicorn\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092 <code>structlog</code> \u3067\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u65b9\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 (<code>uvicorn.run(..., access_log=True)</code> \u3068 <code>logging.getLogger(\"uvicorn.access\").handlers = [...]</code>) Uvicorn\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 <code>INFO</code> \u30ec\u30d9\u30eb\u3067\u51fa\u529b\u3055\u308c\u308b\u305f\u3081\u3001<code>libkoiki/core/logging.py</code> \u3067 <code>uvicorn.access</code> \u30ed\u30ac\u30fc\u306e\u30ec\u30d9\u30eb\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_10","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0)","text":"<ul> <li>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u52d5\u4f5c\u72b6\u614b\uff08\u8ca0\u8377\u3001\u5fdc\u7b54\u6642\u9593\u3001\u7570\u5e38\u767a\u751f\u306a\u3069\uff09\u3092\u5e38\u6642\u89b3\u6e2c\u3059\u308b\u3053\u3068\u3002</li> <li>Prometheus: \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u76e3\u8996\u30c4\u30fc\u30eb\u3002\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u30fb\u4fdd\u5b58\u3057\u3001\u30a2\u30e9\u30fc\u30c8\u3092\u767a\u884c\u3067\u304d\u308b\u3002</li> <li>\u30e1\u30c8\u30ea\u30af\u30b9: \u76e3\u8996\u5bfe\u8c61\u306e\u6570\u5024\u30c7\u30fc\u30bf\uff08\u4f8b: \u30ea\u30af\u30a8\u30b9\u30c8\u6570\u3001\u30a8\u30e9\u30fc\u7387\u3001CPU\u4f7f\u7528\u7387\uff09\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#124-prometheus","title":"12.4 Prometheus \u30e1\u30c8\u30ea\u30af\u30b9","text":"<p><code>prometheus-fastapi-instrumentator</code> \u3092\u4f7f\u7528\u3057\u3066Prometheus\u5f62\u5f0f\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u516c\u958b\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/monitoring.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/monitoring.py\nfrom fastapi import FastAPI\nfrom prometheus_fastapi_instrumentator import Instrumentator\nimport structlog\n\n# \u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u4f8b (\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5b9a\u7fa9)\n# from prometheus_client import Counter\n# user_creations_total = Counter(\n#     \"koiki_user_creations_total\", # \u30e1\u30c8\u30ea\u30af\u30b9\u540d (\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u826f\u3044)\n#     \"Total number of users created through the API.\"\n# )\n\nlogger = structlog.get_logger(__name__)\n\ndef setup_monitoring(app: FastAPI):\n    \"\"\"FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306bPrometheus Instrumentator\u3092\u8a2d\u5b9a\u3057\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u516c\u958b\u3059\u308b\"\"\"\n\n    instrumentator = Instrumentator(\n        should_group_status_codes=True,   # \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u30b0\u30eb\u30fc\u30d7\u5316 (2xx, 3xx \u306a\u3069)\n        should_instrument_requests_inprogress=True, # \u73fe\u5728\u51e6\u7406\u4e2d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u3092\u8a08\u6e2c\n        excluded_handlers=[\"/metrics\", \"/health\"],  # /metrics \u3084 /health \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u81ea\u4f53\u306f\u8a08\u6e2c\u5bfe\u8c61\u5916\n        inprogress_name=\"fastapi_requests_inprogress\", # \u51e6\u7406\u4e2d\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u540d\n        inprogress_labels=True, # \u51e6\u7406\u4e2d\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u4e0e\u3059\u308b\u304b\n    )\n\n    # FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306bInstrumentator\u3092\u9069\u7528\u3057\u3001\n    # /metrics \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u516c\u958b\u3059\u308b\n    instrumentator.instrument(app).expose(\n        app, \n        include_in_schema=False, # OpenAPI\u30b9\u30ad\u30fc\u30de\u306b/metrics\u3092\u542b\u3081\u306a\u3044\n        should_gzip=True         # \u30ec\u30b9\u30dd\u30f3\u30b9\u3092gzip\u5727\u7e2e\u3059\u308b\u304b\n    )\n\n    # \u6a19\u6e96\u3067\u8ffd\u52a0\u3055\u308c\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u4f8b:\n    # - fastapi_requests_total (\u30cf\u30f3\u30c9\u30e9\u3001\u30e1\u30bd\u30c3\u30c9\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u5225\u30ea\u30af\u30a8\u30b9\u30c8\u7dcf\u6570)\n    # - fastapi_requests_latency_seconds (\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u9593\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0/\u30b5\u30de\u30ea)\n    # - fastapi_request_size_bytes (\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u30b5\u30a4\u30ba\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0/\u30b5\u30de\u30ea)\n    # - fastapi_response_size_bytes (\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u30b5\u30a4\u30ba\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0/\u30b5\u30de\u30ea)\n    # - fastapi_requests_inprogress (\u51e6\u7406\u4e2d\u30ea\u30af\u30a8\u30b9\u30c8\u6570)\n\n    logger.info(\"Prometheus monitoring configured. Metrics available at /metrics\")\n\n# \u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u4f8b (\u30b5\u30fc\u30d3\u30b9\u5c64\u306a\u3069\u3067\u4f7f\u7528)\n# def increment_user_creation_counter():\n#     user_creations_total.inc()\n</code></pre> <p><code>app/main.py</code> \u306e <code>lifespan</code> \u5185\u3067 <code>setup_monitoring(app)</code> \u3092\u547c\u3073\u51fa\u3059\u3002 \u307e\u305f\u3001\u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u8a72\u5f53\u3059\u308b\u51e6\u7406\u7b87\u6240\u3067 <code>increment_user_creation_counter()</code> \u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#13","title":"13. \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3","text":"<p>Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4fdd\u8b77\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#v050","title":"\ud83d\udea8 v0.5.0 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8","text":"<p>KOIKI-FW v0.5.0\u3067\u306f\u3001\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63\u304c\u5b9f\u65bd\u3055\u308c\u307e\u3057\u305f\uff1a</p> <p>\u4fee\u6b63\u3055\u308c\u305f\u8106\u5f31\u6027: - fastapi: 0.104.1 \u2192 0.115.13 (\u4fee\u6b63: PYSEC-2024-38) - python-jose: 3.3.0 \u2192 3.5.0 (\u4fee\u6b63: PYSEC-2024-232, PYSEC-2024-233) - starlette: 0.27.0 \u2192 0.46.2 (\u4fee\u6b63: GHSA-f96h-pmfr-66vw)</p> <p>\u305d\u306e\u4ed6\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5f37\u5316: - Python 3.13\u5bfe\u5fdc\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd\u306e\u5f37\u5316 - \u4f9d\u5b58\u95a2\u4fc2\u5168\u4f53\u306e\u6700\u65b0\u5316\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u306e\u8efd\u6e1b - \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u76e3\u67fb\u30c4\u30fc\u30eb (pip-audit, bandit) \u306e\u5c0e\u5165</p>"},{"location":"design_kkfw_0.5.0/#_11","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4e00\u822c)","text":"<ul> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u3084\u30c7\u30fc\u30bf\u6f0f\u6d29\u304b\u3089\u5b88\u308b\u305f\u3081\u306e\u6280\u8853\u5168\u822c\u3002</li> <li>\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8: \u4e00\u5b9a\u6642\u9593\u5185\u306b\u8a31\u53ef\u3055\u308c\u308bAPI\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u3092\u5236\u9650\u3057\u3001\u7dcf\u5f53\u305f\u308a\u653b\u6483\u3084DoS\u653b\u6483\u3092\u9632\u3050\u3002</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0: \u30d6\u30e9\u30a6\u30b6\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u3057\u3001XSS\u3084\u30af\u30ea\u30c3\u30af\u30b8\u30e3\u30c3\u30ad\u30f3\u30b0\u306a\u3069\u306e\u653b\u6483\u3092\u7de9\u548c\u3059\u308bHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u3002</li> <li>\u5165\u529b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3: \u4e0d\u6b63\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306b\u3088\u308b\u8106\u5f31\u6027\u3092\u9632\u3050\u305f\u3081\u3001\u5165\u529b\u5024\u3092\u691c\u8a3c\u30fb\u7121\u5bb3\u5316\u3059\u308b\u3053\u3068\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#131-slowapi","title":"13.1 \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8 (slowapi)","text":"<p><code>slowapi</code> \u3092\u4f7f\u7528\u3057\u3066API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u3092\u5236\u9650\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/rate_limiter.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># libkoiki/core/rate_limiter.py\nfrom slowapi import Limiter\nfrom slowapi.util import get_remote_address\nfrom libkoiki.core.config import settings\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\n# \u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30bf\u30fc\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nlimiter = Limiter(\n    key_func=get_remote_address,  # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8IP\u3067\u30ec\u30fc\u30c8\u5236\u9650\n    default_limits=[settings.RATE_LIMIT_DEFAULT],  # \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5236\u9650\uff08\u8a2d\u5b9a\u304b\u3089\uff09\n    enabled=settings.RATE_LIMIT_ENABLED,  # \u6709\u52b9/\u7121\u52b9\u8a2d\u5b9a\n    strategy=settings.RATE_LIMIT_STRATEGY  # \u5236\u9650\u6226\u7565\uff08\u4f8b: fixed-window\uff09\n)\n\nlogger.debug(\n    \"Rate limiter initialized\", \n    enabled=settings.RATE_LIMIT_ENABLED, \n    default_limits=settings.RATE_LIMIT_DEFAULT,\n    strategy=settings.RATE_LIMIT_STRATEGY\n)\n\n# \u4f7f\u7528\u4f8b:\n# 1. \u30b0\u30ed\u30fc\u30d0\u30eb\u9069\u7528\uff08app.add_middleware(SlowAPIMiddleware)\uff09\n# 2. \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5358\u4f4d\u3067\u9069\u7528:\n#    @router.post(\"/\")\n#    @limiter.limit(\"5/minute\")\n#    async def create_item(...):\n#        ...\n</code></pre>"},{"location":"design_kkfw_0.5.0/#132","title":"13.2 \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d8\u30c3\u30c0","text":"<p>\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\u3057\u3066HTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u95a2\u9023\u30d8\u30c3\u30c0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/core/middleware.py</code> \u306b <code>SecurityHeadersMiddleware</code> \u306e\u4f8b:</p> <pre><code># libkoiki/core/middleware.py\n# (AuditLogMiddleware \u3068\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u3082\u826f\u3044)\nfrom starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint\nfrom starlette.requests import Request\nfrom starlette.responses import Response\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\nclass SecurityHeadersMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -&gt; Response:\n        response = await call_next(request)\n\n        # HTTPS\u3092\u5f37\u5236 (HSTS)\n        response.headers[\"Strict-Transport-Security\"] = \"max-age=31536000; includeSubDomains\"\n\n        # Content Type Sniffing \u9632\u6b62\n        response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n\n        # \u30af\u30ea\u30c3\u30af\u30b8\u30e3\u30c3\u30ad\u30f3\u30b0\u9632\u6b62\n        response.headers[\"X-Frame-Options\"] = \"DENY\" # \u307e\u305f\u306f \"SAMEORIGIN\"\n\n        # \u30ea\u30d5\u30a1\u30e9\u30dd\u30ea\u30b7\u30fc (\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u5411\u4e0a)\n        response.headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\" # \u63a8\u5968\u5024\u306e\u4e00\u3064\n\n        # Content-Security-Policy (CSP) \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306b\u5408\u308f\u305b\u3066\u614e\u91cd\u306b\u8a2d\u5b9a\n        # \u4f8b: \u30a4\u30f3\u30e9\u30a4\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\u3084eval\u3092\u7981\u6b62\u3057\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3084\u30b9\u30bf\u30a4\u30eb\u306f\u540c\u4e00\u30aa\u30ea\u30b8\u30f3\u304b\u3089\u306e\u307f\u8a31\u53ef\n        # response.headers[\"Content-Security-Policy\"] = \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; object-src 'none'; frame-ancestors 'none';\"\n\n        # Permissions-Policy (\u65e7 Feature-Policy) - \u30d6\u30e9\u30a6\u30b6\u6a5f\u80fd\u3078\u306e\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\n        # \u4f8b: \u30de\u30a4\u30af\u3001\u30ab\u30e1\u30e9\u3001\u4f4d\u7f6e\u60c5\u5831\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7121\u52b9\u5316\n        # response.headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\"\n\n        return response\n</code></pre> <p><code>app/main.py</code> \u3067 <code>app.add_middleware(SecurityHeadersMiddleware)</code> \u3068\u3057\u3066\u767b\u9332\u3002CSP\u306e\u8a2d\u5b9a\u306f\u7279\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3001\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306e\u69cb\u6210\u3084\u4f7f\u7528\u3059\u308b\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u306b\u3088\u3063\u3066\u9069\u5207\u306b\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#133","title":"13.3 \u5165\u529b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<ul> <li>Pydantic: API\u5c64\u3067\u306e\u578b\u30c1\u30a7\u30c3\u30af\u3068\u5f62\u5f0f\u691c\u8a3c\uff08\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3001URL\u3001\u6570\u5024\u7bc4\u56f2\u306a\u3069\uff09\u3002\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3067 <code>Field</code> \u3092\u4f7f\u3063\u3066\u8a73\u7d30\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\uff08\u6700\u5c0f/\u6700\u5927\u9577\u3001\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306a\u3069\uff09\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002</li> <li>\u30b5\u30fc\u30d3\u30b9\u5c64: \u30d3\u30b8\u30cd\u30b9\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u305f\u3088\u308a\u8907\u96d1\u306a\u691c\u8a3c\uff08\u4f8b: \u95a2\u9023\u30c7\u30fc\u30bf\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3001\u72b6\u614b\u9077\u79fb\u306e\u59a5\u5f53\u6027\uff09\u3002\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916 (<code>ValidationException</code>) \u3067\u30a8\u30e9\u30fc\u3092\u660e\u793a\u7684\u306b\u901a\u77e5\u3057\u307e\u3059\u3002</li> <li>\u30b5\u30cb\u30bf\u30a4\u30ba:<ul> <li>SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3: SQLAlchemy\u306a\u3069\u306eORM\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u30af\u30a8\u30ea\uff08\u30d7\u30ea\u30da\u30a2\u30c9\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\uff09\u3092\u5185\u90e8\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u9069\u5207\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308c\u3070\u9632\u5fa1\u3067\u304d\u307e\u3059\u3002\u751f\u306eSQL\u3092\u4f7f\u3046\u5834\u5408\u306f\u5fc5\u305a\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u307e\u3059\u3002</li> <li>XSS (\u30af\u30ed\u30b9\u30b5\u30a4\u30c8\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0):<ul> <li>API\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066JSON\u3092\u8fd4\u3059\u5834\u5408\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\uff08\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\uff09\u304cHTML\u306b\u30c7\u30fc\u30bf\u3092\u57cb\u3081\u8fbc\u3080\u969b\u306e\u51e6\u7406\u304c\u91cd\u8981\u3067\u3059\u3002React, Vue\u306a\u3069\u306e\u30e2\u30c0\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u57fa\u672c\u7684\u306b\u5b89\u5168\u306a\u65b9\u6cd5\u3067\u30c7\u30fc\u30bf\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002</li> <li>\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067HTML\u3092\u751f\u6210\u3059\u308b\u5834\u5408\uff08Jinja2\u306a\u3069\uff09\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30f3\u30b8\u30f3\u304c\u63d0\u4f9b\u3059\u308b\u81ea\u52d5\u30a8\u30b9\u30b1\u30fc\u30d7\u6a5f\u80fd\u3092\u5fc5\u305a\u6709\u52b9\u306b\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u305d\u306e\u4ed6: \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u7a2e\u985e\u3001\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e\u5f15\u6570\u306a\u3069\u3001\u30e6\u30fc\u30b6\u30fc\u5165\u529b\u3092\u5143\u306b\u3059\u308b\u5834\u5408\u306f\u5e38\u306b\u691c\u8a3c\u3068\u7121\u5bb3\u5316\u3092\u884c\u3044\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"design_kkfw_0.5.0/#_12","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30d1\u30b9\u30ef\u30fc\u30c9\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3)","text":"<ul> <li>\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc: \u5b89\u5168\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u8a2d\u5b9a\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u5f37\u5236\u3059\u308b\u305f\u3081\u306e\u898f\u5247\u7fa4\uff08\u9577\u3055\u3001\u6587\u5b57\u7a2e\u306a\u3069\uff09\u3002</li> <li>\u30cf\u30c3\u30b7\u30e5\u5316: \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5143\u306e\u5024\u306b\u623b\u305b\u306a\u3044\uff08\u307e\u305f\u306f\u6975\u3081\u3066\u56f0\u96e3\u306a\uff09\u4e00\u65b9\u5411\u95a2\u6570\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u3002\u4fdd\u5b58\u6642\u306f\u5fc5\u305a\u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li>\u30bd\u30eb\u30c8: \u30cf\u30c3\u30b7\u30e5\u5316\u306e\u969b\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u6bce\u306b\u4ed8\u52a0\u3055\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u306a\u30c7\u30fc\u30bf\u3002\u540c\u3058\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u3082\u7570\u306a\u308b\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u751f\u6210\u3055\u308c\u3001\u30ec\u30a4\u30f3\u30dc\u30fc\u30c6\u30fc\u30d6\u30eb\u653b\u6483\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#134","title":"13.4 \u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc","text":"<p>\u5b89\u5168\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u8a2d\u5b9a\u3092\u5f37\u5236\u3057\u307e\u3059\u3002</p> <ul> <li>\u5b9f\u88c5: \u30d1\u30b9\u30ef\u30fc\u30c9\u8a2d\u5b9a\u30fb\u5909\u66f4API\u3092\u53d7\u3051\u4ed8\u3051\u308b\u30b5\u30fc\u30d3\u30b9\u5c64 (<code>UserService</code>) \u3067\u30dd\u30ea\u30b7\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u30d8\u30eb\u30d1\u30fc\u95a2\u6570: <code>libkoiki/core/security.py</code> \u306e <code>check_password_complexity</code> \u3067\u57fa\u672c\u7684\u306a\u8907\u96d1\u6027\uff08\u9577\u3055\u3001\u6587\u5b57\u7a2e\uff09\u3092\u30c1\u30a7\u30c3\u30af\u3002</li> <li>\u30dd\u30ea\u30b7\u30fc\u4f8b:<ul> <li>\u6700\u5c0f\u6587\u5b57\u6570\uff08\u4f8b: 12\u6587\u5b57\u4ee5\u4e0a\u3092\u63a8\u5968\uff09</li> <li>\u6587\u5b57\u7a2e\uff08\u5927\u6587\u5b57\u3001\u5c0f\u6587\u5b57\u3001\u6570\u5b57\u3001\u8a18\u53f7\u3092\u305d\u308c\u305e\u308c1\u3064\u4ee5\u4e0a\u542b\u3080\uff09</li> <li>\u3088\u304f\u4f7f\u308f\u308c\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7981\u6b62\uff08\u8f9e\u66f8\u653b\u6483\u5bfe\u7b56\u3001Have I Been Pwned API\u9023\u643a\u306a\u3069\uff09</li> <li>\u30d1\u30b9\u30ef\u30fc\u30c9\u5c65\u6b74\uff08\u904e\u53bbN\u56de\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u518d\u5229\u7528\u7981\u6b62\uff09</li> <li>\u30a2\u30ab\u30a6\u30f3\u30c8\u30ed\u30c3\u30af\u30a2\u30a6\u30c8\uff08\u30ed\u30b0\u30a4\u30f3\u8a66\u884c\u56de\u6570\u5236\u9650\u3092\u8d85\u3048\u305f\u5834\u5408\u306b\u4e00\u6642\u7684\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u30ed\u30c3\u30af\uff09</li> </ul> </li> </ul> <p><code>libkoiki/core/security.py</code> \u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u30c1\u30a7\u30c3\u30af (\u518d\u63b2):</p> <pre><code># libkoiki/core/security.py \u306e check_password_complexity \u95a2\u6570\nimport re\ndef check_password_complexity(password: str) -&gt; bool:\n    \"\"\"\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u8907\u96d1\u6027\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u691c\u8a3c\u3057\u307e\u3059\"\"\"\n    if len(password) &lt; 8: return False\n    if not re.search(r\"[a-z]\", password): return False\n    if not re.search(r\"[A-Z]\", password): return False\n    if not re.search(r\"\\d\", password): return False\n    if not re.search(r\"[!@#$%^&amp;*(),.?\\\":{}|&lt;&gt;]\", password): return False\n    return True\n</code></pre>"},{"location":"design_kkfw_0.5.0/#14","title":"14. \u30c6\u30b9\u30c8\u6226\u7565\u3068\u30c6\u30b9\u30c8\u5b9f\u88c5","text":"<p>\u54c1\u8cea\u78ba\u4fdd\u3068\u5b89\u5168\u306a\u958b\u767a\u306e\u305f\u3081\u306b\u30c6\u30b9\u30c8\u306f\u4e0d\u53ef\u6b20\u3067\u3059\u3002<code>pytest</code> \u3068 <code>httpx.AsyncClient</code> \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#_13","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30c6\u30b9\u30c8\u306e\u7a2e\u985e)","text":"<ul> <li>\u5358\u4f53\u30c6\u30b9\u30c8 (Unit Test): \u500b\u3005\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306a\u3069\u3001\u6700\u5c0f\u5358\u4f4d\u306e\u6a5f\u80fd\u3092\u9694\u96e2\u3057\u3066\u691c\u8a3c\u3002\u4f9d\u5b58\u6027\u306f\u30e2\u30c3\u30af\u5316\u3002</li> <li>\u7d71\u5408\u30c6\u30b9\u30c8 (Integration Test): \u8907\u6570\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08API\u3001\u30b5\u30fc\u30d3\u30b9\u3001DB\u306a\u3069\uff09\u3092\u9023\u643a\u3055\u305b\u3066\u691c\u8a3c\u3002</li> <li>E2E\u30c6\u30b9\u30c8 (End-to-End Test): \u5b9f\u969b\u306e\u30e6\u30fc\u30b6\u30fc\u64cd\u4f5c\u3092\u6a21\u5023\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u691c\u8a3c\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#141-conftestpy","title":"14.1 \u30c6\u30b9\u30c8\u8a2d\u5b9a (conftest.py)","text":"<p><code>pytest</code> \u306e\u8a2d\u5b9a\u3068\u5171\u901a\u30d5\u30a3\u30af\u30b9\u30c1\u30e3\u3092 <code>tests/conftest.py</code> \u3067\u5b9a\u7fa9\u3002</p> <p><code>tests/conftest.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># tests/conftest.py\nimport asyncio\nimport os\nfrom typing import AsyncGenerator, Generator\nimport pytest\nimport pytest_asyncio\nfrom httpx import AsyncClient\nfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import NullPool # \u30c6\u30b9\u30c8\u3067\u306fNullPool\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\n\nfrom libkoiki.db.base import Base as CombinedBase # libkoiki\u3068app\u3067\u5171\u6709\u3055\u308c\u308bBase\nfrom app.main import app # FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nfrom libkoiki.db.session import get_db # DI\u7528\u306eDB\u30bb\u30c3\u30b7\u30e7\u30f3\u53d6\u5f97\u95a2\u6570\n\n# \u30c6\u30b9\u30c8\u7528\u306eDB URL (\u74b0\u5883\u5909\u6570\u3084\u30c6\u30b9\u30c8\u5c02\u7528\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u63a8\u5968)\nDEFAULT_TEST_DATABASE_URL = \"postgresql+asyncpg://test_user:test_password@localhost:5432/koiki_test_db\"\n\n# --- Database Fixtures ---\n@pytest_asyncio.fixture(scope=\"session\")\nasync def db_engine():\n    \"\"\"\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30b3\u30fc\u30d7\u306e\u30c6\u30b9\u30c8DB\u30a8\u30f3\u30b8\u30f3\u3002\u30c6\u30b9\u30c8\u5b9f\u884c\u524d\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u3001\u7d42\u4e86\u5f8c\u306b\u7834\u68c4\u3002\"\"\"\n    # \u74b0\u5883\u5909\u6570\u304b\u3089\u30c6\u30b9\u30c8DB URL\u3092\u53d6\u5f97\u3001\u306a\u3051\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n    test_db_url = os.getenv(\"TEST_DATABASE_URL\", DEFAULT_TEST_DATABASE_URL)\n\n    # \u30c6\u30b9\u30c8\u3067\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308b\n    engine = create_async_engine(test_db_url, echo=False, poolclass=NullPool)\n\n    async with engine.begin() as conn:\n        # \u65e2\u5b58\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u5168\u3066\u524a\u9664 (\u5b89\u5168\u306e\u305f\u3081)\n        await conn.run_sync(CombinedBase.metadata.drop_all)\n        # \u30b9\u30ad\u30fc\u30de\u306b\u57fa\u3065\u3044\u3066\u30c6\u30fc\u30d6\u30eb\u3092\u518d\u4f5c\u6210\n        await conn.run_sync(CombinedBase.metadata.create_all)\n\n    yield engine # \u30c6\u30b9\u30c8\u5b9f\u884c\u4e2d\u306f\u30a8\u30f3\u30b8\u30f3\u3092\u63d0\u4f9b\n\n    # \u30c6\u30b9\u30c8\u7d42\u4e86\u5f8c\u306b\u30a8\u30f3\u30b8\u30f3\u3092\u7834\u68c4\n    await engine.dispose()\n\n@pytest_asyncio.fixture(scope=\"function\")\nasync def db_session(db_engine) -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"\u95a2\u6570\u30b9\u30b3\u30fc\u30d7\u306e\u30c6\u30b9\u30c8DB\u30bb\u30c3\u30b7\u30e7\u30f3\u3002\u5404\u30c6\u30b9\u30c8\u5f8c\u306b\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u3059\u308b\u3002\"\"\"\n    # \u30c6\u30b9\u30c8\u7528\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30d5\u30a1\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n    AsyncTestingSessionLocal = sessionmaker(\n        bind=db_engine,\n        class_=AsyncSession,\n        autocommit=False,\n        autoflush=False,\n        expire_on_commit=False # \u30c6\u30b9\u30c8\u3067\u306fFalse\u63a8\u5968\n    )\n    async with AsyncTestingSessionLocal() as session:\n        # \u5404\u30c6\u30b9\u30c8\u3092\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5185\u3067\u5b9f\u884c\n        # \u3053\u308c\u306b\u3088\u308a\u3001\u30c6\u30b9\u30c8\u7d42\u4e86\u6642\u306b\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u3066DB\u72b6\u614b\u3092\u5143\u306b\u623b\u305b\u308b\n        await session.begin_nested() \n        yield session\n        # \u30c6\u30b9\u30c8\u3067\u30b3\u30df\u30c3\u30c8\u3055\u308c\u3066\u3082\u3001\u3053\u306e\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u5143\u306b\u623b\u308b\n        await session.rollback() \n        await session.close()\n\n\n# --- HTTP Client Fixture ---\n@pytest_asyncio.fixture(scope=\"function\")\nasync def client(db_session: AsyncSession) -&gt; AsyncGenerator[AsyncClient, None]:\n    \"\"\"\u975e\u540c\u671fHTTP\u30c6\u30b9\u30c8\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3002DB\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30c6\u30b9\u30c8\u7528\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3002\"\"\"\n\n    # get_db \u4f9d\u5b58\u6027\u3092\u30c6\u30b9\u30c8\u7528\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u95a2\u6570\n    async def override_get_db() -&gt; AsyncGenerator[AsyncSession, None]:\n        yield db_session\n\n    # FastAPI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f9d\u5b58\u6027\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n    app.dependency_overrides[get_db] = override_get_db\n\n    # httpx.AsyncClient \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u5171\u306b\u521d\u671f\u5316\n    async with AsyncClient(app=app, base_url=\"http://testserver\") as async_client: # base_url\u306f\u4efb\u610f\n        yield async_client\n\n    # \u30c6\u30b9\u30c8\u7d42\u4e86\u5f8c\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3092\u5143\u306b\u623b\u3059 (\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7)\n    del app.dependency_overrides[get_db]\n\n# --- \u8a8d\u8a3c\u6e08\u307f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30d5\u30a3\u30af\u30b9\u30c1\u30e3 (\u30aa\u30d7\u30b7\u30e7\u30f3) ---\nfrom libkoiki.services.user_service import UserService\nfrom libkoiki.repositories.user_repository import UserRepository\nfrom libkoiki.schemas.user import UserCreate\nfrom libkoiki.models.user import UserModel\nfrom libkoiki.core.security import create_access_token\n\n@pytest_asyncio.fixture(scope=\"function\")\nasync def authenticated_user(db_session: AsyncSession) -&gt; UserModel:\n    \"\"\"\u30c6\u30b9\u30c8\u7528\u306e\u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3001\u8fd4\u3059\u30d5\u30a3\u30af\u30b9\u30c1\u30e3\u3002\"\"\"\n    user_repo = UserRepository() # \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n    user_service = UserService(repository=user_repo) # \u30b5\u30fc\u30d3\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n\n    test_user_email = \"authtest@example.com\"\n    test_user_password = \"AuthTestP@sswOrd1!\"\n    # \u65e2\u5b58\u30e6\u30fc\u30b6\u30fc\u304c\u3044\u308c\u3070\u524a\u9664\u307e\u305f\u306f\u53d6\u5f97 (\u51aa\u7b49\u6027\u306e\u305f\u3081)\n    user_repo.set_session(db_session)\n    existing_user = await user_repo.get_by_email(test_user_email)\n    if existing_user:\n        # \u65e2\u5b58\u30e6\u30fc\u30b6\u30fc\u3092\u4f7f\u7528\n        return existing_user\n\n    user_data = UserCreate(email=test_user_email, password=test_user_password, full_name=\"Auth Test User\")\n    user = await user_service.create_user(user_in=user_data, db=db_session)\n    return user\n\n@pytest_asyncio.fixture(scope=\"function\")\nasync def authenticated_client(client: AsyncClient, authenticated_user: UserModel):\n    \"\"\"\u8a8d\u8a3c\u6e08\u307f\u30e6\u30fc\u30b6\u30fc\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30d8\u30c3\u30c0\u30fc\u306b\u8a2d\u5b9a\u3057\u305fHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u8fd4\u3059\u3002\"\"\"\n    token = create_access_token(subject=authenticated_user.id)\n    client.headers[\"Authorization\"] = f\"Bearer {token}\"\n    yield client\n    # \u5f8c\u51e6\u7406 (\u30d8\u30c3\u30c0\u30fc\u524a\u9664\u306a\u3069)\n    del client.headers[\"Authorization\"]\n</code></pre>"},{"location":"design_kkfw_0.5.0/#142","title":"14.2 \u5358\u4f53\u30c6\u30b9\u30c8\u4f8b","text":"<p>\u30b5\u30fc\u30d3\u30b9\u5c64\u306e\u30ed\u30b8\u30c3\u30af\u306a\u3069\u3092\u3001\u4f9d\u5b58\u6027\u3092\u30e2\u30c3\u30af\u5316 (<code>unittest.mock.AsyncMock</code>) \u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002</p> <p><code>tests/unit/services/test_app_todo_service.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># tests/unit/services/test_app_todo_service.py\nimport pytest\nfrom unittest.mock import AsyncMock, MagicMock, patch\nfrom sqlalchemy.ext.asyncio import AsyncSession\nimport structlog\n\nfrom app.services.todo_service import TodoService\nfrom app.repositories.todo_repository import TodoRepository # \u30e2\u30c3\u30af\u5bfe\u8c61\nfrom app.models.todo_model import TodoModel # \u8fd4\u308a\u5024\u306e\u578b\u3068\u3057\u3066\u4f7f\u7528\nfrom app.schemas.todo_schema import TodoCreateSchema, TodoUpdateSchema\nfrom libkoiki.core.exceptions import ResourceNotFoundException, AuthorizationException # \u4f8b\u5916\u306e\u30c6\u30b9\u30c8\u7528\n\n# \u30c6\u30b9\u30c8\u7528\u306b\u30ed\u30ac\u30fc\u3092\u30e2\u30c3\u30af\n@pytest.fixture(autouse=True)\ndef mock_structlog():\n    with patch('structlog.get_logger'):\n        yield\n\n@pytest.fixture\ndef mock_todo_repo() -&gt; MagicMock:\n    repo = MagicMock(spec=TodoRepository) # spec\u3067\u30e1\u30bd\u30c3\u30c9\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n    repo.set_session = MagicMock() # set_session\u3082\u30e2\u30c3\u30af\u5316\n    repo.create = AsyncMock()      # DB\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306fAsyncMock\n    repo.get = AsyncMock()\n    repo.get_multi_by_owner = AsyncMock()\n    repo.update = AsyncMock()\n    repo.delete = AsyncMock()\n    return repo\n\n@pytest.fixture\ndef mock_db_session() -&gt; AsyncMock:\n    session = AsyncMock(spec=AsyncSession)\n    # \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30c7\u30b3\u30ec\u30fc\u30bf\u304c `session.begin()` \u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u3001\u305d\u306e\u30e2\u30c3\u30af\u3082\u7528\u610f\n    # __aenter__ \u3068 __aexit__ \u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\n    mock_transaction_context = AsyncMock()\n    mock_transaction_context.__aenter__ = AsyncMock(return_value=None) # begin() \u306e\u4e2d\u8eab\n    mock_transaction_context.__aexit__ = AsyncMock(return_value=None)  # commit/rollback\n    session.begin = MagicMock(return_value=mock_transaction_context) # begin()\u304c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u8fd4\u3059\n    session.in_transaction = MagicMock(return_value=False) # \u901a\u5e38\u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5916\u304b\u3089\u958b\u59cb\n    return session\n\n@pytest.fixture\ndef todo_service(mock_todo_repo: TodoRepository) -&gt; TodoService:\n    return TodoService(repository=mock_todo_repo)\n\n@pytest.mark.asyncio\nasync def test_create_todo_success(\n    todo_service: TodoService, \n    mock_todo_repo: MagicMock,\n    mock_db_session: AsyncMock\n):\n    \"\"\"ToDo\u4f5c\u6210\u304c\u6210\u529f\u3059\u308b\u30b1\u30fc\u30b9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\"\"\"\n    todo_data = TodoCreateSchema(title=\"Unit Test Todo\", description=\"Test description\")\n    owner_id = 1\n\n    # \u30ea\u30dd\u30b8\u30c8\u30ea\u306ecreate\u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3059\u30c0\u30df\u30fc\u306eTodoModel\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    expected_created_todo = TodoModel(id=1, title=todo_data.title, description=todo_data.description, owner_id=owner_id, completed=False)\n    mock_todo_repo.create.return_value = expected_created_todo\n\n    # @transactional \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8003\u616e\u3057\u3001db\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u6e21\u3059\n    # \u30c7\u30b3\u30ec\u30fc\u30bf\u5185\u306e\u30ed\u30ac\u30fc\u3092\u30e2\u30c3\u30af\u5316 (\u30aa\u30d7\u30b7\u30e7\u30f3)\n    with patch('libkoiki.core.transaction.logger'):\n        created_todo = await todo_service.create_todo(todo_data=todo_data, db=mock_db_session, owner_id=owner_id)\n\n    assert created_todo is not None\n    assert created_todo.id == 1\n    assert created_todo.title == \"Unit Test Todo\"\n    assert created_todo.owner_id == owner_id\n\n    # \u30ea\u30dd\u30b8\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u78ba\u8a8d\n    mock_todo_repo.set_session.assert_called_once_with(mock_db_session)\n    mock_todo_repo.create.assert_called_once()\n\n@pytest.mark.asyncio\nasync def test_get_todo_by_id_and_owner_found(\n    todo_service: TodoService, mock_todo_repo: MagicMock, mock_db_session: AsyncMock\n):\n    \"\"\"ID\u3068\u30aa\u30fc\u30ca\u30fcID\u3067ToDo\u3092\u53d6\u5f97\u3057\u3001\u898b\u3064\u304b\u308b\u30b1\u30fc\u30b9\"\"\"\n    todo_id = 1\n    owner_id = 1\n    expected_todo = TodoModel(id=todo_id, title=\"Test Todo\", owner_id=owner_id)\n    mock_todo_repo.get.return_value = expected_todo # get\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u8a2d\u5b9a\n\n    todo = await todo_service.get_todo_by_id_and_owner(todo_id=todo_id, owner_id=owner_id, db=mock_db_session)\n\n    assert todo is not None\n    assert todo.id == todo_id\n    assert todo.owner_id == owner_id\n    mock_todo_repo.set_session.assert_called_once_with(mock_db_session)\n    mock_todo_repo.get.assert_called_once_with(todo_id)\n\n@pytest.mark.asyncio\nasync def test_get_todo_by_id_and_owner_not_found(\n    todo_service: TodoService, mock_todo_repo: MagicMock, mock_db_session: AsyncMock\n):\n    \"\"\"ToDo\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u30b1\u30fc\u30b9\"\"\"\n    todo_id = 99\n    owner_id = 1\n    mock_todo_repo.get.return_value = None # get\u30e1\u30bd\u30c3\u30c9\u304cNone\u3092\u8fd4\u3059\u3088\u3046\u306b\u8a2d\u5b9a\n\n    todo = await todo_service.get_todo_by_id_and_owner(todo_id=todo_id, owner_id=owner_id, db=mock_db_session)\n\n    assert todo is None # \u30b5\u30fc\u30d3\u30b9\u306fNone\u3092\u8fd4\u3057\u3001\u30eb\u30fc\u30bf\u30fc\u304c404\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u60f3\u5b9a\n\n@pytest.mark.asyncio\nasync def test_get_todo_by_id_and_owner_unauthorized(\n    todo_service: TodoService, mock_todo_repo: MagicMock, mock_db_session: AsyncMock\n):\n    \"\"\"\u30aa\u30fc\u30ca\u30fc\u304c\u7570\u306a\u308b\u305f\u3081\u6a29\u9650\u304c\u306a\u3044\u30b1\u30fc\u30b9\"\"\"\n    todo_id = 1\n    correct_owner_id = 2\n    requesting_owner_id = 1 # \u5225\u306e\u30e6\u30fc\u30b6\u30fc\n\n    # DB\u306b\u306fToDo\u304c\u5b58\u5728\u3059\u308b\u304c\u3001\u30aa\u30fc\u30ca\u30fc\u304c\u7570\u306a\u308b\n    todo_in_db = TodoModel(id=todo_id, title=\"Someone else's Todo\", owner_id=correct_owner_id)\n    mock_todo_repo.get.return_value = todo_in_db\n\n    todo = await todo_service.get_todo_by_id_and_owner(todo_id=todo_id, owner_id=requesting_owner_id, db=mock_db_session)\n\n    assert todo is None # \u30b5\u30fc\u30d3\u30b9\u306fNone\u3092\u8fd4\u3057\u3001\u30eb\u30fc\u30bf\u30fc\u304c404/403\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n</code></pre>"},{"location":"design_kkfw_0.5.0/#_14","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (\u30e2\u30c3\u30af)","text":"<ul> <li>\u30e2\u30c3\u30af (Mock): \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u5916\u90e8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08DB\u3001\u5916\u90e8API\u306a\u3069\uff09\u306e\u632f\u308b\u821e\u3044\u3092\u6a21\u5023\u3059\u308b\u507d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c6\u30b9\u30c8\u304c\u5916\u90e8\u74b0\u5883\u306b\u4f9d\u5b58\u305b\u305a\u3001\u5b9f\u884c\u901f\u5ea6\u304c\u5411\u4e0a\u3057\u3001\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306a\u3069\u7279\u5b9a\u306e\u30b7\u30ca\u30ea\u30aa\u3092\u518d\u73fe\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#143","title":"14.3 \u7d71\u5408\u30c6\u30b9\u30c8\u4f8b","text":"<p>API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089DB\u307e\u3067\u3092\u9023\u643a\u3055\u305b\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002<code>client</code> \u30d5\u30a3\u30af\u30b9\u30c1\u30e3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p><code>tests/integration/api/test_app_todos_api.py</code> \u306e\u5b9f\u88c5\u4f8b:</p> <pre><code># tests/integration/api/test_app_todos_api.py\nimport pytest\nfrom httpx import AsyncClient\nfrom fastapi import status\nimport structlog\n\nfrom libkoiki.core.config import settings\nfrom libkoiki.models.user import UserModel\n\n# API Prefix \u3092\u53d6\u5f97\nAPI_PREFIX = settings.API_PREFIX\nTODO_API_BASE_URL = f\"{API_PREFIX}/todos\" # /api/v1/todos \u306a\u3069\n\n# \u30c6\u30b9\u30c8\u7528\u306b\u30ed\u30ac\u30fc\u3092\u30e2\u30c3\u30af\n@pytest.fixture(autouse=True)\ndef mock_structlog():\n    with pytest.MonkeyPatch.context() as mp:\n        mp.setattr(structlog, \"get_logger\", lambda *args, **kwargs: MagicMock())\n        yield\n\n@pytest.mark.asyncio\nasync def test_create_todo_api_success(authenticated_client: AsyncClient, authenticated_user: UserModel):\n    \"\"\"ToDo\u4f5c\u6210API\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u30b1\u30fc\u30b9 (201 Created)\"\"\"\n    todo_payload = {\"title\": \"Integration Test My Todo\", \"description\": \"This is an integration test.\"}\n    response = await authenticated_client.post(TODO_API_BASE_URL + \"/\", json=todo_payload)\n\n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"title\"] == todo_payload[\"title\"]\n    assert data[\"description\"] == todo_payload[\"description\"]\n    assert \"id\" in data\n    assert data[\"completed\"] is False # \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u78ba\u8a8d\n    assert data[\"owner_id\"] == authenticated_user.id # \u4f5c\u6210\u8005\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\n\n@pytest.mark.asyncio\nasync def test_create_todo_api_unauthenticated(client: AsyncClient):\n    \"\"\"\u672a\u8a8d\u8a3c\u3067ToDo\u4f5c\u6210API\u3092\u547c\u3076\u3068\u30a8\u30e9\u30fc (401 Unauthorized)\"\"\"\n    todo_payload = {\"title\": \"Unauthorized Todo\"}\n    response = await client.post(TODO_API_BASE_URL + \"/\", json=todo_payload) # auth_headers\u306a\u3057\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n\n@pytest.mark.asyncio\nasync def test_get_my_todos_api_success(authenticated_client: AsyncClient, authenticated_user: UserModel):\n    \"\"\"\u81ea\u5206\u306eToDo\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308bAPI\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u30b1\u30fc\u30b9\"\"\"\n    # \u4e8b\u524d\u306b\u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u306eToDo\u3092\u3044\u304f\u3064\u304b\u4f5c\u6210 (\u3053\u306e\u30c6\u30b9\u30c8\u5c02\u7528)\n    await authenticated_client.post(TODO_API_BASE_URL + \"/\", json={\"title\": \"My Todo Item 1\"})\n    await authenticated_client.post(TODO_API_BASE_URL + \"/\", json={\"title\": \"My Todo Item 2\"})\n\n    response = await authenticated_client.get(TODO_API_BASE_URL + \"/\")\n    assert response.status_code == status.HTTP_200_OK\n    todos = response.json()\n    assert isinstance(todos, list)\n    assert len(todos) &gt;= 2 # \u5c11\u306a\u304f\u3068\u30822\u3064\u306f\u3042\u308b\u306f\u305a\n    for todo in todos:\n        assert todo[\"owner_id\"] == authenticated_user.id # \u81ea\u5206\u306eToDo\u306e\u307f\u304c\u8fd4\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\n@pytest.mark.asyncio\nasync def test_get_todo_by_id_api_success(authenticated_client: AsyncClient, authenticated_user: UserModel):\n    \"\"\"\u7279\u5b9a\u306eToDo\u3092\u53d6\u5f97\u3059\u308bAPI\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u30b1\u30fc\u30b9\"\"\"\n    # 1. \u30c6\u30b9\u30c8\u7528ToDo\u3092\u4f5c\u6210\n    create_response = await authenticated_client.post(\n        TODO_API_BASE_URL + \"/\", \n        json={\"title\": \"Todo for Get Test\", \"description\": \"This todo will be retrieved by ID\"}\n    )\n    assert create_response.status_code == status.HTTP_201_CREATED\n    todo_id = create_response.json()[\"id\"]\n\n    # 2. \u4f5c\u6210\u3057\u305fToDo\u3092ID\u3067\u53d6\u5f97\n    get_response = await authenticated_client.get(f\"{TODO_API_BASE_URL}/{todo_id}\")\n    assert get_response.status_code == status.HTTP_200_OK\n    todo = get_response.json()\n    assert todo[\"id\"] == todo_id\n    assert todo[\"title\"] == \"Todo for Get Test\"\n    assert todo[\"owner_id\"] == authenticated_user.id\n\n@pytest.mark.asyncio\nasync def test_update_my_todo_api_success(authenticated_client: AsyncClient):\n    \"\"\"\u81ea\u5206\u306eToDo\u3092\u66f4\u65b0\u3059\u308bAPI\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u30b1\u30fc\u30b9\"\"\"\n    # 1. \u66f4\u65b0\u5bfe\u8c61\u306eToDo\u3092\u4f5c\u6210\n    create_response = await authenticated_client.post(TODO_API_BASE_URL + \"/\", json={\"title\": \"Todo Before Update\"})\n    assert create_response.status_code == status.HTTP_201_CREATED\n    todo_id_to_update = create_response.json()[\"id\"]\n\n    # 2. ToDo\u3092\u66f4\u65b0\n    update_payload = {\"title\": \"Todo After Update\", \"completed\": True}\n    update_response = await authenticated_client.put(f\"{TODO_API_BASE_URL}/{todo_id_to_update}\", json=update_payload)\n    assert update_response.status_code == status.HTTP_200_OK\n    updated_data = update_response.json()\n    assert updated_data[\"title\"] == update_payload[\"title\"]\n    assert updated_data[\"completed\"] == update_payload[\"completed\"]\n\n@pytest.mark.asyncio\nasync def test_delete_my_todo_api_success(authenticated_client: AsyncClient):\n    \"\"\"\u81ea\u5206\u306eToDo\u3092\u524a\u9664\u3059\u308bAPI\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u30b1\u30fc\u30b9\"\"\"\n    # 1. \u524a\u9664\u5bfe\u8c61\u306eToDo\u3092\u4f5c\u6210\n    create_response = await authenticated_client.post(TODO_API_BASE_URL + \"/\", json={\"title\": \"Todo To Be Deleted\"})\n    assert create_response.status_code == status.HTTP_201_CREATED\n    todo_id_to_delete = create_response.json()[\"id\"]\n\n    # 2. ToDo\u3092\u524a\u9664\n    delete_response = await authenticated_client.delete(f\"{TODO_API_BASE_URL}/{todo_id_to_delete}\")\n    assert delete_response.status_code == status.HTTP_204_NO_CONTENT # \u6210\u529f\u6642\u306fNo Content\n\n    # 3. \u524a\u9664\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d (GET\u3067404\u306b\u306a\u308b\u306f\u305a)\n    get_response_after_delete = await authenticated_client.get(f\"{TODO_API_BASE_URL}/{todo_id_to_delete}\")\n    assert get_response_after_delete.status_code == status.HTTP_404_NOT_FOUND\n</code></pre>"},{"location":"design_kkfw_0.5.0/#15","title":"15. \u30ed\u30fc\u30eb\u3068\u6a29\u9650","text":"<p>RBAC (\u30ed\u30fc\u30eb\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u5236\u5fa1) \u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3068\u4ed5\u7d44\u307f\u3002</p>"},{"location":"design_kkfw_0.5.0/#151","title":"15.1 \u30ed\u30fc\u30eb\u30fb\u6a29\u9650\u30e2\u30c7\u30eb","text":"<p><code>libkoiki/models/</code> \u306b <code>RoleModel</code>, <code>PermissionModel</code>, \u304a\u3088\u3073\u305d\u308c\u3089\u3092User\u3068\u7d10\u4ed8\u3051\u308b\u4e2d\u9593\u30c6\u30fc\u30d6\u30eb (<code>user_roles_association</code>, <code>role_permissions_association</code> in <code>libkoiki/models/associations.py</code>) \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <p><code>libkoiki/models/role.py</code>:</p> <pre><code># libkoiki/models/role.py\nfrom sqlalchemy import Column, String, Integer\nfrom sqlalchemy.orm import relationship\nfrom libkoiki.db.base import Base\nfrom libkoiki.models.associations import user_roles_association, role_permissions_association # \u4e2d\u9593\u30c6\u30fc\u30d6\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\nclass RoleModel(Base):\n    # __tablename__ = \"roles\" # CustomBase\u3067\u81ea\u52d5\u8a2d\u5b9a\n\n    name = Column(String, unique=True, index=True, nullable=False)\n    description = Column(String, nullable=True)\n\n    users = relationship(\n        \"UserModel\", \n        secondary=user_roles_association, \n        back_populates=\"roles\"\n    )\n    permissions = relationship(\n        \"PermissionModel\", \n        secondary=role_permissions_association, \n        back_populates=\"roles\"\n    )\n</code></pre> <p><code>libkoiki/models/permission.py</code>:</p> <pre><code># libkoiki/models/permission.py\nfrom sqlalchemy import Column, String, Integer\nfrom sqlalchemy.orm import relationship\nfrom libkoiki.db.base import Base\nfrom libkoiki.models.associations import role_permissions_association # \u4e2d\u9593\u30c6\u30fc\u30d6\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\nclass PermissionModel(Base):\n    # __tablename__ = \"permissions\" # CustomBase\u3067\u81ea\u52d5\u8a2d\u5b9a\n\n    name = Column(String, unique=True, index=True, nullable=False) # \u4f8b: \"todos:create\", \"users:read\"\n    description = Column(String, nullable=True)\n\n    roles = relationship(\n        \"RoleModel\", \n        secondary=role_permissions_association, \n        back_populates=\"permissions\"\n    )\n</code></pre> <p><code>libkoiki/models/associations.py</code> (\u4e2d\u9593\u30c6\u30fc\u30d6\u30eb):</p> <pre><code># libkoiki/models/associations.py\nfrom sqlalchemy import Table, Column, Integer, ForeignKey\nfrom libkoiki.db.base import Base # Base.metadata \u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\n\n# \u30e6\u30fc\u30b6\u30fc\u3068\u30ed\u30fc\u30eb\u306e\u591a\u5bfe\u591a\u95a2\u9023\u30c6\u30fc\u30d6\u30eb\nuser_roles_association = Table(\n    \"user_roles_association\", # \u30c6\u30fc\u30d6\u30eb\u540d\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\n    Base.metadata, # \u3053\u306eBase\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5168\u4f53\u3067\u5171\u6709\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3053\u3068\n    Column(\"user_id\", Integer, ForeignKey(\"usermodel.id\", ondelete=\"CASCADE\"), primary_key=True), # \u30c6\u30fc\u30d6\u30eb\u540d\u306f\u5c0f\u6587\u5b57\n    Column(\"role_id\", Integer, ForeignKey(\"rolemodel.id\", ondelete=\"CASCADE\"), primary_key=True)  # \u30c6\u30fc\u30d6\u30eb\u540d\u306f\u5c0f\u6587\u5b57\n)\n\n# \u30ed\u30fc\u30eb\u3068\u6a29\u9650\u306e\u591a\u5bfe\u591a\u95a2\u9023\u30c6\u30fc\u30d6\u30eb\nrole_permissions_association = Table(\n    \"role_permissions_association\",\n    Base.metadata,\n    Column(\"role_id\", Integer, ForeignKey(\"rolemodel.id\", ondelete=\"CASCADE\"), primary_key=True),\n    Column(\"permission_id\", Integer, ForeignKey(\"permissionmodel.id\", ondelete=\"CASCADE\"), primary_key=True)\n)\n</code></pre> <p><code>libkoiki/models/user.py</code> \u306e <code>UserModel</code> \u306b\u3082 <code>roles</code> \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code># libkoiki/models/user.py (\u8ffd\u8a18)\nfrom libkoiki.models.associations import user_roles_association # \u4e2d\u9593\u30c6\u30fc\u30d6\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n# ... UserModel\u30af\u30e9\u30b9\u5185 ...\nroles = relationship(\n    \"RoleModel\",\n    secondary=user_roles_association,\n    back_populates=\"users\",\n    lazy=\"selectin\" # Eager loading strategy (optional, for performance)\n)\n</code></pre> <p><code>lazy=\"selectin\"</code> \u306a\u3069\u306eEager Loading\u6226\u7565\u306f\u3001\u7279\u306b\u8a8d\u8a3c\u6642\u306b\u30e6\u30fc\u30b6\u30fc\u306e\u30ed\u30fc\u30eb\u3084\u6a29\u9650\u3092\u983b\u7e41\u306b\u53c2\u7167\u3059\u308b\u5834\u5408\u306b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306b\u7e4b\u304c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#152","title":"15.2 \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u306e\u5b9f\u88c5","text":"<p><code>libkoiki/core/security.py</code> (\u307e\u305f\u306f <code>libkoiki/auth/rbac.py</code>) \u3067\u6a29\u9650\u30c1\u30a7\u30c3\u30af\u7528\u306e\u4f9d\u5b58\u6027\u30d8\u30eb\u30d1\u30fc\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <pre><code># libkoiki/core/security.py (\u307e\u305f\u306f libkoiki/auth/rbac.py \u306b\u5206\u96e2\u63a8\u5968)\n# ... \u65e2\u5b58\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u306b\u52a0\u3048\u3066 ...\nfrom fastapi import Security\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\n# \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u4f9d\u5b58\u6027\u95a2\u6570\ndef require_permission(required_permission: str):\n    \"\"\"\n    \u6307\u5b9a\u3055\u308c\u305f\u6a29\u9650\u3092\u30e6\u30fc\u30b6\u30fc\u304c\u6301\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u4f9d\u5b58\u6027\u3002\n    \u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306fHTTP 403 Forbidden\u3092\u8fd4\u3059\u3002\n\n    Args:\n        required_permission: \u5fc5\u8981\u306a\u6a29\u9650\u540d (\u4f8b: \"todos:create\")\n\n    Returns:\n        Depends \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    \"\"\"\n    async def permission_checker(\n        current_user: Annotated[UserModel, Security(get_current_active_user)] # Security\u3067ActiveUserDep\u3092\u4f7f\u7528\n    ) -&gt; UserModel:\n        if not hasattr(current_user, 'roles') or not current_user.roles:\n            logger.warning(\n                \"Permission check failed: user has no roles\", \n                user_id=current_user.id, \n                required_permission=required_permission\n            )\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN, \n                detail=\"User has no roles assigned or roles not loaded.\"\n            )\n\n        user_permissions = set()\n        for role in current_user.roles:\n            if hasattr(role, 'permissions') and role.permissions:\n                for perm_obj in role.permissions: # perm_obj \u306f PermissionModel \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n                    user_permissions.add(perm_obj.name) # PermissionModel\u306ename\u5c5e\u6027 (\u6a29\u9650\u540d) \u3092\u30bb\u30c3\u30c8\u306b\u8ffd\u52a0\n\n        if required_permission not in user_permissions:\n            logger.warning(\n                \"Permission check failed: insufficient permissions\", \n                user_id=current_user.id,\n                user_permissions=list(user_permissions),\n                required_permission=required_permission\n            )\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"Insufficient permissions. Required: '{required_permission}'\"\n            )\n\n        logger.debug(\n            \"Permission check passed\", \n            user_id=current_user.id, \n            required_permission=required_permission\n        )\n        return current_user # \u6a29\u9650\u304c\u3042\u308c\u3070\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059 (\u4ed6\u306e\u51e6\u7406\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b)\n\n    return Depends(permission_checker) # Depends\u3067\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\n\n# \u4f7f\u7528\u4f8b (\u30eb\u30fc\u30bf\u30fc\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067):\n# @router.post(\"/\", dependencies=[Depends(require_permission(\"todos:create\"))])\n# async def create_item(...):\n#     ...\n</code></pre> <p>\u91cd\u8981: <code>get_current_user_from_token</code> \u95a2\u6570\u5185\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u53d6\u5f97\u6642\u306b <code>selectinload</code> \u3092\u4f7f\u3063\u3066 <code>roles</code> \u304a\u3088\u3073 <code>roles.permissions</code> \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092Eager Loading\u3059\u308b\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001<code>UserRepository</code> \u306e <code>get_user_with_roles_permissions</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#16-uiux","title":"16. UI/UX\u5b9f\u88c5\u306e\u9078\u629e\u80a2","text":"<p>\u3053\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3001\u69d8\u3005\u306a\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u5b9f\u88c5\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#uiux","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (UI/UX)","text":"<ul> <li>UI (User Interface): \u30e6\u30fc\u30b6\u30fc\u304c\u30b7\u30b9\u30c6\u30e0\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u63a5\u70b9\uff08\u753b\u9762\u30c7\u30b6\u30a4\u30f3\u3001\u30dc\u30bf\u30f3\u306a\u3069\uff09\u3002</li> <li>UX (User Experience): \u30e6\u30fc\u30b6\u30fc\u304c\u30b7\u30b9\u30c6\u30e0\u3092\u5229\u7528\u3059\u308b\u969b\u306e\u5168\u4f53\u7684\u306a\u4f53\u9a13\uff08\u4f7f\u3044\u3084\u3059\u3055\u3001\u6e80\u8db3\u5ea6\u306a\u3069\uff09\u3002</li> <li>SPA (Single Page Application): \u5358\u4e00\u306eHTML\u30da\u30fc\u30b8\u3067\u52d5\u4f5c\u3057\u3001JavaScript\u3067\u52d5\u7684\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u66f8\u304d\u63db\u3048\u308bWeb\u30a2\u30d7\u30ea\u3002React, Vue, Angular\u306a\u3069\u3002</li> <li>SSR (Server-Side Rendering): \u30b5\u30fc\u30d0\u30fc\u5074\u3067HTML\u3092\u751f\u6210\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\u65b9\u5f0f\u3002Jinja2\u306a\u3069\u3002</li> <li>SSG (Static Site Generation): \u30d3\u30eb\u30c9\u6642\u306b\u9759\u7684\u306aHTML\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u65b9\u5f0f\u3002Next.js, Gatsby\u306a\u3069\u3002</li> <li>Hybrid: SPA\u3068SSR/SSG\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\u3002Next.js\u306a\u3069\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#161-spa-react-nextjs-vuejs","title":"16.1 SPA (React, Next.js, Vue.js \u306a\u3069)","text":"<ul> <li>\u7279\u5fb4: \u30e2\u30c0\u30f3\u306a UI/UX\u3001\u9ad8\u3044\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u6027\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306e\u5b8c\u5168\u5206\u96e2\u3002\u72b6\u614b\u7ba1\u7406\u304c\u8907\u96d1\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u3002</li> <li>\u9023\u643a: \u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e REST API (\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u63d0\u4f9b) \u3068 HTTP \u901a\u4fe1\u3002</li> <li>\u69cb\u6210: \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306f\u5225\u306e\u30ea\u30dd\u30b8\u30c8\u30ea/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u304c\u4e00\u822c\u7684\u3002Docker Compose \u3067\u7d71\u5408\u3057\u3066\u958b\u767a\u30fb\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u3002</li> <li>\u8a8d\u8a3c: API \u304b\u3089\u53d6\u5f97\u3057\u305f JWT \u3092\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3067\u5b89\u5168\u306b\u7ba1\u7406 (\u4f8b: HttpOnly Cookie (SameSite\u5c5e\u6027\u306b\u6ce8\u610f), localStorage + CSRF\u5bfe\u7b56, \u30bb\u30ad\u30e5\u30a2\u306a\u72b6\u614b\u7ba1\u7406\u30e9\u30a4\u30d6\u30e9\u30ea)\u3002</li> <li>\u9069\u3057\u305f\u7528\u9014: \u52d5\u7684\u3067\u30ea\u30c3\u30c1\u306a\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3001\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u3068\u306e API \u5171\u901a\u5316\u3001\u8907\u96d1\u306a\u72b6\u614b\u7ba1\u7406\u304c\u5fc5\u8981\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#162-jinja2","title":"16.2 \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30f3\u30b8\u30f3 (Jinja2\u306a\u3069)","text":"<ul> <li>\u7279\u5fb4: \u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u6210\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306e\u9023\u643a\u304c\u5bb9\u6613\uff08\u7279\u306bPython\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u5185\uff09\u3001\u521d\u671f\u8868\u793a\u901f\u5ea6\u304c\u901f\u3044\u50be\u5411\u3001SEO \u306b\u6709\u5229\u306a\u5834\u5408\u3082\u3002\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u6027\u306f SPA \u3088\u308a\u5236\u9650\u3055\u308c\u308b\u3002</li> <li>\u9023\u643a: FastAPI \u5185\u3067 Jinja2 \u306a\u3069\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u7528\u3057\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u3067HTML \u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3002API \u3068\u540c\u3058\u30d7\u30ed\u30bb\u30b9\u3067\u52d5\u4f5c\u53ef\u80fd\u3002</li> <li>\u69cb\u6210: <code>app/templates/</code> (HTML\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8), <code>app/static/</code> (CSS, JS, \u753b\u50cf) \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8ffd\u52a0\u3002FastAPI \u30eb\u30fc\u30bf\u30fc\u304c <code>HTMLResponse</code> \u3092\u8fd4\u3059\u3002</li> <li>\u8a8d\u8a3c: \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30bb\u30c3\u30b7\u30e7\u30f3\uff08\u4f8b: <code>starlette-sessions</code>\uff09\u307e\u305f\u306f API \u3068\u540c\u69d8\u306e JWT \u30d5\u30ed\u30fc\uff08Cookie\u306bJWT\u3092\u683c\u7d0d\u306a\u3069\uff09\u3002</li> <li>\u9069\u3057\u305f\u7528\u9014: \u7ba1\u7406\u753b\u9762\u3001\u6bd4\u8f03\u7684\u9759\u7684\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u591a\u3044\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3001SEO\u304c\u91cd\u8981\u306a\u516c\u958b\u30b5\u30a4\u30c8\u306e\u4e00\u90e8\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#163-streamlit","title":"16.3 Streamlit","text":"<ul> <li>\u7279\u5fb4: Python \u306e\u307f\u3067\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u30a2\u30d7\u30ea\u3084\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3092\u8fc5\u901f\u306b\u69cb\u7bc9\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084\u5206\u6790\u8005\u5411\u3051\u3002</li> <li>\u9023\u643a: Streamlit \u30a2\u30d7\u30ea\u304b\u3089\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 API \u3092\u547c\u3073\u51fa\u3059\u304b\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u30b5\u30fc\u30d3\u30b9/\u30ea\u30dd\u30b8\u30c8\u30ea\u5c64\u306e\u30b3\u30fc\u30c9\u3092\u76f4\u63a5 (\u307e\u305f\u306f\u8abf\u6574\u3057\u3066) \u5229\u7528\u3002</li> <li>\u69cb\u6210: <code>streamlit_app/</code> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306a\u3069\u3067 Streamlit \u30a2\u30d7\u30ea\u3092\u7ba1\u7406\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306f\u5225\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3002</li> <li>\u8a8d\u8a3c: Streamlit \u30a2\u30d7\u30ea\u81ea\u4f53\u306b\u8a8d\u8a3c\u6a5f\u69cb\u3092\u8ffd\u52a0\uff08<code>streamlit-authenticator</code>\u306a\u3069\uff09\u3059\u308b\u304b\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 API \u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306b\u8a8d\u8a3c\u60c5\u5831\u3092\u4ed8\u4e0e\u3002</li> <li>\u9069\u3057\u305f\u7528\u9014: \u30c7\u30fc\u30bf\u5206\u6790\u30fb\u53ef\u8996\u5316\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3001\u793e\u5185\u30c4\u30fc\u30eb\u3001\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30c7\u30e2\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#164","title":"16.4 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u6a2a\u65ad\u306e\u5b9f\u88c5\u30fb\u904b\u7528\u4e0a\u306e\u7559\u610f\u70b9","text":"<ul> <li>API First Design: \u3069\u306eUI\u3092\u9078\u629e\u3059\u308b\u5834\u5408\u3067\u3082\u3001\u307e\u305a\u306fAPI\u306e\u8a2d\u8a08\u3068\u5b9f\u88c5\u3092\u56fa\u3081\u308b\u3053\u3068\u304c\u91cd\u8981\u3002API\u304c\u5b89\u5b9a\u3057\u3066\u3044\u308c\u3070\u3001UI\u306e\u5909\u66f4\u3084\u8ffd\u52a0\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002</li> <li>\u8a8d\u8a3c\u30fb\u8a8d\u53ef\u306e\u4e00\u8cab\u6027: UI\u304c\u7570\u306a\u3063\u3066\u3082\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9API\u306e\u8a8d\u8a3c\u30fb\u8a8d\u53ef\u30ed\u30b8\u30c3\u30af\u306f\u5171\u901a\u3057\u3066\u9069\u7528\u3055\u308c\u308b\u3079\u304d\u3002UI\u5074\u3067\u306e\u8868\u793a\u5236\u5fa1\u3068\u3001API\u5074\u3067\u306e\u5f37\u5236\u7684\u306a\u6a29\u9650\u30c1\u30a7\u30c3\u30af\u306e\u4e21\u65b9\u3092\u5b9f\u88c5\u3059\u308b\u3002</li> <li>CORS\u8a2d\u5b9a: SPA\u306a\u3069\u7570\u306a\u308b\u30aa\u30ea\u30b8\u30f3\u304b\u3089API\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3001<code>app/main.py</code> \u3067CORSMiddleware\u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002</li> <li>\u8a2d\u5b9a\u306e\u5171\u901a\u5316\u3068\u5206\u96e2: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u60c5\u5831\u306a\u3069\u3001UI\u5c64\u3068API\u5c64\u3067\u5171\u901a\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u5834\u5408\u3067\u3082\u3001\u6a5f\u5bc6\u60c5\u5831\u306fUI\u5c64\u306b\u76f4\u63a5\u57cb\u3081\u8fbc\u307e\u306a\u3044\u3002UI\u5c64\u306fAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306eURL\u3060\u3051\u3092\u77e5\u3063\u3066\u3044\u308c\u3070\u3088\u3044\u3002</li> <li>\u958b\u767a\u30fb\u30c7\u30d7\u30ed\u30a4: \u5404\u5c64\uff08\u30d0\u30c3\u30af\u30a8\u30f3\u30c9API\u3001\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9SPA\u3001Streamlit\u30a2\u30d7\u30ea\u306a\u3069\uff09\u3092\u72ec\u7acb\u3057\u3066\u958b\u767a\u30fb\u30c6\u30b9\u30c8\u30fb\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u69cb\u6210\u3092\u76ee\u6307\u3059\uff08Docker Compose\u306a\u3069\u3092\u6d3b\u7528\uff09\u3002</li> <li>\u72b6\u614b\u7ba1\u7406: \u7279\u306bSPA\u3067\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u72b6\u614b\u7ba1\u7406\uff08\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3001UI\u306e\u72b6\u614b\u306a\u3069\uff09\u306e\u6226\u7565\u3092\u65e9\u671f\u306b\u6c7a\u5b9a\u3059\u308b\u3002</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: API\u304b\u3089\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092UI\u5074\u3067\u9069\u5207\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u5f62\u3067\u8868\u793a\u3059\u308b\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#17-ci","title":"17. \u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 (CI)","text":"<p>KOIKI-FW\u3067\u306f\u3001GitHub Actions\u3092\u6d3b\u7528\u3057\u305f\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\uff08CI\uff09\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306eCI\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u4fdd\u8a3c\u3092\u81ea\u52d5\u5316\u3057\u3001\u554f\u984c\u3092\u65e9\u671f\u306b\u767a\u898b\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#cicd","title":"\ud83d\udd30 \u7528\u8a9e\u89e3\u8aac (CI/CD)","text":"\u7528\u8a9e \u8aac\u660e CI (Continuous Integration) \u958b\u767a\u8005\u304c\u30b3\u30fc\u30c9\u3092\u983b\u7e41\u306b\u5171\u6709\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u7d71\u5408\u3059\u308b\u958b\u767a\u624b\u6cd5\u3002\u5404\u7d71\u5408\u306f\u81ea\u52d5\u30c6\u30b9\u30c8\u3084\u30d3\u30eb\u30c9\u3067\u691c\u8a3c\u3055\u308c\u3001\u554f\u984c\u3092\u65e9\u671f\u767a\u898b\u3059\u308b\u3002 CD (Continuous Delivery/Deployment) CI\u306e\u5ef6\u9577\u7dda\u4e0a\u306b\u3042\u308b\u6982\u5ff5\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u3044\u3064\u3067\u3082\u30ea\u30ea\u30fc\u30b9\u53ef\u80fd\u306a\u72b6\u614b\u306b\u4fdd\u3061\uff08Delivery\uff09\u3001\u81ea\u52d5\u7684\u306b\u672c\u756a\u74b0\u5883\u306b\u30c7\u30d7\u30ed\u30a4\uff08Deployment\uff09\u3059\u308b\u624b\u6cd5\u3002 GitHub Actions GitHub\u304c\u63d0\u4f9b\u3059\u308bCI/CD\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u5185\u306e\u30a4\u30d9\u30f3\u30c8\uff08\u30d7\u30c3\u30b7\u30e5\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306a\u3069\uff09\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b9f\u884c\u3067\u304d\u308b\u3002 \u30ef\u30fc\u30af\u30d5\u30ed\u30fc GitHub Actions\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u81ea\u52d5\u5316\u30d7\u30ed\u30bb\u30b9\u3002YAML\u5f62\u5f0f\u3067\u8a18\u8ff0\u3055\u308c\u3001\u7279\u5b9a\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u5b9f\u884c\u3055\u308c\u308b\u4e00\u9023\u306e\u30b8\u30e7\u30d6\u3084\u30b9\u30c6\u30c3\u30d7\u3092\u5b9a\u7fa9\u3002 \u30e9\u30f3\u30ca\u30fc \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30b8\u30e7\u30d6\u3092\u5b9f\u884c\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u74b0\u5883\u3002GitHub\u63d0\u4f9b\u306e\u30db\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3084\u81ea\u5df1\u30db\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u304c\u3042\u308b\u3002 \u30ab\u30d0\u30ec\u30c3\u30b8 \u30c6\u30b9\u30c8\u304c\u30b3\u30fc\u30c9\u306e\u3069\u308c\u3060\u3051\u306e\u90e8\u5206\u3092\u5b9f\u884c\u3057\u305f\u304b\u3092\u793a\u3059\u6307\u6a19\u3002\u9ad8\u3044\u30ab\u30d0\u30ec\u30c3\u30b8\u306f\u6f5c\u5728\u7684\u306a\u30d0\u30b0\u306e\u767a\u898b\u78ba\u7387\u3092\u9ad8\u3081\u308b\u3002"},{"location":"design_kkfw_0.5.0/#171-github-actions-ci","title":"17.1 GitHub Actions \u306b\u3088\u308bCI","text":"<p>KOIKI-FW\u306eCI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001GitHub Actions\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u9078\u629e\u306b\u306f\u4ee5\u4e0b\u306e\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>GitHub\u3068\u306e\u7d71\u5408: \u30b3\u30fc\u30c9\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u540c\u3058\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4e0a\u3067CI/CD\u3092\u5b9f\u884c\u3067\u304d\u3001\u30b7\u30fc\u30e0\u30ec\u30b9\u306a\u958b\u767a\u4f53\u9a13\u3092\u63d0\u4f9b</li> <li>\u8a2d\u5b9a\u306e\u7c21\u6613\u3055: YAML\u30d9\u30fc\u30b9\u306e\u7c21\u5358\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u8907\u96d1\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b9a\u7fa9\u53ef\u80fd</li> <li>\u8c4a\u5bcc\u306a\u30a2\u30af\u30b7\u30e7\u30f3: \u518d\u5229\u7528\u53ef\u80fd\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u5927\u898f\u6a21\u306a\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd</li> <li>\u4e26\u5217\u5b9f\u884c: \u8907\u6570\u306e\u30c6\u30b9\u30c8\u3084\u30d3\u30eb\u30c9\u3092\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3067\u304d\u308b\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3</li> </ol>"},{"location":"design_kkfw_0.5.0/#172-ci","title":"17.2 CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u6210","text":"<p>CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f <code>.github/workflows/ci.yml</code> \u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>on:\n  push:\n    branches: [master, develop, dev/*, feature/*, bugfix/*]\n  pull_request:\n    branches: [master, develop]\n</code></pre> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u6b21\u306e\u30a4\u30d9\u30f3\u30c8\u3067CI\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a - \u30d7\u30c3\u30b7\u30e5\u30a4\u30d9\u30f3\u30c8: <code>master</code>\u3001<code>develop</code>\u3001<code>dev/</code>\u3001<code>feature/</code>\u3001<code>bugfix/</code> \u3067\u59cb\u307e\u308b\u30d6\u30e9\u30f3\u30c1\u3078\u306e\u30d7\u30c3\u30b7\u30e5 - \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: <code>master</code>\u307e\u305f\u306f<code>develop</code>\u30d6\u30e9\u30f3\u30c1\u3078\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8</p>"},{"location":"design_kkfw_0.5.0/#173","title":"17.3 \u30c6\u30b9\u30c8\u81ea\u52d5\u5316\u3068\u30ab\u30d0\u30ec\u30c3\u30b8","text":"<p>CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u4e3b\u8981\u306a\u6a5f\u80fd\u306e\u4e00\u3064\u304c\u81ea\u52d5\u30c6\u30b9\u30c8\u3068\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u8a08\u6e2c\u3067\u3059\uff1a</p> <pre><code>- name: Run tests with coverage\n  run: |\n    poetry run pytest --cov=app --cov=libkoiki --cov-report=term-missing --cov-report=html tests/\n\n- name: Upload HTML coverage report (optional)\n  if: ${{ env.ACT != 'true' }}\n  uses: actions/upload-artifact@v4\n  with:\n    name: html-coverage-report\n    path: htmlcov\n</code></pre> <p>\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u3088\u308a\uff1a</p> <ol> <li>\u30c6\u30b9\u30c8\u306e\u81ea\u52d5\u5b9f\u884c: <code>app</code>\u304a\u3088\u3073<code>libkoiki</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u3092\u5b9f\u884c</li> <li>\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u306e\u751f\u6210: \u30c6\u30b9\u30c8\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u60c5\u5831\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u3068HTML\u5f62\u5f0f\u3067\u751f\u6210</li> <li>\u30ec\u30dd\u30fc\u30c8\u306e\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u4fdd\u5b58: HTML\u5f62\u5f0f\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u3092\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u6210\u679c\u7269\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3001\u5f8c\u304b\u3089\u78ba\u8a8d\u53ef\u80fd</li> </ol> <p>\u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u306f\u3001\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u3069\u306e\u90e8\u5206\u304c\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u307e\u305f\u306f\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u8996\u899a\u7684\u306b\u793a\u3057\u3001\u958b\u767a\u30c1\u30fc\u30e0\u304c\u30c6\u30b9\u30c8\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306e\u6307\u91dd\u3068\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#174-ci","title":"17.4 CI\u74b0\u5883\u306e\u8a2d\u5b9a","text":"<p>CI\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3067\u306f\u3001\u30c6\u30b9\u30c8\u7528\u306e\u4e00\u6642\u7684\u306a\u74b0\u5883\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>services:\n  postgres:\n    image: postgres:15\n    ports:\n      - 5432:5432\n    env:\n      POSTGRES_DB: test_db\n      POSTGRES_USER: test_user\n      POSTGRES_PASSWORD: test_pass\n    options: &gt;-\n      --health-cmd pg_isready\n      --health-interval 10s\n      --health-timeout 5s\n      --health-retries 5\n\nenv:\n  DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_db\n  ENV_FILE: .env.ci\n</code></pre> <p>\u3053\u306e\u8a2d\u5b9a\u306b\u3088\u308a\uff1a</p> <ol> <li>PostgreSQL\u30b5\u30fc\u30d3\u30b9: \u30c6\u30b9\u30c8\u7528\u306ePostgreSQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092Docker\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u8d77\u52d5</li> <li>\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u78ba\u5b9f\u306b\u7a3c\u50cd\u3059\u308b\u307e\u3067\u5f85\u6a5f\u3059\u308b\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3092\u8a2d\u5b9a</li> <li>\u74b0\u5883\u5909\u6570: \u30c6\u30b9\u30c8\u5b9f\u884c\u306b\u5fc5\u8981\u306a\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a</li> <li>Poetry\u74b0\u5883: Poetry\u3092\u4f7f\u7528\u3057\u305f\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u3068\u4eee\u60f3\u74b0\u5883\u306e\u69cb\u7bc9</li> </ol> <p>\u3053\u306e\u4e00\u8cab\u3057\u305f\u74b0\u5883\u69cb\u7bc9\u306b\u3088\u308a\u3001\u958b\u767a\u8005\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u95a2\u4fc2\u306a\u304f\u3001\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u304c\u540c\u4e00\u306e\u6761\u4ef6\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#18","title":"18. \u307e\u3068\u3081","text":"<p>KOIKI-FW v0.5.0\u306f\u3001\u5805\u7262\u306a\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30baWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306e\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u9032\u5316\u3057\u307e\u3057\u305f\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u306e\u660e\u78ba\u306a\u5206\u96e2\u306b\u3088\u308a\u3001<code>libkoiki</code>\u3092\u30b3\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001<code>app</code>\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u5b9f\u88c5\u3068\u3057\u3066\u5206\u3051\u308b\u3053\u3068\u3067\u3001\u9ad8\u3044\u4fdd\u5b88\u6027\u3068\u518d\u5229\u7528\u6027\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>v0.5.0\u3067\u306f\u3001\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63\u3068\u5305\u62ec\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u6700\u65b0\u5316\u306b\u3088\u308a\u3001\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u74b0\u5883\u3067\u306e\u904b\u7528\u5b89\u5168\u6027\u304c\u5927\u5e45\u306b\u5411\u4e0a\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001v0.3.1\u3067\u5c0e\u5165\u3055\u308c\u305f\u7d99\u7d9a\u7684\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\uff08CI\uff09\u306b\u3088\u308a\u3001\u958b\u767a\u30d7\u30ed\u30bb\u30b9\u306e\u81ea\u52d5\u5316\u3068\u54c1\u8cea\u4fdd\u8a3c\u304c\u5f37\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u958b\u767a\u8005\u306f\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u306b\u81ea\u4fe1\u3092\u6301\u3061\u306a\u304c\u3089\u3001\u3088\u308a\u901f\u3044\u30da\u30fc\u30b9\u3067\u6a5f\u80fd\u3092\u63d0\u4f9b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3001\u30b7\u30f3\u30d7\u30eb\u306aCRUD\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u8907\u96d1\u306a\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30b7\u30b9\u30c6\u30e0\u307e\u3067\u3001\u69d8\u3005\u306a\u898f\u6a21\u3068\u8907\u96d1\u3055\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002\u7279\u306b\u3001\u5b9f\u52d9\u3067\u6c42\u3081\u3089\u308c\u308b\u3053\u3068\u306e\u591a\u3044\u6a5f\u80fd - \u8a8d\u8a3c\u30fb\u8a8d\u53ef\u3001\u975e\u540c\u671f\u51e6\u7406\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3001\u30ed\u30ae\u30f3\u30b0\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0 - \u3092\u6a19\u6e96\u3067\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001\u958b\u767a\u8005\u304c\u672c\u8cea\u7684\u306a\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306b\u96c6\u4e2d\u3067\u304d\u308b\u74b0\u5883\u3092\u6574\u3048\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#19-ddd","title":"19. \u4eca\u5f8c\u306e\u62e1\u5f35\u30fbDDD\u3078\u306e\u5e03\u77f3","text":"\u9818\u57df \u73fe\u69cb\u6210 (<code>libkoiki</code>/<code>app</code>) \u62e1\u5f35\u65b9\u5411 (DDD\u8981\u7d20\u306e\u5c0e\u5165) \u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb <code>models/</code> (\u4e3b\u306bORM\u30e2\u30c7\u30eb\u3068\u3057\u3066\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5b9a\u7fa9) <code>app/domain/models/</code> \u306b\u30c9\u30e1\u30a4\u30f3\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u914d\u7f6e\u3002DB\u30e2\u30c7\u30eb\u3068\u5206\u96e2\u3002 \u30ea\u30dd\u30b8\u30c8\u30ea <code>repositories/</code> (\u5177\u8c61\u30af\u30e9\u30b9\u3001\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u30ed\u30b8\u30c3\u30af) <code>app/domain/repositories/</code> \u306b\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08\u62bd\u8c61\uff09\u3092\u5b9a\u7fa9\u3002\u5b9f\u88c5\u306f <code>app/infrastructure/repositories/</code> \u3078\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d3\u30b9 <code>services/</code> (\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u304c\u6df7\u5728) <code>app/application/services/</code> \u307e\u305f\u306f <code>app/application/use_cases/</code> \u3068\u3057\u3066\u660e\u78ba\u306b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u5358\u4f4d\u3067\u6574\u7406\u3002 \u30c9\u30e1\u30a4\u30f3\u30b5\u30fc\u30d3\u30b9 (\u30b5\u30fc\u30d3\u30b9\u5c64\u306b\u6697\u9ed9\u7684\u306b\u542b\u307e\u308c\u308b\u53ef\u80fd\u6027\u3042\u308a) <code>app/domain/services/</code> \u306b\u3001\u7279\u5b9a\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5c5e\u3055\u306a\u3044\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u5206\u96e2\u3002 \u30c9\u30e1\u30a4\u30f3\u30a4\u30d9\u30f3\u30c8 <code>tasks/</code> (Celery\u30bf\u30b9\u30af\u304c\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u7684\u306b\u4f7f\u308f\u308c\u308b\u3053\u3068\u3082) <code>app/domain/events/</code> \u306b\u30c9\u30e1\u30a4\u30f3\u30a4\u30d9\u30f3\u30c8\u3092\u5b9a\u7fa9\u3002\u30a4\u30d9\u30f3\u30c8\u767a\u884c\u30fb\u8cfc\u8aad\u306e\u4ed5\u7d44\u307f\u3092\u6574\u5099\u3002 API\u5c64 (\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9) <code>routers/</code> (\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u3001\u30b5\u30fc\u30d3\u30b9\u547c\u3073\u51fa\u3057) <code>app/interfaces/api/</code> (\u307e\u305f\u306f <code>app/presentation/api/</code>) \u306b\u914d\u7f6e\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5c64\u3078\u306e\u30c7\u30fc\u30bf\u5909\u63db\u8cac\u52d9\u3092\u660e\u78ba\u5316\u3002 \u30b9\u30ad\u30fc\u30de (DTO) <code>schemas/</code> (Pydantic\u30e2\u30c7\u30eb\u3001API\u306e\u5165\u51fa\u529b\u3068\u5185\u90e8\u5229\u7528\u304c\u6df7\u5728) API\u5c64\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d3\u30b9\u9593\u306e\u30c7\u30fc\u30bf\u8ee2\u9001\u306b\u7279\u5316\u3057\u305fDTO\u3092 <code>app/application/dtos/</code> \u306b\u5206\u96e2\u3002 <p>DDD\uff08\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08\uff09\u3092\u672c\u683c\u7684\u306b\u5fd7\u5411\u3059\u308b\u5834\u5408\u3001 - \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3084\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u5206\u96e2\u3068\u547d\u540d\u306e\u53b3\u683c\u5316 - \u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d3\u30b9\uff09\u3068\u30c9\u30e1\u30a4\u30f3\u30b5\u30fc\u30d3\u30b9\u306e\u5206\u96e2 - \u30a4\u30f3\u30d5\u30e9\u5c64\u30fb\u30a2\u30d7\u30ea\u5c64\u30fb\u30c9\u30e1\u30a4\u30f3\u5c64\u306e\u660e\u78ba\u306a\u5f79\u5272\u5206\u62c5 - \u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u8a2d\u8a08\u3084CQRS\u30d1\u30bf\u30fc\u30f3\u306e\u6bb5\u968e\u7684\u5c0e\u5165 - \u62bd\u8c61\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u30a4\u30f3\u30d5\u30e9\u5b9f\u88c5\u306e\u5206\u96e2 \u306a\u3069\u304c\u767a\u5c55\u7684\u306a\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002</p> <p>\u73fe\u72b6\u306eKOIKI-FW\u69cb\u9020\u306f\u3053\u3046\u3057\u305f\u62e1\u5f35\u306b\u5099\u3048\u305f\u300c\u8db3\u5834\u300d\u3068\u3057\u3066\u8a2d\u8a08\u3055\u308c\u3066\u304a\u308a\u3001\u4eca\u5f8c\u3082\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3084\u5b9f\u52d9\u73fe\u5834\u306e\u58f0\u3092\u53cd\u6620\u3057\u306a\u304c\u3089\u9032\u5316\u3092\u7d9a\u3051\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#20","title":"20. \u30d0\u30fc\u30b8\u30e7\u30f3\u5c65\u6b74","text":"\u30d0\u30fc\u30b8\u30e7\u30f3 \u65e5\u4ed8 \u4e3b\u306a\u5909\u66f4\u5185\u5bb9 0.5.0 2025-06-21 - \u91cd\u8981\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63 (fastapi, python-jose, starlette)- \u5305\u62ec\u7684\u4f9d\u5b58\u95a2\u4fc2\u30e2\u30c0\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3- Python 3.13 \u5bfe\u5fdc- \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5411\u3051\u4f9d\u5b58\u6027\u7ba1\u7406\u6226\u7565\u306e\u5c0e\u5165 0.3.1 2024-06-XX - CI\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5c0e\u5165\u30fb\u8a2d\u8a08\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5237\u65b0- \u8a8d\u8a3c\u30fb\u4f9d\u5b58\u6027\u306e\u6700\u65b0\u5b9f\u88c5\u53cd\u6620 0.3.0 2024-05-XX - <code>libkoiki/</code> \u3068 <code>app/</code> \u306e\u660e\u78ba\u306a\u5206\u96e2- \u30b5\u30fc\u30d3\u30b9/\u30ea\u30dd\u30b8\u30c8\u30ea/\u30e2\u30c7\u30eb/\u30b9\u30ad\u30fc\u30de\u5206\u5272 0.2.x 2024-04-XX - \u975e\u540c\u671f\u51e6\u7406Celery\u30fbRBAC\u30fb\u76e3\u67fb\u30ed\u30b0\u306e\u5c0e\u5165 0.1.x 2024-03-XX - FastAPI\u30d9\u30fc\u30b9\u306e\u521d\u671f\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"design_kkfw_0.5.0/#_15","title":"\u304a\u308f\u308a\u306b","text":"<p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f KOIKI-FW \u306e\u8a2d\u8a08\u601d\u60f3\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3001\u4e3b\u8981\u6a5f\u80fd\u3001CI/CD\u3084\u30c6\u30b9\u30c8\u6226\u7565\u307e\u3067\u3001\u5b9f\u52d9\u306b\u5373\u3057\u305f\u5f62\u3067\u5305\u62ec\u7684\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002</p>"},{"location":"design_kkfw_0.5.0/#_16","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u5b9f\u88c5\u306e\u6574\u5408\u6027\u306e\u91cd\u8981\u6027","text":"<p>KOIKI-FW v0.5.0 \u3067\u306f\u3001 - \u5b9f\u88c5\u30d1\u30b9\u306e\u660e\u78ba\u5316\uff08\u4f8b\uff1a<code>libkoiki/core/security.py</code> \u3078\u306e\u7d71\u4e00\uff09 - \u4f9d\u5b58\u6027\u6ce8\u5165\u3084\u8a2d\u5b9a\u53d6\u5f97\u306e\u7d71\u4e00 - CI/CD\u8a2d\u8a08\u306e\u660e\u6587\u5316 - \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u6700\u65b0\u7248\u3078\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 </p> <p>\u3092\u5fb9\u5e95\u3057\u3001\u300c\u8a2d\u8a08\u66f8\u3068\u5b9f\u88c5\u306b\u9f5f\u9f6c\u304c\u306a\u3044\u3053\u3068\u300d\u3092\u91cd\u8996\u3057\u3066\u3044\u307e\u3059\u3002 \u8a2d\u8a08\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u5e38\u306b\u5b9f\u88c5\u3068\u540c\u671f\u3057\u3001\u73fe\u5834\u306e\u958b\u767a\u8005\u304c\u8ff7\u308f\u305a\u53c2\u7167\u3067\u304d\u308b\u72b6\u614b\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u3067\u3001\u958b\u767a\u52b9\u7387\u3068\u54c1\u8cea\u306e\u53cc\u65b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002</p>"},{"location":"design_kkfw_0.5.0/#ddd","title":"DDD\u30fb\u30de\u30eb\u30c1\u30ec\u30a4\u30e4\u5316\u3078\u306e\u4eca\u5f8c\u306e\u5c55\u671b","text":"<ul> <li>\u4eca\u5f8c\u306f\u672c\u8a2d\u8a08\u3092\u571f\u53f0\u306b\u3001\u300c\u30c9\u30e1\u30a4\u30f3\u5c64\u300d\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5c64\u300d\u300c\u30a4\u30f3\u30d5\u30e9\u5c64\u300d\u300c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5c64\u300d\u306e\u3055\u3089\u306a\u308b\u5206\u5272\uff08DDD\u30d1\u30bf\u30fc\u30f3\uff09\u306b\u62e1\u5f35\u3057\u3084\u3059\u3044\u69cb\u6210\u3078\u9032\u5316\u3055\u305b\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002</li> <li>\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u3084\u30c9\u30e1\u30a4\u30f3\u30a4\u30d9\u30f3\u30c8\u3001DTO\u306a\u3069\u3001\u672c\u683c\u7684\u306a\u696d\u52d9\u958b\u767a\u306b\u5fc5\u8981\u306a\u8981\u7d20\u3082\u6bb5\u968e\u7684\u306b\u53d6\u308a\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002</li> </ul>"},{"location":"design_kkfw_0.5.0/#_17","title":"\u53c2\u8003\u30ea\u30f3\u30af","text":"<ul> <li>FastAPI\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>SQLAlchemy\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Pydantic\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Celery\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>structlog\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>GitHub Actions\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>pytest\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> </ul>"},{"location":"design_kkfw_0.5.0/#appendix-faq","title":"Appendix: \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3068FAQ","text":""},{"location":"design_kkfw_0.5.0/#_18","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u30ac\u30a4\u30c9","text":"<ol> <li>Issue\u306e\u5831\u544a    \u30d0\u30b0\u30fb\u6539\u5584\u63d0\u6848\u30fb\u8cea\u554f\u306a\u3069\u306fGitHub Issues\u3078\u3054\u767b\u9332\u304f\u3060\u3055\u3044\u3002  </li> <li>Pull Request\u306e\u4f5c\u6210    \u65b0\u6a5f\u80fd\u8ffd\u52a0\u3084\u30d0\u30b0\u4fee\u6b63\u306f\u3001\u660e\u78ba\u306a\u8aac\u660e\u30fb\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u6dfb\u3048\u3066\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584    \u8a2d\u8a08\u30fb\u5c0e\u5165\u30fb\u5b9f\u88c5\u4f8b\u306a\u3069\u306e\u6539\u5584\u63d0\u6848\u3082\u6b53\u8fce\u3067\u3059\u3002</li> </ol>"},{"location":"design_kkfw_0.5.0/#faq","title":"FAQ","text":"<p>Q: \u30b5\u30f3\u30d7\u30eb\u3084\u8a2d\u8a08\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5185\u5bb9\u3068\u5b9f\u969b\u306e\u5b9f\u88c5\u3067\u98df\u3044\u9055\u3044\u304c\u3042\u308b\u5834\u5408\u306f\uff1f A: \u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 v0.5.0 \u3067\u306f\u3001\u30d1\u30b9\u30fb\u8a2d\u5b9a\u30fb\u4f9d\u5b58\u6027\u30fbCI/CD\u306e\u5b9f\u88c5\u5dee\u7570\u3092\u5fb9\u5e95\u7684\u306b\u7cbe\u67fb\u3057\u3001\u8a18\u8ff0\u306e\u8aa4\u308a\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u91cd\u8981\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u306e\u4fee\u6b63\u3068\u5305\u62ec\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u6700\u65b0\u5316\u306b\u3064\u3044\u3066\u3082\u53cd\u6620\u3057\u3066\u3044\u307e\u3059\u3002 \u3082\u3057\u4eca\u5f8c\u3082\u5dee\u7570\u3092\u767a\u898b\u3057\u305f\u5834\u5408\u306f\u3001Issue\u3067\u3054\u5831\u544a\u304f\u3060\u3055\u3044\u3002</p> <p>Q: \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u5b9f\u969b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u69cb\u6210\u304c\u7570\u306a\u308b\u5834\u5408\u306e\u5bfe\u5fdc\u306f\uff1f A: \u5fc5\u305a\u300c\u6700\u65b0\u7248\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u5b9f\u88c5\u300d\u306b\u5408\u308f\u305b\u3066\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3084\u8aac\u660e\u3082\u8ffd\u5f93\u3059\u308b\u904b\u7528\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u8a2d\u8a08\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4fe1\u983c\u3067\u304d\u308b\u552f\u4e00\u306e\u4ed5\u69d8\u66f8\u3068\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>Q: DDD\uff08\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08\uff09\u3078\u306e\u79fb\u884c\u306f\u3069\u306e\u3088\u3046\u306b\u9032\u3081\u3066\u3044\u304f\uff1f A: \u307e\u305a\u306f\u30b5\u30fc\u30d3\u30b9\u30fb\u30ea\u30dd\u30b8\u30c8\u30ea\u30fb\u30e2\u30c7\u30eb\u306e\u8cac\u52d9\u5206\u5272\u3092\u5fb9\u5e95\u3057\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u5358\u4f4d\u3067\u306e\u30b5\u30fc\u30d3\u30b9\u5316\u30fbDTO\u5c0e\u5165\u30fb\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5316\u306a\u3069\u3001\u6bb5\u968e\u7684\u306a\u79fb\u884c\u3092\u56f3\u308a\u307e\u3059\u3002</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u5b9f\u88c5\u3068\u8a2d\u8a08\u306e\u5b8c\u5168\u306a\u540c\u671f\u3092\u76ee\u6307\u3057\u3001\u73fe\u5834\u958b\u767a\u8005\u306e\u300c\u8ff7\u3044\u30bc\u30ed\u300d\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p>"}]}